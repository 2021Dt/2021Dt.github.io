<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>javaweb</title>
      <link href="/posts/6e827460/"/>
      <url>/posts/6e827460/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>algorithm</title>
      <link href="/posts/9505ccb9/"/>
      <url>/posts/9505ccb9/</url>
      
        <content type="html"><![CDATA[<h1 id="链表">链表</h1><p>内存空间是所有程序的公共资源，在一个复杂的系统运行环境下，空闲的内存空间可能散落在内存各处。我们知道，存储数组的内存空间必须是连续的，而当数组非常大时，内存可能无法提供如此大的连续空间。此时链表的灵活性优势就体现出来了。</p><p>「链表 linked list」是一种线性数据结构，其中的每个元素都是一个节点对象，各个节点通过“引用”相连接。引用记录了下一个节点的内存地址，通过它可以从当前节点访问到下一个节点。</p><p>链表的设计使得各个节点可以分散存储在内存各处，它们的内存地址无须连续。</p><p>链表的组成单位是「节点 node」对象。每个节点都包含两项数据：节点的“值”和指向下一节点的“引用”。</p><ul><li>链表的首个节点被称为“头节点”，最后一个节点被称为“尾节点”。</li><li>尾节点指向的是“空”，它在 Java、C++ 和 Python 中分别被记为 null、nullptr 和 None 。</li><li>在 C、C++、Go 和 Rust 等支持指针的语言中，上述“引用”应被替换为“指针”。</li></ul><p>u 链表节点 <code>ListNode</code> 除了包含值，还需额外保存一个引用（指针）。<em><strong>因此在相同数据量下，链表比数组占用更多的内存空间。</strong></em></p><h2 id="初始化链表">初始化链表</h2><div class="tabs" id="初始化代码"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="初始化代码-1">Python</button><button type="button" class="tab " data-href="初始化代码-2">C++</button><button type="button" class="tab " data-href="初始化代码-3">Java</button><button type="button" class="tab " data-href="初始化代码-4">C#</button><button type="button" class="tab " data-href="初始化代码-5">JS</button></ul><div class="tab-contents"><div class="tab-item-content active" id="初始化代码-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;链表节点类&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val: <span class="built_in">int</span></span>):</span><br><span class="line">        self.val: <span class="built_in">int</span> = val               <span class="comment"># 节点值</span></span><br><span class="line">        self.<span class="built_in">next</span>: ListNode | <span class="literal">None</span> = <span class="literal">None</span> <span class="comment"># 指向下一节点的引用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化链表 1 -&gt; 3 -&gt; 2 -&gt; 5 -&gt; 4</span></span><br><span class="line"><span class="comment"># 初始化各个节点</span></span><br><span class="line">n0 = ListNode(<span class="number">1</span>)</span><br><span class="line">n1 = ListNode(<span class="number">3</span>)</span><br><span class="line">n2 = ListNode(<span class="number">2</span>)</span><br><span class="line">n3 = ListNode(<span class="number">5</span>)</span><br><span class="line">n4 = ListNode(<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 构建节点之间的引用</span></span><br><span class="line">n0.<span class="built_in">next</span> = n1</span><br><span class="line">n1.<span class="built_in">next</span> = n2</span><br><span class="line">n2.<span class="built_in">next</span> = n3</span><br><span class="line">n3.<span class="built_in">next</span> = n4</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-2"><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 链表节点结构体 */</span></span><br><span class="line">struct ListNode &#123;</span><br><span class="line">    <span class="built_in">int</span> val;         <span class="comment">// 节点值</span></span><br><span class="line">    ListNode *<span class="keyword">next</span>;  <span class="comment">// 指向下一节点的指针</span></span><br><span class="line">    ListNode(<span class="built_in">int</span> x) : val(x), <span class="keyword">next</span>(nullptr) &#123;&#125;  <span class="comment">// 构造函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化链表 1 -&gt; 3 -&gt; 2 -&gt; 5 -&gt; 4 */</span></span><br><span class="line"><span class="comment">// 初始化各个节点</span></span><br><span class="line">ListNode* n0 = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">ListNode* n1 = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">ListNode* n2 = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">ListNode* n3 = <span class="keyword">new</span> ListNode(<span class="number">5</span>);</span><br><span class="line">ListNode* n4 = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line"><span class="comment">// 构建节点之间的引用</span></span><br><span class="line">n0-&gt;<span class="keyword">next</span> = n1;</span><br><span class="line">n1-&gt;<span class="keyword">next</span> = n2;</span><br><span class="line">n2-&gt;<span class="keyword">next</span> = n3;</span><br><span class="line">n3-&gt;<span class="keyword">next</span> = n4;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-3"><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/* 链表节点类 */</span><br><span class="line">class ListNode &#123;</span><br><span class="line">    int val<span class="comment">;        // 节点值</span></span><br><span class="line">    ListNode next<span class="comment">;  // 指向下一节点的引用</span></span><br><span class="line">    ListNode(int x) &#123; val <span class="operator">=</span> x<span class="comment">; &#125;  // 构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* 初始化链表 <span class="number">1</span> -&gt; <span class="number">3</span> -&gt; <span class="number">2</span> -&gt; <span class="number">5</span> -&gt; <span class="number">4</span> */</span><br><span class="line">// 初始化各个节点</span><br><span class="line">ListNode n0 <span class="operator">=</span> new ListNode(<span class="number">1</span>)<span class="comment">;</span></span><br><span class="line">ListNode n1 <span class="operator">=</span> new ListNode(<span class="number">3</span>)<span class="comment">;</span></span><br><span class="line">ListNode n2 <span class="operator">=</span> new ListNode(<span class="number">2</span>)<span class="comment">;</span></span><br><span class="line">ListNode n3 <span class="operator">=</span> new ListNode(<span class="number">5</span>)<span class="comment">;</span></span><br><span class="line">ListNode n4 <span class="operator">=</span> new ListNode(<span class="number">4</span>)<span class="comment">;</span></span><br><span class="line">// 构建节点之间的引用</span><br><span class="line">n0.next <span class="operator">=</span> n1<span class="comment">;</span></span><br><span class="line">n1.next <span class="operator">=</span> n2<span class="comment">;</span></span><br><span class="line">n2.next <span class="operator">=</span> n3<span class="comment">;</span></span><br><span class="line">n3.next <span class="operator">=</span> n4<span class="comment">;</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-4"><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 链表节点类 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>(<span class="built_in">int</span> x) &#123;  <span class="comment">//构造函数</span></span><br><span class="line">    <span class="built_in">int</span> val = x;         <span class="comment">// 节点值</span></span><br><span class="line">    ListNode? <span class="keyword">next</span>;      <span class="comment">// 指向下一节点的引用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化链表 1 -&gt; 3 -&gt; 2 -&gt; 5 -&gt; 4 */</span></span><br><span class="line"><span class="comment">// 初始化各个节点</span></span><br><span class="line">ListNode n0 = <span class="keyword">new</span>(<span class="number">1</span>);</span><br><span class="line">ListNode n1 = <span class="keyword">new</span>(<span class="number">3</span>);</span><br><span class="line">ListNode n2 = <span class="keyword">new</span>(<span class="number">2</span>);</span><br><span class="line">ListNode n3 = <span class="keyword">new</span>(<span class="number">5</span>);</span><br><span class="line">ListNode n4 = <span class="keyword">new</span>(<span class="number">4</span>);</span><br><span class="line"><span class="comment">// 构建节点之间的引用</span></span><br><span class="line">n0.<span class="keyword">next</span> = n1;</span><br><span class="line">n1.<span class="keyword">next</span> = n2;</span><br><span class="line">n2.<span class="keyword">next</span> = n3;</span><br><span class="line">n3.<span class="keyword">next</span> = n4;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-5"><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 链表节点类 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    constructor(val, <span class="keyword">next</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.val = (val === undefined ? <span class="number">0</span> : val);       <span class="comment">// 节点值</span></span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">next</span> = (<span class="keyword">next</span> === undefined ? <span class="literal">null</span> : <span class="keyword">next</span>); <span class="comment">// 指向下一节点的引用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 初始化链表 1 -&gt; 3 -&gt; 2 -&gt; 5 -&gt; 4 */</span></span><br><span class="line"><span class="comment">// 初始化各个节点</span></span><br><span class="line"><span class="keyword">const</span> n0 = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> n1 = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> n2 = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> n3 = <span class="keyword">new</span> ListNode(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">const</span> n4 = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line"><span class="comment">// 构建节点之间的引用</span></span><br><span class="line">n0.<span class="keyword">next</span> = n1;</span><br><span class="line">n1.<span class="keyword">next</span> = n2;</span><br><span class="line">n2.<span class="keyword">next</span> = n3;</span><br><span class="line">n3.<span class="keyword">next</span> = n4;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="插入结点">插入结点</h2><ul><li>插入结点就是让插入的结点指向后结点，再让前结点指向插入结点。</li></ul><div class="tabs" id="初始化代码"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="初始化代码-1">Python</button><button type="button" class="tab " data-href="初始化代码-2">C++</button><button type="button" class="tab " data-href="初始化代码-3">Java</button><button type="button" class="tab " data-href="初始化代码-4">C#</button><button type="button" class="tab " data-href="初始化代码-5">JS</button></ul><div class="tab-contents"><div class="tab-item-content active" id="初始化代码-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">n0: ListNode, P: ListNode</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;在链表的节点 n0 之后插入节点 P&quot;&quot;&quot;</span></span><br><span class="line">    n1 = n0.<span class="built_in">next</span></span><br><span class="line">    P.<span class="built_in">next</span> = n1</span><br><span class="line">    n0.<span class="built_in">next</span> = P</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-2"><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在链表的节点 n0 之后插入节点 P */</span></span><br><span class="line"><span class="keyword">void</span> insert(ListNode *n0, ListNode *P) &#123;</span><br><span class="line">    ListNode *n1 = n0-&gt;<span class="keyword">next</span>;</span><br><span class="line">    P-&gt;<span class="keyword">next</span> = n1;</span><br><span class="line">    n0-&gt;<span class="keyword">next</span> = P;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-3"><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在链表的节点 n0 之后插入节点 P */</span></span><br><span class="line"><span class="keyword">void</span> insert(ListNode n0, ListNode P) &#123;</span><br><span class="line">    ListNode n1 = n0.<span class="keyword">next</span>;</span><br><span class="line">    P.<span class="keyword">next</span> = n1;</span><br><span class="line">    n0.<span class="keyword">next</span> = P;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-4"><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在链表的节点 n0 之后插入节点 P */</span></span><br><span class="line"><span class="keyword">void</span> Insert(ListNode n0, ListNode P) &#123;</span><br><span class="line">    ListNode? n1 = n0.<span class="keyword">next</span>;</span><br><span class="line">    P.<span class="keyword">next</span> = n1;</span><br><span class="line">    n0.<span class="keyword">next</span> = P;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-5"><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/* 在链表的节点 n0 之后插入节点 P */</span></span><br><span class="line"><span class="keyword">function</span> insert(n0, P) &#123;</span><br><span class="line">    const n1 = n0.<span class="keyword">next</span>;</span><br><span class="line">    P.<span class="keyword">next</span> = n1;</span><br><span class="line">    n0.<span class="keyword">next</span> = P;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="删除结点">删除结点</h2><ul><li>捋清楚前后关系，其实删除结点就是将前一个结点指向不在指向被删除的结点，而是指向被删除结点之后的结点。</li></ul><div class="tabs" id="初始化代码"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="初始化代码-1">Python</button><button type="button" class="tab " data-href="初始化代码-2">C++</button><button type="button" class="tab " data-href="初始化代码-3">Java</button><button type="button" class="tab " data-href="初始化代码-4">C#</button><button type="button" class="tab " data-href="初始化代码-5">JS</button></ul><div class="tab-contents"><div class="tab-item-content active" id="初始化代码-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">n0: ListNode</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;删除链表的节点 n0 之后的首个节点&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> n0.<span class="built_in">next</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># n0 -&gt; P -&gt; n1</span></span><br><span class="line">    P = n0.<span class="built_in">next</span></span><br><span class="line">    n1 = P.<span class="built_in">next</span></span><br><span class="line">    n0.<span class="built_in">next</span> = n1</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-2"><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 删除链表的节点 n0 之后的首个节点 */</span></span><br><span class="line">void remove(ListNode *n0) &#123;</span><br><span class="line">    <span class="function"><span class="title">if</span> (n0-&gt;</span>next == nullptr)</span><br><span class="line">        return;</span><br><span class="line">    <span class="comment">// n0 -&gt; P -&gt; n1</span></span><br><span class="line">    L<span class="function"><span class="title">istNode</span> *P = n0-&gt;</span>next;</span><br><span class="line">    L<span class="function"><span class="title">istNode</span> *n1 = P-&gt;</span>next;</span><br><span class="line">    <span class="function"><span class="title">n0</span>-&gt;</span>next = n1;</span><br><span class="line">    <span class="comment">// 释放内存</span></span><br><span class="line">    delete P;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-3"><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/* 删除链表的节点 n0 之后的首个节点 */</span><br><span class="line">void remove(ListNode n0) &#123;</span><br><span class="line">    if (n0.next <span class="operator">=</span><span class="operator">=</span> null)</span><br><span class="line">        return<span class="comment">;</span></span><br><span class="line">    // n0 -&gt; P -&gt; n1</span><br><span class="line">    ListNode P <span class="operator">=</span> n0.next<span class="comment">;</span></span><br><span class="line">    ListNode n1 <span class="operator">=</span> P.next<span class="comment">;</span></span><br><span class="line">    n0.next <span class="operator">=</span> n1<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-4"><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 删除链表的节点 n0 之后的首个节点 */</span></span><br><span class="line">function remove(n0) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!n0.<span class="keyword">next</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// n0 -&gt; P -&gt; n1</span></span><br><span class="line">    <span class="keyword">const</span> P = n0.<span class="keyword">next</span>;</span><br><span class="line">    <span class="keyword">const</span> n1 = P.<span class="keyword">next</span>;</span><br><span class="line">    n0.<span class="keyword">next</span> = n1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-5"><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/* 在链表的节点 n0 之后插入节点 P */</span></span><br><span class="line"><span class="keyword">function</span> insert(n0, P) &#123;</span><br><span class="line">    const n1 = n0.<span class="keyword">next</span>;</span><br><span class="line">    P.<span class="keyword">next</span> = n1;</span><br><span class="line">    n0.<span class="keyword">next</span> = P;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="访问结点和查找结点">访问结点和查找结点</h2><p>***在链表中访问节点的效率较低。***我们可以在$O(1)$时间下访问数组中的任意元素。链表则不然，程序需要从头节点出发，逐个向后遍历，直至找到目标节点。也就是说，访问链表的第$i$个节点需要循环$i-1$轮，时间复杂度为$O(n)$。</p><blockquote><p>查找结点也是循环遍历。</p></blockquote><h2 id="数组和链表的区别">数组和链表的区别</h2><ul><li>存储方式不同：前者是 <em><strong>连续内存空间</strong></em>，后者是 <em><strong>分散内存空间</strong></em></li><li>容量扩展不同：前者是 <em><strong>长度不可变</strong></em>，后者是 <em><strong>可灵活扩展</strong></em></li><li>内存效率不同：前者是 <em><strong>元素占用内存少、但可能浪费空间</strong></em>，后者是 <em><strong>元素占用内存多</strong></em></li><li>访问元素速度不同：前者是 <em><strong>$O(1)$</strong></em>，后者是 <em><strong>$O(n)$</strong></em></li><li>添加和删除元素速度不同：前者是 <em><strong>$O(n)$</strong></em>，后者是 <em><strong>$O(1)$</strong></em></li></ul><h2 id="常见链表类型">常见链表类型</h2><ul><li>单向链表：即前面介绍的普通链表。单向链表的节点包含值和指向下一节点的引用两项数据。我们将首个节点称为头节点，将最后一个节点称为尾节点，尾节点指向空 <code>None</code> 。</li><li>环形链表：如果我们令单向链表的尾节点指向头节点（首尾相接），则得到一个环形链表。在环形链表中，任意节点都可以视作头节点。</li><li>双向链表：与单向链表相比，双向链表记录了两个方向的引用。双向链表的节点定义同时包含指向后继节点（下一个节点）和前驱节点（上一个节点）的引用（指针）。相较于单向链表，双向链表更具灵活性，可以朝两个方向遍历链表，但相应地也需要占用更多的内存空间。</li></ul><div class="tabs" id="初始化代码"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="初始化代码-1">Python</button><button type="button" class="tab " data-href="初始化代码-2">C++</button><button type="button" class="tab " data-href="初始化代码-3">Java</button><button type="button" class="tab " data-href="初始化代码-4">C#</button><button type="button" class="tab " data-href="初始化代码-5">JS</button></ul><div class="tab-contents"><div class="tab-item-content active" id="初始化代码-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;双向链表节点类&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, val: <span class="built_in">int</span></span>):</span><br><span class="line">        self.val: <span class="built_in">int</span> = val                <span class="comment"># 节点值</span></span><br><span class="line">        self.<span class="built_in">next</span>: ListNode | <span class="literal">None</span> = <span class="literal">None</span>  <span class="comment"># 指向后继节点的引用</span></span><br><span class="line">        self.prev: ListNode | <span class="literal">None</span> = <span class="literal">None</span>  <span class="comment"># 指向前驱节点的引用</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 双向链表节点结构体 */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;         <span class="comment">// 节点值</span></span><br><span class="line">    ListNode *next;  <span class="comment">// 指向后继节点的指针</span></span><br><span class="line">    ListNode *prev;  <span class="comment">// 指向前驱节点的指针</span></span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">nullptr</span>), <span class="built_in">prev</span>(<span class="literal">nullptr</span>) &#123;&#125;  <span class="comment">// 构造函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-3"><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 双向链表节点类 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="built_in">int</span> val;        <span class="comment">// 节点值</span></span><br><span class="line">    ListNode <span class="keyword">next</span>;  <span class="comment">// 指向后继节点的引用</span></span><br><span class="line">    ListNode prev;  <span class="comment">// 指向前驱节点的引用</span></span><br><span class="line">    ListNode(<span class="built_in">int</span> x) &#123; val = x; &#125;  <span class="comment">// 构造函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-4"><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 双向链表节点类 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">ListNode</span>(<span class="symbol">int</span> <span class="symbol">x</span>) &#123;  <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="built_in">int</span> val = x;    <span class="comment">// 节点值</span></span><br><span class="line">    ListNode next;  <span class="comment">// 指向后继节点的引用</span></span><br><span class="line">    ListNode prev;  <span class="comment">// 指向前驱节点的引用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-5"><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 双向链表节点类 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="keyword">val</span>, next, prev) &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">val</span> = <span class="keyword">val</span>  ===  undefined ? <span class="number">0</span> : <span class="keyword">val</span>;        <span class="comment">// 节点值</span></span><br><span class="line">        <span class="keyword">this</span>.next = next  ===  undefined ? <span class="literal">null</span> : next;  <span class="comment">// 指向后继节点的引用</span></span><br><span class="line">        <span class="keyword">this</span>.prev = prev  ===  undefined ? <span class="literal">null</span> : prev;  <span class="comment">// 指向前驱节点的引用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="链表的基本应用">链表的基本应用</h2><p>单向链表通常用于实现栈、队列、哈希表和图等数据结构。</p><ul><li><p><em><strong>栈与队列</strong></em>：当插入和删除操作都在链表的一端进行时，它表现出先进后出的特性，对应栈；当插入操作在链表的一端进行，删除操作在链表的另一端进行，它表现出先进先出的特性，对应队列。</p></li><li><p><em><strong>哈希表</strong></em>：链式地址是解决哈希冲突的主流方案之一，在该方案中，所有冲突的元素都会被放到一个链表中。</p></li><li><p><em><strong>图</strong></em>：邻接表是表示图的一种常用方式，其中图的每个顶点都与一个链表相关联，链表中的每个元素都代表与该顶点相连的其他顶点。<br>双向链表常用于需要快速查找前一个和后一个元素的场景。</p></li><li><p><em><strong>高级数据结构</strong></em>：比如在红黑树、B 树中，我们需要访问节点的父节点，这可以通过在节点中保存一个指向父节点的引用来实现，类似于双向链表。<br>浏览器历史：在网页浏览器中，当用户点击前进或后退按钮时，浏览器需要知道用户访问过的前一个和后一个网页。双向链表的特性使得这种操作变得简单。</p></li><li><p><em><strong>LRU 算法</strong></em>：在缓存淘汰（LRU）算法中，我们需要快速找到最近最少使用的数据，以及支持快速添加和删除节点。这时候使用双向链表就非常合适。<br>环形链表常用于需要周期性操作的场景，比如操作系统的资源调度。</p></li><li><p><em><strong>时间片轮转调度算法</strong></em>：在操作系统中，时间片轮转调度算法是一种常见的 CPU 调度算法，它需要对一组进程进行循环。每个进程被赋予一个时间片，当时间片用完时，CPU 将切换到下一个进程。这种循环操作可以通过环形链表来实现。</p></li><li><p><em><strong>数据缓冲区</strong></em>：在某些数据缓冲区的实现中，也可能会使用环形链表。比如在音频、视频播放器中，数据流可能会被分成多个缓冲块并放入一个环形链表，以便实现无缝播放。</p></li></ul><h2 id="总结">总结</h2><ul><li>捋清楚每个元素指向的位置是写好链表算法最为重要的一步。</li><li>数组和链表是两种基本的数据结构，分别代表数据在计算机内存中的两种存储方式：连续空间存储和分散空间存储。两者的特点呈现出互补的特性。</li><li>数组支持随机访问、占用内存较少；但插入和删除元素效率低，且初始化后长度不可变。</li><li>链表通过更改引用（指针）实现高效的节点插入与删除，且可以灵活调整长度；但节点访问效率低、占用内存较多。常见的链表类型包括单向链表、环形链表、双向链表。</li><li>列表是一种支持增删查改的元素有序集合，通常基于动态数组实现。它保留了数组的优势，同时可以灵活调整长度。</li><li>列表的出现大幅提高了数组的实用性，但可能导致部分内存空间浪费。<br>程序运行时，数据主要存储在内存中。数组可提供更高的内存空间效率，而链表则在内存使用上更加灵活。</li><li>缓存通过缓存行、预取机制以及空间局部性和时间局部性等数据加载机制，为 CPU 提供快速数据访问，显著提升程序的执行效率。</li><li>由于数组具有更高的缓存命中率，因此它通常比链表更高效。在选择数据结构时，应根据具体需求和场景做出恰当选择。</li><li>存储在栈上和堆上的数组都被存储在连续内存空间内，数据操作效率基本一致。然而，栈和堆具有各自的特点，从而导致以下不同点。<br> 1. 分配和释放效率：栈是一块较小的内存，分配由编译器自动完成；而堆内存相对更大，可以在代码中动态分配，更容易碎片化。因此，堆上的分配和释放操作通常比栈上的慢。<br> 2. 大小限制：栈内存相对较小，堆的大小一般受限于可用内存。因此堆更加适合存储大型数组。<br> 3. 灵活性：栈上的数组的大小需要在编译时确定，而堆上的数组的大小可以在运行时动态确定。</li></ul><h2 id="链表算法练习">链表算法练习</h2><h3 id="反转链表1"><a href="https://leetcode.cn/leetbook/read/illustration-of-algorithm/7fpt1m/">反转链表1</a></h3><blockquote><p>输入：head = [3,6,4,1]<br>输出：[1,4,6,3]</p></blockquote><p>反转有着 <em><strong>后进先出</strong></em> 的特性，所以可以使用栈来解决问题<br>由于重复性操作，本题也可以使用递归。<br>注意返回的是数组哦。</p><p>Java代码如下</p><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * public <span class="keyword">class</span> <span class="type">ListNode</span> &#123;</span><br><span class="line"> *     <span class="built_in">int</span> <span class="keyword">val</span>;</span><br><span class="line"> *     <span class="type">ListNode</span> next;</span><br><span class="line"> *     <span class="type">ListNode</span><span class="literal">()</span> &#123;&#125;</span><br><span class="line"> *     <span class="type">ListNode</span>(<span class="built_in">int</span> <span class="keyword">val</span>) &#123; this.<span class="keyword">val</span> = <span class="keyword">val</span>; &#125;</span><br><span class="line"> *     <span class="type">ListNode</span>(<span class="built_in">int</span> <span class="keyword">val</span>, <span class="type">ListNode</span> next) &#123; this.<span class="keyword">val</span> = <span class="keyword">val</span>; this.next = next; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">class</span> <span class="type">Solution</span> &#123;</span><br><span class="line">    public <span class="built_in">int</span><span class="literal">[]</span> reverseBookList(<span class="type">ListNode</span> head) &#123;</span><br><span class="line">        <span class="type">Stack</span>&lt;<span class="type">Integer</span>&gt;ans = <span class="keyword">new</span> <span class="type">Stack</span>&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">        <span class="keyword">while</span>(head!=null)&#123;</span><br><span class="line">            ans.push(head.<span class="keyword">val</span>);</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span><span class="literal">[]</span> tmp = <span class="keyword">new</span> <span class="built_in">int</span>[ans.size<span class="literal">()</span>];</span><br><span class="line">        <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!ans.isEmpty<span class="literal">()</span>)&#123;</span><br><span class="line">            tmp[i] = ans.pop<span class="literal">()</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        return tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反转列表2"><a href="https://leetcode.cn/leetbook/read/illustration-of-algorithm/7fadz7/">反转列表2</a></h3><blockquote><p>输入：head = [1,2,3,4,5]<br>输出：[5,4,3,2,1]</p></blockquote><p>定义一个头节点用于循环遍历，再定义一个空结点用于储存，让头节点指向储存结点就可以达到反转效果。1 到 1 &lt;-2 到 1 &lt;- 2 &lt;- 3 ···</p><p>Java代码如下：</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/**</span></span><br><span class="line"> <span class="operator">*</span> <span class="keyword">public</span> <span class="keyword">class</span> ListNode &#123;</span><br><span class="line"> <span class="operator">*</span>     int <span class="keyword">val</span>;</span><br><span class="line"> <span class="operator">*</span>     ListNode next;</span><br><span class="line"> <span class="operator">*</span>     ListNode() &#123;&#125;</span><br><span class="line"> <span class="operator">*</span>     ListNode(int <span class="keyword">val</span>) &#123; this.<span class="keyword">val</span> <span class="operator">=</span> <span class="keyword">val</span>; &#125;</span><br><span class="line"> <span class="operator">*</span>     ListNode(int <span class="keyword">val</span>, ListNode next) &#123; this.<span class="keyword">val</span> <span class="operator">=</span> <span class="keyword">val</span>; this.next <span class="operator">=</span> next; &#125;</span><br><span class="line"> <span class="operator">*</span> &#125;</span><br><span class="line"> <span class="operator">*/</span></span><br><span class="line"><span class="keyword">class</span> Solution &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode trainningPlan(ListNode head) &#123;</span><br><span class="line">        <span class="keyword">if</span>(head<span class="operator">==</span><span class="literal">null</span>)<span class="keyword">return</span> head;</span><br><span class="line">        ListNode pre <span class="operator">=</span> <span class="literal">null</span> ,cur <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(cur<span class="operator">!=</span><span class="literal">null</span>)&#123;</span><br><span class="line">            ListNode tmp <span class="operator">=</span> cur.next;<span class="comment">//记录下一个结点，防止丢失。</span></span><br><span class="line">            cur.next <span class="operator">=</span> pre;<span class="comment">//让头节点指向存储结点。</span></span><br><span class="line">            pre <span class="operator">=</span> cur;<span class="comment">//存储数据</span></span><br><span class="line">            cur <span class="operator">=</span> tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除节点"><a href="https://leetcode.cn/leetbook/read/illustration-of-algorithm/7fmls1/">删除节点</a></h3><blockquote><p>输入: head = [4,5,1,9], val = 5<br>输出: [4,1,9]<br>解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.</p></blockquote><p>本题思路有两种思路，一种是多走一步，一种是快慢指针。</p><p>Java代码如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多走一步</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode deleteNode(ListNode head, int <span class="keyword">val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">null</span> || head.<span class="keyword">val</span>==<span class="keyword">val</span>)<span class="keyword">return</span> head.next;</span><br><span class="line">        ListNode first = head;</span><br><span class="line">        <span class="keyword">while</span>(head.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(head.next.<span class="keyword">val</span>==<span class="keyword">val</span>)&#123;</span><br><span class="line">                head.next = head.next.next;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//快慢指针</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode deleteNode(ListNode head, int <span class="keyword">val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(head.<span class="keyword">val</span>==<span class="keyword">val</span>)<span class="keyword">return</span> head.next;</span><br><span class="line">        ListNode quick=head,slow=head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(quick!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(quick.<span class="keyword">val</span>==<span class="keyword">val</span>)&#123;</span><br><span class="line">                slow.next = quick.next;<span class="comment">//让慢结点的下一个是快结点的下一个结点，就相当于跳过了等于要删除结点的快结点。</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            slow = quick; <span class="comment">// 这个顺序是很重要的</span></span><br><span class="line">            quick = quick.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="倒序查找"><a href="https://leetcode.cn/leetbook/read/illustration-of-algorithm/7f2ng5/">倒序查找</a></h3><blockquote><p>请查找并返回倒数第 cnt 个的数据<br>输入：head = [2,4,7,8], cnt = 1<br>输出：8</p></blockquote><p>本题直接思路是循环遍历一遍得到链表长度length，用length-cnt可以得到顺序位置，再次循环得到答案。</p><p>深入思考一下可以发现当我们先走cnt,此时还未走的距离为length-cnt。这不就是我们想要的结果吗。那我们只需要在定义一个小跟班跟着这个结点走完全部路程，这个小跟班的位置不就是最后答案吗。</p><p>Java代码如下：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     <span class="type">int</span> val;</span><br><span class="line"> *     ListNode <span class="built_in">next</span>;</span><br><span class="line"> *     ListNode() &#123;&#125;</span><br><span class="line"> *     ListNode(<span class="type">int</span> val) &#123; this.val = val; &#125;</span><br><span class="line"> *     ListNode(<span class="type">int</span> val, ListNode <span class="built_in">next</span>) &#123; this.val = val; this.<span class="built_in">next</span> = <span class="built_in">next</span>; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">class Solution &#123;</span><br><span class="line">    public ListNode trainingPlan(ListNode head, <span class="type">int</span> cnt) &#123;</span><br><span class="line">        ListNode <span class="built_in">first</span> = head ,second = head;</span><br><span class="line">        for(<span class="type">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)&#123;</span><br><span class="line">            <span class="built_in">first</span> = <span class="built_in">first</span>.<span class="built_in">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">first</span>!=<span class="built_in">null</span>)&#123;</span><br><span class="line">            <span class="built_in">first</span> = <span class="built_in">first</span>.<span class="built_in">next</span>;</span><br><span class="line">            second = second.<span class="built_in">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        return second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合并有序链表"><a href="https://leetcode.cn/leetbook/read/illustration-of-algorithm/7fnm66/">合并有序链表</a></h3><blockquote><p>输入：l1 = [1,2,4], l2 = [1,3,4]<br>输出：[1,1,2,3,4,4]</p></blockquote><p>直接思路比大小，直接构造链表</p><p>java代码如下:</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//直接比大小版本</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode trainningPlan(ListNode l1, ListNode l2) &#123;</span><br><span class="line">        ListNode ans = <span class="keyword">new</span> ListNode(<span class="number">0</span>),pre = ans;</span><br><span class="line">        <span class="keyword">while</span>(l1!=<span class="literal">null</span> &amp;&amp; l2!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l1.val&lt;l2.val)&#123;</span><br><span class="line">                pre.<span class="keyword">next</span> = l1;</span><br><span class="line">                l1 = l1.<span class="keyword">next</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                pre.<span class="keyword">next</span> = l2;</span><br><span class="line">                l2 = l2.<span class="keyword">next</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pre = pre.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pre.<span class="keyword">next</span> = l1!=<span class="literal">null</span>?l1:l2;</span><br><span class="line">        <span class="keyword">return</span> ans.<span class="keyword">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递归版本</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode trainningPlan(ListNode l1, ListNode l2) &#123;</span><br><span class="line">        <span class="keyword">if</span>(l1==<span class="literal">null</span> || l2==<span class="literal">null</span>) <span class="keyword">return</span> l1==<span class="literal">null</span>?l2:l1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(l1.val&gt;=l2.val)l2.<span class="keyword">next</span> = trainningPlan(l1,l2.<span class="keyword">next</span>);</span><br><span class="line">        <span class="keyword">else</span> l1.<span class="keyword">next</span> = trainningPlan(l1.<span class="keyword">next</span>,l2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> l1.val&gt;=l2.val?l2:l1;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找相同结点"><a href="https://leetcode.cn/leetbook/read/illustration-of-algorithm/7fvoq2/">查找相同结点</a></h3><blockquote><p>输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3<br>输出：Reference of the node with value = 8<br>解释：第一个正式训练项目编号为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</p></blockquote><p>这题的思路很巧妙，当然完全可以通过两次循环去找到相同点，但是这需要额外开辟空间和多次循环。</p><p>设第一个公共节点为 <code>node</code> ，链表 <code>headA</code> 的节点数量为 <code>a</code> ，链表 <code>headB</code> 的节点数量为 <code>b</code> ，两链表的公共尾部的节点数量为 <code>c</code> ，则有：</p><ul><li>头节点 <code>headA</code> 到 <code>node</code> 前，共有 <code>a−c</code> 个节点；</li><li>头节点 <code>headB</code> 到 <code>node</code> 前，共有 <code>b−c</code> 个节点；</li></ul><p>考虑构建两个节点指针 <code>A</code>​ , <code>B</code> 分别指向两链表头节点 <code>headA</code> , <code>headB</code> ，做如下操作：</p><ul><li>指针 <code>A</code> 先遍历完链表 <code>headA</code> ，再开始遍历链表 <code>headB</code> ，当走到 <code>node </code>时，共走步数为：</li></ul><span class='p center'>$a+(b-c)$</span><ul><li>指针 <code>B</code> 先遍历完链表 <code>headB</code> ，再开始遍历链表 <code>headA</code> ，当走到 <code>node</code> 时，共走步数为：</li></ul><span class='p center'>$b+(a-c)$</span><p>如下式所示，此时指针 <code>A</code> , <code>B</code> 重合，并有两种情况：</p><span class='p center'>$a+(b−c)=b+(a−c)$</span>  <ol><li>若两链表 <u>有</u> 公共尾部 (即 c &gt; 0 ) ：指针<code>A</code> , <code>B</code> 同时指向「第一个公共节点」<code>node</code> 。</li><li>若两链表 <u>无</u> 公共尾部 (即 c = 0 ) ：指针 <code>A</code> , <code>B</code> 同时指向<br><code>null</code>。<br>因此返回<code>A</code>即可。</li></ol><p>java代码如下：</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition <span class="keyword">for</span> singly-linked list.</span><br><span class="line"> * <span class="keyword">public</span> <span class="keyword">class</span> ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode <span class="keyword">next</span>;</span><br><span class="line"> *     ListNode(int x) &#123;</span><br><span class="line"> *         val = x;</span><br><span class="line"> *         <span class="keyword">next</span> = <span class="literal">null</span>;</span><br><span class="line"> *     &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">class</span> Solution &#123;</span><br><span class="line">    ListNode getIntersectionNode(ListNode headA, ListNode headB) &#123;</span><br><span class="line">        ListNode a = headA,b = headB;</span><br><span class="line">        <span class="keyword">while</span>(a!=b)&#123;</span><br><span class="line">            a = a!=<span class="literal">null</span>?a.<span class="keyword">next</span>:headB;</span><br><span class="line">            b = b!=<span class="literal">null</span>?b.<span class="keyword">next</span>:headA;</span><br><span class="line">        &#125;</span><br><span class="line">        return a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="栈与队列">栈与队列</h1><h2 id="栈的常用操作">栈的常用操作</h2><blockquote><p>「栈 stack」是一种遵循先入后出逻辑的线性数据结构。<br>把堆叠元素的顶部称为“栈顶”，底部称为“栈底”。将把元素添加到栈顶的操作叫作“入栈”，删除栈顶元素的操作叫作“出栈”。</p></blockquote><ul><li>两个栈是可以模拟队列的。</li></ul><div class="tabs" id="初始化代码"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="初始化代码-1">Python</button><button type="button" class="tab " data-href="初始化代码-2">C++</button><button type="button" class="tab " data-href="初始化代码-3">Java</button><button type="button" class="tab " data-href="初始化代码-4">C#</button><button type="button" class="tab " data-href="初始化代码-5">JS</button></ul><div class="tab-contents"><div class="tab-item-content active" id="初始化代码-1"><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化栈</span></span><br><span class="line"><span class="comment"># Python 没有内置的栈类，可以把 list 当作栈来使用 </span></span><br><span class="line"><span class="attribute">stack</span>: list[int] =<span class="meta"> []</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 元素入栈</span></span><br><span class="line"><span class="attribute">stack</span>.append(<span class="number">1</span>)</span><br><span class="line"><span class="attribute">stack</span>.append(<span class="number">3</span>)</span><br><span class="line"><span class="attribute">stack</span>.append(<span class="number">2</span>)</span><br><span class="line"><span class="attribute">stack</span>.append(<span class="number">5</span>)</span><br><span class="line"><span class="attribute">stack</span>.append(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问栈顶元素</span></span><br><span class="line"><span class="attribute">peek</span>: int = stack[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元素出栈</span></span><br><span class="line"><span class="attribute">pop</span>: int = stack.pop()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取栈的长度</span></span><br><span class="line"><span class="attribute">size</span>: int = len(stack)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否为空</span></span><br><span class="line"><span class="attribute">is_empty</span>: bool = len(stack) == <span class="number">0</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-2"><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 初始化栈 */</span></span><br><span class="line">stack&lt;<span class="type">int</span>&gt; stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素入栈 */</span></span><br><span class="line">stack.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">stack.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line">stack.<span class="built_in">push</span>(<span class="number">2</span>);</span><br><span class="line">stack.<span class="built_in">push</span>(<span class="number">5</span>);</span><br><span class="line">stack.<span class="built_in">push</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 访问栈顶元素 */</span></span><br><span class="line"><span class="type">int</span> top = stack.<span class="built_in">top</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素出栈 */</span></span><br><span class="line">stack.<span class="built_in">pop</span>(); <span class="comment">// 无返回值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取栈的长度 */</span></span><br><span class="line"><span class="type">int</span> size = stack.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 判断是否为空 */</span></span><br><span class="line"><span class="type">bool</span> empty = stack.<span class="built_in">empty</span>();</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-3"><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 初始化栈 */</span></span><br><span class="line">Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素入栈 */</span></span><br><span class="line">stack.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">stack.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line">stack.<span class="built_in">push</span>(<span class="number">2</span>);</span><br><span class="line">stack.<span class="built_in">push</span>(<span class="number">5</span>);</span><br><span class="line">stack.<span class="built_in">push</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 访问栈顶元素 */</span></span><br><span class="line"><span class="type">int</span> peek = stack.<span class="built_in">peek</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素出栈 */</span></span><br><span class="line"><span class="type">int</span> pop = stack.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取栈的长度 */</span></span><br><span class="line"><span class="type">int</span> size = stack.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 判断是否为空 */</span></span><br><span class="line"><span class="type">boolean</span> isEmpty = stack.<span class="built_in">isEmpty</span>();</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-4"><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 初始化栈 */</span></span><br><span class="line">Stack&lt;<span class="keyword">int</span>&gt; stack = <span class="keyword">new</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素入栈 */</span></span><br><span class="line">stack.<span class="keyword">Push</span>(<span class="number">1</span>);</span><br><span class="line">stack.<span class="keyword">Push</span>(<span class="number">3</span>);</span><br><span class="line">stack.<span class="keyword">Push</span>(<span class="number">2</span>);</span><br><span class="line">stack.<span class="keyword">Push</span>(<span class="number">5</span>);</span><br><span class="line">stack.<span class="keyword">Push</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 访问栈顶元素 */</span></span><br><span class="line"><span class="keyword">int</span> peek = stack.Peek();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素出栈 */</span></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">pop</span> = stack.<span class="keyword">Pop</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取栈的长度 */</span></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">size</span> = stack.<span class="keyword">Count</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 判断是否为空 */</span></span><br><span class="line">bool isEmpty = stack.<span class="keyword">Count</span> == <span class="number">0</span>;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-5"><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 初始化栈 */</span></span><br><span class="line"><span class="comment">// JavaScript 没有内置的栈类，可以把 Array 当作栈来使用 </span></span><br><span class="line"><span class="type">const</span> stack = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素入栈 */</span></span><br><span class="line">stack.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">stack.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line">stack.<span class="built_in">push</span>(<span class="number">2</span>);</span><br><span class="line">stack.<span class="built_in">push</span>(<span class="number">5</span>);</span><br><span class="line">stack.<span class="built_in">push</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 访问栈顶元素 */</span></span><br><span class="line"><span class="type">const</span> peek = stack[stack.length<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素出栈 */</span></span><br><span class="line"><span class="type">const</span> pop = stack.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取栈的长度 */</span></span><br><span class="line"><span class="type">const</span> size = stack.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 判断是否为空 */</span></span><br><span class="line"><span class="type">const</span> is_empty = stack.length === <span class="number">0</span>;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="队列的基本操作">队列的基本操作</h2><blockquote><p>「队列 queue」是一种遵循先入先出规则的线性数据结构。<br>将队列头部称为“队首”，尾部称为“队尾”，将把元素加入队尾的操作称为“入队”，删除队首元素的操作称为“出队”。</p></blockquote><div class="tabs" id="初始化代码"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="初始化代码-1">Python</button><button type="button" class="tab " data-href="初始化代码-2">C++</button><button type="button" class="tab " data-href="初始化代码-3">Java</button><button type="button" class="tab " data-href="初始化代码-4">C#</button><button type="button" class="tab " data-href="初始化代码-5">JS</button></ul><div class="tab-contents"><div class="tab-item-content active" id="初始化代码-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化队列</span></span><br><span class="line"><span class="comment"># 在 Python 中，我们一般将双向队列类 deque 当作队列使用</span></span><br><span class="line"><span class="comment"># 虽然 queue.Queue() 是纯正的队列类，但不太好用，因此不推荐</span></span><br><span class="line">que: deque[<span class="built_in">int</span>] = deque()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元素入队</span></span><br><span class="line">que.append(<span class="number">1</span>)</span><br><span class="line">que.append(<span class="number">3</span>)</span><br><span class="line">que.append(<span class="number">2</span>)</span><br><span class="line">que.append(<span class="number">5</span>)</span><br><span class="line">que.append(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问队首元素</span></span><br><span class="line">front: <span class="built_in">int</span> = que[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元素出队</span></span><br><span class="line">pop: <span class="built_in">int</span> = que.popleft()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取队列的长度</span></span><br><span class="line">size: <span class="built_in">int</span> = <span class="built_in">len</span>(que)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断队列是否为空</span></span><br><span class="line">is_empty: <span class="built_in">bool</span> = <span class="built_in">len</span>(que) == <span class="number">0</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-2"><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 初始化队列 */</span></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; queue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素入队 */</span></span><br><span class="line">queue.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">queue.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line">queue.<span class="built_in">push</span>(<span class="number">2</span>);</span><br><span class="line">queue.<span class="built_in">push</span>(<span class="number">5</span>);</span><br><span class="line">queue.<span class="built_in">push</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 访问队首元素 */</span></span><br><span class="line"><span class="type">int</span> front = queue.<span class="built_in">front</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素出队 */</span></span><br><span class="line">queue.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取队列的长度 */</span></span><br><span class="line"><span class="type">int</span> size = queue.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 判断队列是否为空 */</span></span><br><span class="line"><span class="type">bool</span> empty = queue.<span class="built_in">empty</span>();</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-3"><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 初始化队列 */</span></span><br><span class="line">Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素入队 */</span></span><br><span class="line">queue.<span class="built_in">offer</span>(<span class="number">1</span>);</span><br><span class="line">queue.<span class="built_in">offer</span>(<span class="number">3</span>);</span><br><span class="line">queue.<span class="built_in">offer</span>(<span class="number">2</span>);</span><br><span class="line">queue.<span class="built_in">offer</span>(<span class="number">5</span>);</span><br><span class="line">queue.<span class="built_in">offer</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 访问队首元素 */</span></span><br><span class="line"><span class="type">int</span> peek = queue.<span class="built_in">peek</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素出队 */</span></span><br><span class="line"><span class="type">int</span> pop = queue.<span class="built_in">poll</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取队列的长度 */</span></span><br><span class="line"><span class="type">int</span> size = queue.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 判断队列是否为空 */</span></span><br><span class="line"><span class="type">boolean</span> isEmpty = queue.<span class="built_in">isEmpty</span>();</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-4"><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 初始化队列 */</span></span><br><span class="line">Queue&lt;<span class="type">int</span>&gt; queue = <span class="built_in">new</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素入队 */</span></span><br><span class="line">queue.<span class="built_in">Enqueue</span>(<span class="number">1</span>);</span><br><span class="line">queue.<span class="built_in">Enqueue</span>(<span class="number">3</span>);</span><br><span class="line">queue.<span class="built_in">Enqueue</span>(<span class="number">2</span>);</span><br><span class="line">queue.<span class="built_in">Enqueue</span>(<span class="number">5</span>);</span><br><span class="line">queue.<span class="built_in">Enqueue</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 访问队首元素 */</span></span><br><span class="line"><span class="type">int</span> peek = queue.<span class="built_in">Peek</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素出队 */</span></span><br><span class="line"><span class="type">int</span> pop = queue.<span class="built_in">Dequeue</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取队列的长度 */</span></span><br><span class="line"><span class="type">int</span> size = queue.Count;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 判断队列是否为空 */</span></span><br><span class="line"><span class="type">bool</span> isEmpty = queue.Count == <span class="number">0</span>;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-5"><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 初始化队列 */</span></span><br><span class="line"><span class="comment">// JavaScript 没有内置的队列，可以把 Array 当作队列来使用</span></span><br><span class="line"><span class="type">const</span> queue = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素入队 */</span></span><br><span class="line">queue.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">queue.<span class="built_in">push</span>(<span class="number">3</span>);</span><br><span class="line">queue.<span class="built_in">push</span>(<span class="number">2</span>);</span><br><span class="line">queue.<span class="built_in">push</span>(<span class="number">5</span>);</span><br><span class="line">queue.<span class="built_in">push</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 访问队首元素 */</span></span><br><span class="line"><span class="type">const</span> peek = queue[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素出队 */</span></span><br><span class="line"><span class="comment">// 底层是数组，因此 shift() 方法的时间复杂度为 O(n)</span></span><br><span class="line"><span class="type">const</span> pop = queue.<span class="built_in">shift</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取队列的长度 */</span></span><br><span class="line"><span class="type">const</span> size = queue.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 判断队列是否为空 */</span></span><br><span class="line"><span class="type">const</span> empty = queue.length === <span class="number">0</span>;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="双向队列">双向队列</h3><div class="tabs" id="初始化代码"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="初始化代码-1">Python</button><button type="button" class="tab " data-href="初始化代码-2">C++</button><button type="button" class="tab " data-href="初始化代码-3">Java</button><button type="button" class="tab " data-href="初始化代码-4">C#</button><button type="button" class="tab " data-href="初始化代码-5">JS</button></ul><div class="tab-contents"><div class="tab-item-content active" id="初始化代码-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化双向队列</span></span><br><span class="line">deque: deque[<span class="built_in">int</span>] = deque()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元素入队</span></span><br><span class="line">deque.append(<span class="number">2</span>)      <span class="comment"># 添加至队尾</span></span><br><span class="line">deque.append(<span class="number">5</span>)</span><br><span class="line">deque.append(<span class="number">4</span>)</span><br><span class="line">deque.appendleft(<span class="number">3</span>)  <span class="comment"># 添加至队首</span></span><br><span class="line">deque.appendleft(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问元素</span></span><br><span class="line">front: <span class="built_in">int</span> = deque[<span class="number">0</span>]  <span class="comment"># 队首元素</span></span><br><span class="line">rear: <span class="built_in">int</span> = deque[-<span class="number">1</span>]  <span class="comment"># 队尾元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 元素出队</span></span><br><span class="line">pop_front: <span class="built_in">int</span> = deque.popleft()  <span class="comment"># 队首元素出队</span></span><br><span class="line">pop_rear: <span class="built_in">int</span> = deque.pop()       <span class="comment"># 队尾元素出队</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取双向队列的长度</span></span><br><span class="line">size: <span class="built_in">int</span> = <span class="built_in">len</span>(deque)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断双向队列是否为空</span></span><br><span class="line">is_empty: <span class="built_in">bool</span> = <span class="built_in">len</span>(deque) == <span class="number">0</span></span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-2"><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 初始化双向队列 */</span></span><br><span class="line">deque&lt;<span class="type">int</span>&gt; deque;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素入队 */</span></span><br><span class="line">deque.<span class="built_in">push_back</span>(<span class="number">2</span>);   <span class="comment">// 添加至队尾</span></span><br><span class="line">deque.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line">deque.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">deque.<span class="built_in">push_front</span>(<span class="number">3</span>);  <span class="comment">// 添加至队首</span></span><br><span class="line">deque.<span class="built_in">push_front</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 访问元素 */</span></span><br><span class="line"><span class="type">int</span> front = deque.<span class="built_in">front</span>(); <span class="comment">// 队首元素</span></span><br><span class="line"><span class="type">int</span> back = deque.<span class="built_in">back</span>();   <span class="comment">// 队尾元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素出队 */</span></span><br><span class="line">deque.<span class="built_in">pop_front</span>();  <span class="comment">// 队首元素出队</span></span><br><span class="line">deque.<span class="built_in">pop_back</span>();   <span class="comment">// 队尾元素出队</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取双向队列的长度 */</span></span><br><span class="line"><span class="type">int</span> size = deque.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 判断双向队列是否为空 */</span></span><br><span class="line"><span class="type">bool</span> empty = deque.<span class="built_in">empty</span>();</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-3"><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 初始化双向队列 */</span></span><br><span class="line">Deque&lt;Integer&gt; deque = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素入队 */</span></span><br><span class="line">deque.<span class="built_in">offerLast</span>(<span class="number">2</span>);   <span class="comment">// 添加至队尾</span></span><br><span class="line">deque.<span class="built_in">offerLast</span>(<span class="number">5</span>);</span><br><span class="line">deque.<span class="built_in">offerLast</span>(<span class="number">4</span>);</span><br><span class="line">deque.<span class="built_in">offerFirst</span>(<span class="number">3</span>);  <span class="comment">// 添加至队首</span></span><br><span class="line">deque.<span class="built_in">offerFirst</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 访问元素 */</span></span><br><span class="line"><span class="type">int</span> peekFirst = deque.<span class="built_in">peekFirst</span>();  <span class="comment">// 队首元素</span></span><br><span class="line"><span class="type">int</span> peekLast = deque.<span class="built_in">peekLast</span>();    <span class="comment">// 队尾元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素出队 */</span></span><br><span class="line"><span class="type">int</span> popFirst = deque.<span class="built_in">pollFirst</span>();  <span class="comment">// 队首元素出队</span></span><br><span class="line"><span class="type">int</span> popLast = deque.<span class="built_in">pollLast</span>();    <span class="comment">// 队尾元素出队</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取双向队列的长度 */</span></span><br><span class="line"><span class="type">int</span> size = deque.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 判断双向队列是否为空 */</span></span><br><span class="line"><span class="type">boolean</span> isEmpty = deque.<span class="built_in">isEmpty</span>();</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-4"><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 初始化双向队列 */</span></span><br><span class="line"><span class="comment">// 在 C# 中，将链表 LinkedList 看作双向队列来使用</span></span><br><span class="line">LinkedList&lt;<span class="type">int</span>&gt; deque = <span class="built_in">new</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素入队 */</span></span><br><span class="line">deque.<span class="built_in">AddLast</span>(<span class="number">2</span>);   <span class="comment">// 添加至队尾</span></span><br><span class="line">deque.<span class="built_in">AddLast</span>(<span class="number">5</span>);</span><br><span class="line">deque.<span class="built_in">AddLast</span>(<span class="number">4</span>);</span><br><span class="line">deque.<span class="built_in">AddFirst</span>(<span class="number">3</span>);  <span class="comment">// 添加至队首</span></span><br><span class="line">deque.<span class="built_in">AddFirst</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 访问元素 */</span></span><br><span class="line"><span class="type">int</span> peekFirst = deque.First.Value;  <span class="comment">// 队首元素</span></span><br><span class="line"><span class="type">int</span> peekLast = deque.Last.Value;    <span class="comment">// 队尾元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素出队 */</span></span><br><span class="line">deque.<span class="built_in">RemoveFirst</span>();  <span class="comment">// 队首元素出队</span></span><br><span class="line">deque.<span class="built_in">RemoveLast</span>();   <span class="comment">// 队尾元素出队</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取双向队列的长度 */</span></span><br><span class="line"><span class="type">int</span> size = deque.Count;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 判断双向队列是否为空 */</span></span><br><span class="line"><span class="type">bool</span> isEmpty = deque.Count == <span class="number">0</span>;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-5"><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 初始化双向队列 */</span></span><br><span class="line"><span class="comment">// JavaScript 没有内置的双端队列，只能把 Array 当作双端队列来使用</span></span><br><span class="line"><span class="type">const</span> deque = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素入队 */</span></span><br><span class="line">deque.<span class="built_in">push</span>(<span class="number">2</span>);</span><br><span class="line">deque.<span class="built_in">push</span>(<span class="number">5</span>);</span><br><span class="line">deque.<span class="built_in">push</span>(<span class="number">4</span>);</span><br><span class="line"><span class="comment">// 请注意，由于是数组，unshift() 方法的时间复杂度为 O(n)</span></span><br><span class="line">deque.<span class="built_in">unshift</span>(<span class="number">3</span>);</span><br><span class="line">deque.<span class="built_in">unshift</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 访问元素 */</span></span><br><span class="line"><span class="type">const</span> peekFirst = deque[<span class="number">0</span>];</span><br><span class="line"><span class="type">const</span> peekLast = deque[deque.length - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素出队 */</span></span><br><span class="line"><span class="comment">// 请注意，由于是数组，shift() 方法的时间复杂度为 O(n)</span></span><br><span class="line"><span class="type">const</span> popFront = deque.<span class="built_in">shift</span>();</span><br><span class="line"><span class="type">const</span> popBack = deque.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取双向队列的长度 */</span></span><br><span class="line"><span class="type">const</span> size = deque.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 判断双向队列是否为空 */</span></span><br><span class="line"><span class="type">const</span> isEmpty = size === <span class="number">0</span>;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="算法锻炼">算法锻炼</h2><h3 id="最小栈"><a href="https://leetcode.cn/leetbook/read/illustration-of-algorithm/7f65om/">最小栈</a></h3><blockquote><p>请你设计一个 最小栈 。它提供 <code>push</code> ，<code>pop</code> ，<code>top</code> 操作，并能在{ % u 常数时间 %} 内检索到最小元素的栈。</p></blockquote><blockquote><p>输入：<br>[“MinStack”,“push”,“push”,“push”,“getMin”,“pop”,“top”,“getMin”]<br>[[],[-2],[2],[-3],[],[],[],[]]</p></blockquote><blockquote><p>输出：<br>[null,null,null,null,-3,null,2,-2]</p></blockquote><blockquote><p>解释：<br>MinStack minStack = new MinStack();<br>minStack.push(-2);<br>minStack.push(2);<br>minStack.push(-3);<br>minStack.getMin();   --&gt; 返回 -3.<br>minStack.pop();<br>minStack.top();      --&gt; 返回 2.<br>minStack.getMin();   --&gt; 返回 -2.</p></blockquote><p>本题很明显是要使用栈来实现，但是难点在于如何在常数时间内获取堆栈中的最小元素。<br>试想一下：当我们设定一个<code>min</code>去记录每次压栈元素的最小值，貌似这种方法是可行的。但是一旦出栈元素等于我们的<code>min</code>时，我们便会失去最小值。也就是说我们需要多次记录最小值，也就是拥有可以回退的功能。<br>那好，现在定义两个栈<code>A,B</code>。一个用来正常记录数据，一个用来记录最小值。<br><code>A</code> 中压入 <code>-2</code>，此时<code>B</code>为空，我们也将其压入，<code>B</code>也有元素<code>-2</code><br>接着<code>A</code>压入<code>2</code>，<code>2</code>大于<code>B</code>中的栈顶元素<code>-2</code>，不压入。<br>那么<code>A: -2 2</code>  <code> B : -2</code>(右侧为栈顶)。<br>现在压入<code>-3</code>，<code>-3</code>小于<code>B</code>栈顶元素，压栈。<br>那么<code>A: -2 2 -3</code>  <code>  B : -2 -3</code>(右侧为栈顶)。<br>输出最小值，不就是<code>B</code>的栈顶元素吗，如若我们弹出<code>-3</code>，因为<code>-3</code>与<code>B</code>栈顶元素相同，所以<code>B</code>也要弹出栈顶元素。那么此时最小值就是<code>-2</code>。如此类推，便完成此题。</p><p>java代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">MinStack</span> &#123;</span><br><span class="line">    Stack&lt;Integer&gt; A,B;</span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span>()</span> &#123;</span><br><span class="line">        A = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">        B = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span>(<span class="params"><span class="built_in">int</span> x</span>)</span> &#123;</span><br><span class="line">        A.push(x);</span><br><span class="line">        <span class="keyword">if</span>(B.isEmpty())B.push(x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(B.peek()&gt;=x)B.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(A.pop().<span class="keyword">equals</span>(B.peek())&amp;&amp;!B.isEmpty())B.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">top</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> A.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">getMin</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> B.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/leetbook/read/illustration-of-algorithm/7fg4x5/">类似题</a></p><h3 id="数据流中的中位数"><a href="https://leetcode.cn/leetbook/read/illustration-of-algorithm/7fzkf6/">数据流中的中位数</a></h3><blockquote><p>输入：<br>[“MedianFinder”,“addNum”,“addNum”,“findMedian”,“addNum”,“findMedian”]<br>[[],[1],[2],[],[3],[]]<br>输出：[null,null,null,1.50000,null,2.00000]</p></blockquote><ul><li>知识点：<code>Java</code>中优先队列用<code>PriorityQueue</code>表示，底层用堆（heap）实现，在优先队列中，任何时刻队首元素都是当前队列中优先级最高（小根堆，默认）或最低（大根堆）的元素。每次出队或入队后，会自动调整结构，始终保证队首元素优先级最高。入队、出队优先级均为 $log_2n$。<br>优先队列代码：</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Test &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        // 默认小根堆</span><br><span class="line">        PriorityQueue&lt;<span class="type">Integer</span>&gt; pq1 = <span class="built_in">new</span> PriorityQueue&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            pq1.<span class="keyword">add</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.print(pq1.poll() + &quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println();</span><br><span class="line">        // 大根堆实现</span><br><span class="line">        PriorityQueue&lt;<span class="type">Integer</span>&gt; pq2 = <span class="built_in">new</span> PriorityQueue&lt;<span class="type">Integer</span>&gt;((x,y)-&gt;y-x);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            pq2.<span class="keyword">add</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.print(pq2.poll() + &quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解题思路： 本题关键在于如何将数据有序化。通过优先队列即可完成。<br>我们将一组数据按照大小堆的形式存放。 A中存放大数，B中存放小数。但是我们只能保证一侧有序化，如何确保插入元素在全局上有序呢。</p><blockquote><p>假设插入数字 <code>num</code> 遇到情况 <code>1</code>. 。由于 <code>num</code> 可能属于 “较小的一半” （即属于 <code>B</code> ），因此不能将 <code>nums</code> 直接插入至 <code>A</code> 。而应先将 <code>num</code> 插入至 <code>B</code> ，再将<code>B</code> 堆顶元素插入至 <code>A</code> 。这样就可以始终保<code>A </code>保存较大一半、 <code>B</code> 保存较小一半。(优先队列会自动完成有序化)</p></blockquote><p>java代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">MedianFinder</span> &#123;</span><br><span class="line">    Queue&lt;Integer&gt;A,B;</span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MedianFinder</span>()</span> &#123;</span><br><span class="line">        A = <span class="keyword">new</span> PriorityQueue&lt;&gt;();<span class="comment">//小顶堆</span></span><br><span class="line">        B = <span class="keyword">new</span> PriorityQueue&lt;&gt;((x,y)-&gt;(y-x));<span class="comment">//大顶堆</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNum</span>(<span class="params"><span class="built_in">int</span> num</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(A.size()!=B.size())&#123;</span><br><span class="line">            A.<span class="keyword">add</span>(num);</span><br><span class="line">            B.<span class="keyword">add</span>(A.poll());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            B.<span class="keyword">add</span>(num);</span><br><span class="line">            A.<span class="keyword">add</span>(B.poll());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">findMedian</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> A.size() != B.size()?A.peek():(A.peek()+B.peek())/<span class="number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="哈希表">哈希表</h1><p>「哈希表 hash table」，又称「散列表」，它通过建立键 key 与值 value 之间的映射，实现高效的元素查询。具体而言，我们向哈希表中输入一个键 key ，则可以在 $O(1)$时间内获取对应的值 value 。</p><p><em><strong>通常情况下哈希函数的输入空间远大于输出空间</strong></em>，因此理论上哈希冲突是不可避免的。比如，输入空间为全体整数，输出空间为数组容量大小，则必然有多个整数映射至同一桶索引。</p><p>哈希冲突会导致查询结果错误，严重影响哈希表的可用性。为了解决该问题，每当遇到哈希冲突时，我们就进行哈希表扩容，直至冲突消失为止。此方法简单粗暴且有效，但效率太低，因为哈希表扩容需要进行大量的数据搬运与哈希值计算。为了提升效率，我们可以采用以下策略。</p><ol><li>改良哈希表数据结构，使得哈希表可以在出现哈希冲突时正常工作。</li><li>仅在必要时，即当哈希冲突比较严重时，才执行扩容操作。</li></ol><p>哈希表的结构改良方法主要包括“ <em><strong>链式地址</strong></em> ”和“ <em><strong>开放寻址</strong></em> ”。</p><h2 id="链式地址">链式地址</h2><p>基于链式地址实现的哈希表的操作方法发生了以下变化。</p><ul><li>查询元素：输入 key ，经过哈希函数得到桶索引，即可访问链表头节点，然后遍历链表并对比 key 以查找目标键值对。</li><li>添加元素：首先通过哈希函数访问链表头节点，然后将节点（键值对）添加到链表中。</li><li>删除元素：根据哈希函数的结果访问链表头部，接着遍历链表以查找目标节点并将其删除。</li></ul><p>链式地址存在以下局限性。</p><ul><li>占用空间增大：链表包含节点指针，它相比数组更加耗费内存空间。</li><li>查询效率降低：因为需要线性遍历链表来查找对应元素。</li></ul><div class="tabs" id="初始化代码"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="初始化代码-1">Python</button><button type="button" class="tab " data-href="初始化代码-2">C++</button><button type="button" class="tab " data-href="初始化代码-3">Java</button><button type="button" class="tab " data-href="初始化代码-4">C#</button><button type="button" class="tab " data-href="初始化代码-5">JS</button></ul><div class="tab-contents"><div class="tab-item-content active" id="初始化代码-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HashMapChaining</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;链式地址哈希表&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;构造方法&quot;&quot;&quot;</span></span><br><span class="line">        self.size = <span class="number">0</span>  <span class="comment"># 键值对数量</span></span><br><span class="line">        self.capacity = <span class="number">4</span>  <span class="comment"># 哈希表容量</span></span><br><span class="line">        self.load_thres = <span class="number">2.0</span> / <span class="number">3.0</span>  <span class="comment"># 触发扩容的负载因子阈值</span></span><br><span class="line">        self.extend_ratio = <span class="number">2</span>  <span class="comment"># 扩容倍数</span></span><br><span class="line">        self.buckets = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(self.capacity)]  <span class="comment"># 桶数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hash_func</span>(<span class="params">self, key: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;哈希函数&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> key % self.capacity</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_factor</span>(<span class="params">self</span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;负载因子&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.size / self.capacity</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, key: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span> | <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;查询操作&quot;&quot;&quot;</span></span><br><span class="line">        index = self.hash_func(key)</span><br><span class="line">        bucket = self.buckets[index]</span><br><span class="line">        <span class="comment"># 遍历桶，若找到 key ，则返回对应 val</span></span><br><span class="line">        <span class="keyword">for</span> pair <span class="keyword">in</span> bucket:</span><br><span class="line">            <span class="keyword">if</span> pair.key == key:</span><br><span class="line">                <span class="keyword">return</span> pair.val</span><br><span class="line">        <span class="comment"># 若未找到 key ，则返回 None</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, key: <span class="built_in">int</span>, val: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;添加操作&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 当负载因子超过阈值时，执行扩容</span></span><br><span class="line">        <span class="keyword">if</span> self.load_factor() &gt; self.load_thres:</span><br><span class="line">            self.extend()</span><br><span class="line">        index = self.hash_func(key)</span><br><span class="line">        bucket = self.buckets[index]</span><br><span class="line">        <span class="comment"># 遍历桶，若遇到指定 key ，则更新对应 val 并返回</span></span><br><span class="line">        <span class="keyword">for</span> pair <span class="keyword">in</span> bucket:</span><br><span class="line">            <span class="keyword">if</span> pair.key == key:</span><br><span class="line">                pair.val = val</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 若无该 key ，则将键值对添加至尾部</span></span><br><span class="line">        pair = Pair(key, val)</span><br><span class="line">        bucket.append(pair)</span><br><span class="line">        self.size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self, key: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除操作&quot;&quot;&quot;</span></span><br><span class="line">        index = self.hash_func(key)</span><br><span class="line">        bucket = self.buckets[index]</span><br><span class="line">        <span class="comment"># 遍历桶，从中删除键值对</span></span><br><span class="line">        <span class="keyword">for</span> pair <span class="keyword">in</span> bucket:</span><br><span class="line">            <span class="keyword">if</span> pair.key == key:</span><br><span class="line">                bucket.remove(pair)</span><br><span class="line">                self.size -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extend</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;扩容哈希表&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 暂存原哈希表</span></span><br><span class="line">        buckets = self.buckets</span><br><span class="line">        <span class="comment"># 初始化扩容后的新哈希表</span></span><br><span class="line">        self.capacity *= self.extend_ratio</span><br><span class="line">        self.buckets = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(self.capacity)]</span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 将键值对从原哈希表搬运至新哈希表</span></span><br><span class="line">        <span class="keyword">for</span> bucket <span class="keyword">in</span> buckets:</span><br><span class="line">            <span class="keyword">for</span> pair <span class="keyword">in</span> bucket:</span><br><span class="line">                self.put(pair.key, pair.val)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印哈希表&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> bucket <span class="keyword">in</span> self.buckets:</span><br><span class="line">            res = []</span><br><span class="line">            <span class="keyword">for</span> pair <span class="keyword">in</span> bucket:</span><br><span class="line">                res.append(<span class="built_in">str</span>(pair.key) + <span class="string">&quot; -&gt; &quot;</span> + pair.val)</span><br><span class="line">            <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-2"><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 链式地址哈希表 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HashMapChaining</span> &#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> size;                       <span class="comment">// 键值对数量</span></span><br><span class="line">    <span class="type">int</span> capacity;                   <span class="comment">// 哈希表容量</span></span><br><span class="line">    <span class="type">double</span> loadThres;               <span class="comment">// 触发扩容的负载因子阈值</span></span><br><span class="line">    <span class="type">int</span> extendRatio;                <span class="comment">// 扩容倍数</span></span><br><span class="line">    vector&lt;vector&lt;Pair *&gt;&gt; buckets; <span class="comment">// 桶数组</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/* 构造方法 */</span></span><br><span class="line">    <span class="built_in">HashMapChaining</span>() : <span class="built_in">size</span>(<span class="number">0</span>), <span class="built_in">capacity</span>(<span class="number">4</span>), <span class="built_in">loadThres</span>(<span class="number">2.0</span> / <span class="number">3.0</span>), <span class="built_in">extendRatio</span>(<span class="number">2</span>) &#123;</span><br><span class="line">        buckets.<span class="built_in">resize</span>(capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 析构方法 */</span></span><br><span class="line">    ~<span class="built_in">HashMapChaining</span>() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;bucket : buckets) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Pair *pair : bucket) &#123;</span><br><span class="line">                <span class="comment">// 释放内存</span></span><br><span class="line">                <span class="keyword">delete</span> pair;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 哈希函数 */</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hashFunc</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key % capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 负载因子 */</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">loadFactor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">double</span>)size / (<span class="type">double</span>)capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 查询操作 */</span></span><br><span class="line">    <span class="function">string <span class="title">get</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">hashFunc</span>(key);</span><br><span class="line">        <span class="comment">// 遍历桶，若找到 key ，则返回对应 val</span></span><br><span class="line">        <span class="keyword">for</span> (Pair *pair : buckets[index]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pair-&gt;key == key) &#123;</span><br><span class="line">                <span class="keyword">return</span> pair-&gt;val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若未找到 key ，则返回空字符串</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 添加操作 */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> key, string val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当负载因子超过阈值时，执行扩容</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">loadFactor</span>() &gt; loadThres) &#123;</span><br><span class="line">            <span class="built_in">extend</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">hashFunc</span>(key);</span><br><span class="line">        <span class="comment">// 遍历桶，若遇到指定 key ，则更新对应 val 并返回</span></span><br><span class="line">        <span class="keyword">for</span> (Pair *pair : buckets[index]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pair-&gt;key == key) &#123;</span><br><span class="line">                pair-&gt;val = val;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若无该 key ，则将键值对添加至尾部</span></span><br><span class="line">        buckets[index].<span class="built_in">push_back</span>(<span class="keyword">new</span> <span class="built_in">Pair</span>(key, val));</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 删除操作 */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">hashFunc</span>(key);</span><br><span class="line">        <span class="keyword">auto</span> &amp;bucket = buckets[index];</span><br><span class="line">        <span class="comment">// 遍历桶，从中删除键值对</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; bucket.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bucket[i]-&gt;key == key) &#123;</span><br><span class="line">                Pair *tmp = bucket[i];</span><br><span class="line">                bucket.<span class="built_in">erase</span>(bucket.<span class="built_in">begin</span>() + i); <span class="comment">// 从中删除键值对</span></span><br><span class="line">                <span class="keyword">delete</span> tmp;                       <span class="comment">// 释放内存</span></span><br><span class="line">                size--;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 扩容哈希表 */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">extend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 暂存原哈希表</span></span><br><span class="line">        vector&lt;vector&lt;Pair *&gt;&gt; bucketsTmp = buckets;</span><br><span class="line">        <span class="comment">// 初始化扩容后的新哈希表</span></span><br><span class="line">        capacity *= extendRatio;</span><br><span class="line">        buckets.<span class="built_in">clear</span>();</span><br><span class="line">        buckets.<span class="built_in">resize</span>(capacity);</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 将键值对从原哈希表搬运至新哈希表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;bucket : bucketsTmp) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Pair *pair : bucket) &#123;</span><br><span class="line">                <span class="built_in">put</span>(pair-&gt;key, pair-&gt;val);</span><br><span class="line">                <span class="comment">// 释放内存</span></span><br><span class="line">                <span class="keyword">delete</span> pair;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打印哈希表 */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;bucket : buckets) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;[&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (Pair *pair : bucket) &#123;</span><br><span class="line">                cout &lt;&lt; pair-&gt;key &lt;&lt; <span class="string">&quot; -&gt; &quot;</span> &lt;&lt; pair-&gt;val &lt;&lt; <span class="string">&quot;, &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;]\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-3"><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 链式地址哈希表 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HashMapChaining</span> &#123;</span><br><span class="line">    <span class="type">int</span> size; <span class="comment">// 键值对数量</span></span><br><span class="line">    <span class="type">int</span> capacity; <span class="comment">// 哈希表容量</span></span><br><span class="line">    <span class="type">double</span> loadThres; <span class="comment">// 触发扩容的负载因子阈值</span></span><br><span class="line">    <span class="type">int</span> extendRatio; <span class="comment">// 扩容倍数</span></span><br><span class="line">    List&lt;List&lt;Pair&gt;&gt; buckets; <span class="comment">// 桶数组</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 构造方法 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMapChaining</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        capacity = <span class="number">4</span>;</span><br><span class="line">        loadThres = <span class="number">2.0</span> / <span class="number">3.0</span>;</span><br><span class="line">        extendRatio = <span class="number">2</span>;</span><br><span class="line">        buckets = <span class="keyword">new</span> ArrayList&lt;&gt;(capacity);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; capacity; i++) &#123;</span><br><span class="line">            buckets.<span class="built_in">add</span>(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 哈希函数 */</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hashFunc</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key % capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 负载因子 */</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">loadFactor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">double</span>) size / capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 查询操作 */</span></span><br><span class="line">    <span class="function"><span class="type">String</span> <span class="title">get</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">hashFunc</span>(key);</span><br><span class="line">        List&lt;Pair&gt; bucket = buckets.<span class="built_in">get</span>(index);</span><br><span class="line">        <span class="comment">// 遍历桶，若找到 key ，则返回对应 val</span></span><br><span class="line">        <span class="keyword">for</span> (Pair pair : bucket) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pair.key == key) &#123;</span><br><span class="line">                <span class="keyword">return</span> pair.val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若未找到 key ，则返回 null</span></span><br><span class="line">        <span class="keyword">return</span> null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 添加操作 */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> key, <span class="type">String</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当负载因子超过阈值时，执行扩容</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">loadFactor</span>() &gt; loadThres) &#123;</span><br><span class="line">            <span class="built_in">extend</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">hashFunc</span>(key);</span><br><span class="line">        List&lt;Pair&gt; bucket = buckets.<span class="built_in">get</span>(index);</span><br><span class="line">        <span class="comment">// 遍历桶，若遇到指定 key ，则更新对应 val 并返回</span></span><br><span class="line">        <span class="keyword">for</span> (Pair pair : bucket) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pair.key == key) &#123;</span><br><span class="line">                pair.val = val;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若无该 key ，则将键值对添加至尾部</span></span><br><span class="line">        Pair pair = <span class="keyword">new</span> <span class="built_in">Pair</span>(key, val);</span><br><span class="line">        bucket.<span class="built_in">add</span>(pair);</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 删除操作 */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">hashFunc</span>(key);</span><br><span class="line">        List&lt;Pair&gt; bucket = buckets.<span class="built_in">get</span>(index);</span><br><span class="line">        <span class="comment">// 遍历桶，从中删除键值对</span></span><br><span class="line">        <span class="keyword">for</span> (Pair pair : bucket) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pair.key == key) &#123;</span><br><span class="line">                bucket.<span class="built_in">remove</span>(pair);</span><br><span class="line">                size--;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 扩容哈希表 */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">extend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 暂存原哈希表</span></span><br><span class="line">        List&lt;List&lt;Pair&gt;&gt; bucketsTmp = buckets;</span><br><span class="line">        <span class="comment">// 初始化扩容后的新哈希表</span></span><br><span class="line">        capacity *= extendRatio;</span><br><span class="line">        buckets = <span class="keyword">new</span> ArrayList&lt;&gt;(capacity);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; capacity; i++) &#123;</span><br><span class="line">            buckets.<span class="built_in">add</span>(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 将键值对从原哈希表搬运至新哈希表</span></span><br><span class="line">        <span class="keyword">for</span> (List&lt;Pair&gt; bucket : bucketsTmp) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Pair pair : bucket) &#123;</span><br><span class="line">                <span class="built_in">put</span>(pair.key, pair.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打印哈希表 */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (List&lt;Pair&gt; bucket : buckets) &#123;</span><br><span class="line">            List&lt;<span class="type">String</span>&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (Pair pair : bucket) &#123;</span><br><span class="line">                res.<span class="built_in">add</span>(pair.key + <span class="string">&quot; -&gt; &quot;</span> + pair.val);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.<span class="built_in">println</span>(res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-4"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 链式地址哈希表 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">HashMapChaining</span> &#123;</span><br><span class="line">    <span class="built_in">int</span> size; <span class="comment">// 键值对数量</span></span><br><span class="line">    <span class="built_in">int</span> capacity; <span class="comment">// 哈希表容量</span></span><br><span class="line">    <span class="built_in">double</span> loadThres; <span class="comment">// 触发扩容的负载因子阈值</span></span><br><span class="line">    <span class="built_in">int</span> extendRatio; <span class="comment">// 扩容倍数</span></span><br><span class="line">    List&lt;List&lt;Pair&gt;&gt; buckets; <span class="comment">// 桶数组</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 构造方法 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMapChaining</span>()</span> &#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        capacity = <span class="number">4</span>;</span><br><span class="line">        loadThres = <span class="number">2.0</span> / <span class="number">3.0</span>;</span><br><span class="line">        extendRatio = <span class="number">2</span>;</span><br><span class="line">        buckets = <span class="keyword">new</span> List&lt;List&lt;Pair&gt;&gt;(capacity);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; capacity; i++) &#123;</span><br><span class="line">            buckets.Add([]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 哈希函数 */</span></span><br><span class="line">    <span class="function"><span class="built_in">int</span> <span class="title">HashFunc</span>(<span class="params"><span class="built_in">int</span> key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key % capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 负载因子 */</span></span><br><span class="line">    <span class="function"><span class="built_in">double</span> <span class="title">LoadFactor</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">double</span>)size / capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 查询操作 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span>? Get(<span class="built_in">int</span> key) &#123;</span><br><span class="line">        <span class="built_in">int</span> index = HashFunc(key);</span><br><span class="line">        <span class="comment">// 遍历桶，若找到 key ，则返回对应 val</span></span><br><span class="line">        <span class="keyword">foreach</span> (Pair pair <span class="keyword">in</span> buckets[index]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pair.key == key) &#123;</span><br><span class="line">                <span class="keyword">return</span> pair.val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若未找到 key ，则返回 null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 添加操作 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Put</span>(<span class="params"><span class="built_in">int</span> key, <span class="built_in">string</span> val</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 当负载因子超过阈值时，执行扩容</span></span><br><span class="line">        <span class="keyword">if</span> (LoadFactor() &gt; loadThres) &#123;</span><br><span class="line">            Extend();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> index = HashFunc(key);</span><br><span class="line">        <span class="comment">// 遍历桶，若遇到指定 key ，则更新对应 val 并返回</span></span><br><span class="line">        <span class="keyword">foreach</span> (Pair pair <span class="keyword">in</span> buckets[index]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pair.key == key) &#123;</span><br><span class="line">                pair.val = val;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若无该 key ，则将键值对添加至尾部</span></span><br><span class="line">        buckets[index].Add(<span class="keyword">new</span> Pair(key, val));</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 删除操作 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params"><span class="built_in">int</span> key</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span> index = HashFunc(key);</span><br><span class="line">        <span class="comment">// 遍历桶，从中删除键值对</span></span><br><span class="line">        <span class="keyword">foreach</span> (Pair pair <span class="keyword">in</span> buckets[index].ToList()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pair.key == key) &#123;</span><br><span class="line">                buckets[index].Remove(pair);</span><br><span class="line">                size--;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 扩容哈希表 */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Extend</span>()</span> &#123;</span><br><span class="line">        <span class="comment">// 暂存原哈希表</span></span><br><span class="line">        List&lt;List&lt;Pair&gt;&gt; bucketsTmp = buckets;</span><br><span class="line">        <span class="comment">// 初始化扩容后的新哈希表</span></span><br><span class="line">        capacity *= extendRatio;</span><br><span class="line">        buckets = <span class="keyword">new</span> List&lt;List&lt;Pair&gt;&gt;(capacity);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; capacity; i++) &#123;</span><br><span class="line">            buckets.Add([]);</span><br><span class="line">        &#125;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 将键值对从原哈希表搬运至新哈希表</span></span><br><span class="line">        <span class="keyword">foreach</span> (List&lt;Pair&gt; bucket <span class="keyword">in</span> bucketsTmp) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (Pair pair <span class="keyword">in</span> bucket) &#123;</span><br><span class="line">                Put(pair.key, pair.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打印哈希表 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Print</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (List&lt;Pair&gt; bucket <span class="keyword">in</span> buckets) &#123;</span><br><span class="line">            List&lt;<span class="built_in">string</span>&gt; res = [];</span><br><span class="line">            <span class="keyword">foreach</span> (Pair pair <span class="keyword">in</span> bucket) &#123;</span><br><span class="line">                res.Add(pair.key + <span class="string">&quot; -&gt; &quot;</span> + pair.val);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">string</span> kv <span class="keyword">in</span> res) &#123;</span><br><span class="line">                Console.WriteLine(kv);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-5"><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 链式地址哈希表 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HashMapChaining</span> &#123;</span><br><span class="line">    #size; <span class="comment">// 键值对数量</span></span><br><span class="line">    #capacity; <span class="comment">// 哈希表容量</span></span><br><span class="line">    #loadThres; <span class="comment">// 触发扩容的负载因子阈值</span></span><br><span class="line">    #extendRatio; <span class="comment">// 扩容倍数</span></span><br><span class="line">    #buckets; <span class="comment">// 桶数组</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 构造方法 */</span></span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.#size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.#capacity = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">this</span>.#loadThres = <span class="number">2.0</span> / <span class="number">3.0</span>;</span><br><span class="line">        <span class="keyword">this</span>.#extendRatio = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">this</span>.#buckets = new Array(<span class="keyword">this</span>.#capacity).fill(<span class="literal">null</span>).map((x) =&gt; []);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 哈希函数 */</span></span><br><span class="line">    #hashFunc(key) &#123;</span><br><span class="line">        <span class="keyword">return</span> key % <span class="keyword">this</span>.#capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 负载因子 */</span></span><br><span class="line">    #loadFactor() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.#size / <span class="keyword">this</span>.#capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 查询操作 */</span></span><br><span class="line">    <span class="keyword">get</span>(key) &#123;</span><br><span class="line">        <span class="keyword">const</span> index = <span class="keyword">this</span>.#hashFunc(key);</span><br><span class="line">        <span class="keyword">const</span> bucket = <span class="keyword">this</span>.#buckets[index];</span><br><span class="line">        <span class="comment">// 遍历桶，若找到 key ，则返回对应 val</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> pair of bucket) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pair.key === key) &#123;</span><br><span class="line">                <span class="keyword">return</span> pair.<span class="keyword">val</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若未找到 key ，则返回 null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 添加操作 */</span></span><br><span class="line">    put(key, <span class="keyword">val</span>) &#123;</span><br><span class="line">        <span class="comment">// 当负载因子超过阈值时，执行扩容</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.#loadFactor() &gt; <span class="keyword">this</span>.#loadThres) &#123;</span><br><span class="line">            <span class="keyword">this</span>.#extend();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> index = <span class="keyword">this</span>.#hashFunc(key);</span><br><span class="line">        <span class="keyword">const</span> bucket = <span class="keyword">this</span>.#buckets[index];</span><br><span class="line">        <span class="comment">// 遍历桶，若遇到指定 key ，则更新对应 val 并返回</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> pair of bucket) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pair.key === key) &#123;</span><br><span class="line">                pair.<span class="keyword">val</span> = <span class="keyword">val</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若无该 key ，则将键值对添加至尾部</span></span><br><span class="line">        <span class="keyword">const</span> pair = new Pair(key, <span class="keyword">val</span>);</span><br><span class="line">        bucket.push(pair);</span><br><span class="line">        <span class="keyword">this</span>.#size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 删除操作 */</span></span><br><span class="line">    remove(key) &#123;</span><br><span class="line">        <span class="keyword">const</span> index = <span class="keyword">this</span>.#hashFunc(key);</span><br><span class="line">        let bucket = <span class="keyword">this</span>.#buckets[index];</span><br><span class="line">        <span class="comment">// 遍历桶，从中删除键值对</span></span><br><span class="line">        <span class="keyword">for</span> (let i = <span class="number">0</span>; i &lt; bucket.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bucket[i].key === key) &#123;</span><br><span class="line">                bucket.splice(i, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">this</span>.#size--;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 扩容哈希表 */</span></span><br><span class="line">    #extend() &#123;</span><br><span class="line">        <span class="comment">// 暂存原哈希表</span></span><br><span class="line">        <span class="keyword">const</span> bucketsTmp = <span class="keyword">this</span>.#buckets;</span><br><span class="line">        <span class="comment">// 初始化扩容后的新哈希表</span></span><br><span class="line">        <span class="keyword">this</span>.#capacity *= <span class="keyword">this</span>.#extendRatio;</span><br><span class="line">        <span class="keyword">this</span>.#buckets = new Array(<span class="keyword">this</span>.#capacity).fill(<span class="literal">null</span>).map((x) =&gt; []);</span><br><span class="line">        <span class="keyword">this</span>.#size = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 将键值对从原哈希表搬运至新哈希表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> bucket of bucketsTmp) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> pair of bucket) &#123;</span><br><span class="line">                <span class="keyword">this</span>.put(pair.key, pair.<span class="keyword">val</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打印哈希表 */</span></span><br><span class="line">    print() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> bucket of <span class="keyword">this</span>.#buckets) &#123;</span><br><span class="line">            let res = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> pair of bucket) &#123;</span><br><span class="line">                res.push(pair.key + <span class="string">&#x27; -&gt; &#x27;</span> + pair.<span class="keyword">val</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>当链表很长时，查询效率$O(n)$很差。此时可以将链表转换为“AVL 树”或“红黑树”，从而将查询操作的时间复杂度优化至$O(log n)$</p><h2 id="开放寻址">开放寻址</h2><h3 id="线性探测">线性探测</h3><p>线性探测采用固定步长的线性搜索来进行探测，其操作方法与普通哈希表有所不同。</p><ul><li>插入元素：通过哈希函数计算桶索引，若发现桶内已有元素，则从冲突位置向后线性遍历（步长通常为$1$），直至找到空桶，将元素插入其中。</li><li>查找元素：若发现哈希冲突，则使用相同步长向后进行线性遍历，直到找到对应元素，返回 <code>value</code> 即可；如果遇到空桶，说明目标元素不在哈希表中，返回 <code>None</code> 。</li></ul><p>线性探测容易产生“聚集现象”。具体来说，数组中连续被占用的位置越长，这些连续位置发生哈希冲突的可能性越大，从而进一步促使该位置的聚堆生长，形成恶性循环，最终导致增删查改操作效率劣化。</p><p>值得注意的是，我们不能在开放寻址哈希表中直接删除元素。这是因为删除元素会在数组内产生一个空桶 <code>None</code> ，而当查询元素时，线性探测到该空桶就会返回，因此在该空桶之下的元素都无法再被访问到，程序可能误判这些元素不存在。</p><p>为了解决该问题，我们可以采用「懒删除 lazy deletion」机制：它不直接从哈希表中移除元素，而是利用一个常量 TOMBSTONE 来标记这个桶。在该机制下，None 和 TOMBSTONE 都代表空桶，都可以放置键值对。但不同的是，线性探测到 TOMBSTONE 时应该继续遍历，因为其之下可能还存在键值对。</p><p>然而，懒删除可能会加速哈希表的性能退化。这是因为每次删除操作都会产生一个删除标记，随着 TOMBSTONE 的增加，搜索时间也会增加，因为线性探测可能需要跳过多个 TOMBSTONE 才能找到目标元素。</p><p>为此，考虑在线性探测中记录遇到的首个 TOMBSTONE 的索引，并将搜索到的目标元素与该 TOMBSTONE 交换位置。这样做的好处是当每次查询或添加元素时，元素会被移动至距离理想位置（探测起始点）更近的桶，从而优化查询效率。</p><div class="tabs" id="初始化代码"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="初始化代码-1">Python</button><button type="button" class="tab " data-href="初始化代码-2">C++</button><button type="button" class="tab " data-href="初始化代码-3">Java</button><button type="button" class="tab " data-href="初始化代码-4">C#</button><button type="button" class="tab " data-href="初始化代码-5">JS</button></ul><div class="tab-contents"><div class="tab-item-content active" id="初始化代码-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HashMapOpenAddressing</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;开放寻址哈希表&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;构造方法&quot;&quot;&quot;</span></span><br><span class="line">        self.size = <span class="number">0</span>  <span class="comment"># 键值对数量</span></span><br><span class="line">        self.capacity = <span class="number">4</span>  <span class="comment"># 哈希表容量</span></span><br><span class="line">        self.load_thres = <span class="number">2.0</span> / <span class="number">3.0</span>  <span class="comment"># 触发扩容的负载因子阈值</span></span><br><span class="line">        self.extend_ratio = <span class="number">2</span>  <span class="comment"># 扩容倍数</span></span><br><span class="line">        self.buckets: <span class="built_in">list</span>[Pair | <span class="literal">None</span>] = [<span class="literal">None</span>] * self.capacity  <span class="comment"># 桶数组</span></span><br><span class="line">        self.TOMBSTONE = Pair(-<span class="number">1</span>, <span class="string">&quot;-1&quot;</span>)  <span class="comment"># 删除标记</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hash_func</span>(<span class="params">self, key: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;哈希函数&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> key % self.capacity</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_factor</span>(<span class="params">self</span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;负载因子&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.size / self.capacity</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_bucket</span>(<span class="params">self, key: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;搜索 key 对应的桶索引&quot;&quot;&quot;</span></span><br><span class="line">        index = self.hash_func(key)</span><br><span class="line">        first_tombstone = -<span class="number">1</span></span><br><span class="line">        <span class="comment"># 线性探测，当遇到空桶时跳出</span></span><br><span class="line">        <span class="keyword">while</span> self.buckets[index] <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 若遇到 key ，返回对应的桶索引</span></span><br><span class="line">            <span class="keyword">if</span> self.buckets[index].key == key:</span><br><span class="line">                <span class="comment"># 若之前遇到了删除标记，则将键值对移动至该索引处</span></span><br><span class="line">                <span class="keyword">if</span> first_tombstone != -<span class="number">1</span>:</span><br><span class="line">                    self.buckets[first_tombstone] = self.buckets[index]</span><br><span class="line">                    self.buckets[index] = self.TOMBSTONE</span><br><span class="line">                    <span class="keyword">return</span> first_tombstone  <span class="comment"># 返回移动后的桶索引</span></span><br><span class="line">                <span class="keyword">return</span> index  <span class="comment"># 返回桶索引</span></span><br><span class="line">            <span class="comment"># 记录遇到的首个删除标记</span></span><br><span class="line">            <span class="keyword">if</span> first_tombstone == -<span class="number">1</span> <span class="keyword">and</span> self.buckets[index] <span class="keyword">is</span> self.TOMBSTONE:</span><br><span class="line">                first_tombstone = index</span><br><span class="line">            <span class="comment"># 计算桶索引，越过尾部则返回头部</span></span><br><span class="line">            index = (index + <span class="number">1</span>) % self.capacity</span><br><span class="line">        <span class="comment"># 若 key 不存在，则返回添加点的索引</span></span><br><span class="line">        <span class="keyword">return</span> index <span class="keyword">if</span> first_tombstone == -<span class="number">1</span> <span class="keyword">else</span> first_tombstone</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, key: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;查询操作&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 搜索 key 对应的桶索引</span></span><br><span class="line">        index = self.find_bucket(key)</span><br><span class="line">        <span class="comment"># 若找到键值对，则返回对应 val</span></span><br><span class="line">        <span class="keyword">if</span> self.buckets[index] <span class="keyword">not</span> <span class="keyword">in</span> [<span class="literal">None</span>, self.TOMBSTONE]:</span><br><span class="line">            <span class="keyword">return</span> self.buckets[index].val</span><br><span class="line">        <span class="comment"># 若键值对不存在，则返回 None</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put</span>(<span class="params">self, key: <span class="built_in">int</span>, val: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;添加操作&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 当负载因子超过阈值时，执行扩容</span></span><br><span class="line">        <span class="keyword">if</span> self.load_factor() &gt; self.load_thres:</span><br><span class="line">            self.extend()</span><br><span class="line">        <span class="comment"># 搜索 key 对应的桶索引</span></span><br><span class="line">        index = self.find_bucket(key)</span><br><span class="line">        <span class="comment"># 若找到键值对，则覆盖 val 并返回</span></span><br><span class="line">        <span class="keyword">if</span> self.buckets[index] <span class="keyword">not</span> <span class="keyword">in</span> [<span class="literal">None</span>, self.TOMBSTONE]:</span><br><span class="line">            self.buckets[index].val = val</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 若键值对不存在，则添加该键值对</span></span><br><span class="line">        self.buckets[index] = Pair(key, val)</span><br><span class="line">        self.size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self, key: <span class="built_in">int</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;删除操作&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 搜索 key 对应的桶索引</span></span><br><span class="line">        index = self.find_bucket(key)</span><br><span class="line">        <span class="comment"># 若找到键值对，则用删除标记覆盖它</span></span><br><span class="line">        <span class="keyword">if</span> self.buckets[index] <span class="keyword">not</span> <span class="keyword">in</span> [<span class="literal">None</span>, self.TOMBSTONE]:</span><br><span class="line">            self.buckets[index] = self.TOMBSTONE</span><br><span class="line">            self.size -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extend</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;扩容哈希表&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 暂存原哈希表</span></span><br><span class="line">        buckets_tmp = self.buckets</span><br><span class="line">        <span class="comment"># 初始化扩容后的新哈希表</span></span><br><span class="line">        self.capacity *= self.extend_ratio</span><br><span class="line">        self.buckets = [<span class="literal">None</span>] * self.capacity</span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 将键值对从原哈希表搬运至新哈希表</span></span><br><span class="line">        <span class="keyword">for</span> pair <span class="keyword">in</span> buckets_tmp:</span><br><span class="line">            <span class="keyword">if</span> pair <span class="keyword">not</span> <span class="keyword">in</span> [<span class="literal">None</span>, self.TOMBSTONE]:</span><br><span class="line">                self.put(pair.key, pair.val)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印哈希表&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> pair <span class="keyword">in</span> self.buckets:</span><br><span class="line">            <span class="keyword">if</span> pair <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;None&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> pair <span class="keyword">is</span> self.TOMBSTONE:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;TOMBSTONE&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(pair.key, <span class="string">&quot;-&gt;&quot;</span>, pair.val)</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-2"><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 开放寻址哈希表 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HashMapOpenAddressing</span> &#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> size;                             <span class="comment">// 键值对数量</span></span><br><span class="line">    <span class="type">int</span> capacity = <span class="number">4</span>;                     <span class="comment">// 哈希表容量</span></span><br><span class="line">    <span class="type">const</span> <span class="type">double</span> loadThres = <span class="number">2.0</span> / <span class="number">3.0</span>;     <span class="comment">// 触发扩容的负载因子阈值</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> extendRatio = <span class="number">2</span>;            <span class="comment">// 扩容倍数</span></span><br><span class="line">    vector&lt;Pair *&gt; buckets;               <span class="comment">// 桶数组</span></span><br><span class="line">    Pair *TOMBSTONE = <span class="keyword">new</span> <span class="built_in">Pair</span>(<span class="number">-1</span>, <span class="string">&quot;-1&quot;</span>); <span class="comment">// 删除标记</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/* 构造方法 */</span></span><br><span class="line">    <span class="built_in">HashMapOpenAddressing</span>() : <span class="built_in">size</span>(<span class="number">0</span>), <span class="built_in">buckets</span>(capacity, <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 析构方法 */</span></span><br><span class="line">    ~<span class="built_in">HashMapOpenAddressing</span>() &#123;</span><br><span class="line">        <span class="keyword">for</span> (Pair *pair : buckets) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pair != <span class="literal">nullptr</span> &amp;&amp; pair != TOMBSTONE) &#123;</span><br><span class="line">                <span class="keyword">delete</span> pair;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> TOMBSTONE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 哈希函数 */</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hashFunc</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key % capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 负载因子 */</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">loadFactor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">double</span>)size / capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 搜索 key 对应的桶索引 */</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findBucket</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">hashFunc</span>(key);</span><br><span class="line">        <span class="type">int</span> firstTombstone = <span class="number">-1</span>;</span><br><span class="line">        <span class="comment">// 线性探测，当遇到空桶时跳出</span></span><br><span class="line">        <span class="keyword">while</span> (buckets[index] != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="comment">// 若遇到 key ，返回对应的桶索引</span></span><br><span class="line">            <span class="keyword">if</span> (buckets[index]-&gt;key == key) &#123;</span><br><span class="line">                <span class="comment">// 若之前遇到了删除标记，则将键值对移动至该索引处</span></span><br><span class="line">                <span class="keyword">if</span> (firstTombstone != <span class="number">-1</span>) &#123;</span><br><span class="line">                    buckets[firstTombstone] = buckets[index];</span><br><span class="line">                    buckets[index] = TOMBSTONE;</span><br><span class="line">                    <span class="keyword">return</span> firstTombstone; <span class="comment">// 返回移动后的桶索引</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> index; <span class="comment">// 返回桶索引</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 记录遇到的首个删除标记</span></span><br><span class="line">            <span class="keyword">if</span> (firstTombstone == <span class="number">-1</span> &amp;&amp; buckets[index] == TOMBSTONE) &#123;</span><br><span class="line">                firstTombstone = index;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 计算桶索引，越过尾部则返回头部</span></span><br><span class="line">            index = (index + <span class="number">1</span>) % capacity;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若 key 不存在，则返回添加点的索引</span></span><br><span class="line">        <span class="keyword">return</span> firstTombstone == <span class="number">-1</span> ? index : firstTombstone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 查询操作 */</span></span><br><span class="line">    <span class="function">string <span class="title">get</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 搜索 key 对应的桶索引</span></span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">findBucket</span>(key);</span><br><span class="line">        <span class="comment">// 若找到键值对，则返回对应 val</span></span><br><span class="line">        <span class="keyword">if</span> (buckets[index] != <span class="literal">nullptr</span> &amp;&amp; buckets[index] != TOMBSTONE) &#123;</span><br><span class="line">            <span class="keyword">return</span> buckets[index]-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若键值对不存在，则返回空字符串</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 添加操作 */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> key, string val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当负载因子超过阈值时，执行扩容</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">loadFactor</span>() &gt; loadThres) &#123;</span><br><span class="line">            <span class="built_in">extend</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 搜索 key 对应的桶索引</span></span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">findBucket</span>(key);</span><br><span class="line">        <span class="comment">// 若找到键值对，则覆盖 val 并返回</span></span><br><span class="line">        <span class="keyword">if</span> (buckets[index] != <span class="literal">nullptr</span> &amp;&amp; buckets[index] != TOMBSTONE) &#123;</span><br><span class="line">            buckets[index]-&gt;val = val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若键值对不存在，则添加该键值对</span></span><br><span class="line">        buckets[index] = <span class="keyword">new</span> <span class="built_in">Pair</span>(key, val);</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 删除操作 */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 搜索 key 对应的桶索引</span></span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">findBucket</span>(key);</span><br><span class="line">        <span class="comment">// 若找到键值对，则用删除标记覆盖它</span></span><br><span class="line">        <span class="keyword">if</span> (buckets[index] != <span class="literal">nullptr</span> &amp;&amp; buckets[index] != TOMBSTONE) &#123;</span><br><span class="line">            <span class="keyword">delete</span> buckets[index];</span><br><span class="line">            buckets[index] = TOMBSTONE;</span><br><span class="line">            size--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 扩容哈希表 */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">extend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 暂存原哈希表</span></span><br><span class="line">        vector&lt;Pair *&gt; bucketsTmp = buckets;</span><br><span class="line">        <span class="comment">// 初始化扩容后的新哈希表</span></span><br><span class="line">        capacity *= extendRatio;</span><br><span class="line">        buckets = <span class="built_in">vector</span>&lt;Pair *&gt;(capacity, <span class="literal">nullptr</span>);</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 将键值对从原哈希表搬运至新哈希表</span></span><br><span class="line">        <span class="keyword">for</span> (Pair *pair : bucketsTmp) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pair != <span class="literal">nullptr</span> &amp;&amp; pair != TOMBSTONE) &#123;</span><br><span class="line">                <span class="built_in">put</span>(pair-&gt;key, pair-&gt;val);</span><br><span class="line">                <span class="keyword">delete</span> pair;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打印哈希表 */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Pair *pair : buckets) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pair == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;nullptr&quot;</span> &lt;&lt; endl;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pair == TOMBSTONE) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;TOMBSTONE&quot;</span> &lt;&lt; endl;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cout &lt;&lt; pair-&gt;key &lt;&lt; <span class="string">&quot; -&gt; &quot;</span> &lt;&lt; pair-&gt;val &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-3"><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 开放寻址哈希表 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HashMapOpenAddressing</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size; <span class="comment">// 键值对数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity = <span class="number">4</span>; <span class="comment">// 哈希表容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> loadThres = <span class="number">2.0</span> / <span class="number">3.0</span>; <span class="comment">// 触发扩容的负载因子阈值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> extendRatio = <span class="number">2</span>; <span class="comment">// 扩容倍数</span></span><br><span class="line">    <span class="keyword">private</span> Pair[] buckets; <span class="comment">// 桶数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Pair TOMBSTONE = <span class="keyword">new</span> <span class="built_in">Pair</span>(<span class="number">-1</span>, <span class="string">&quot;-1&quot;</span>); <span class="comment">// 删除标记</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 构造方法 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMapOpenAddressing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        buckets = <span class="keyword">new</span> Pair[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 哈希函数 */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="type">int</span> <span class="title">hashFunc</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key % capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 负载因子 */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="type">double</span> <span class="title">loadFactor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">double</span>) size / capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 搜索 key 对应的桶索引 */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="type">int</span> <span class="title">findBucket</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">hashFunc</span>(key);</span><br><span class="line">        <span class="type">int</span> firstTombstone = <span class="number">-1</span>;</span><br><span class="line">        <span class="comment">// 线性探测，当遇到空桶时跳出</span></span><br><span class="line">        <span class="keyword">while</span> (buckets[index] != null) &#123;</span><br><span class="line">            <span class="comment">// 若遇到 key ，返回对应的桶索引</span></span><br><span class="line">            <span class="keyword">if</span> (buckets[index].key == key) &#123;</span><br><span class="line">                <span class="comment">// 若之前遇到了删除标记，则将键值对移动至该索引处</span></span><br><span class="line">                <span class="keyword">if</span> (firstTombstone != <span class="number">-1</span>) &#123;</span><br><span class="line">                    buckets[firstTombstone] = buckets[index];</span><br><span class="line">                    buckets[index] = TOMBSTONE;</span><br><span class="line">                    <span class="keyword">return</span> firstTombstone; <span class="comment">// 返回移动后的桶索引</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> index; <span class="comment">// 返回桶索引</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 记录遇到的首个删除标记</span></span><br><span class="line">            <span class="keyword">if</span> (firstTombstone == <span class="number">-1</span> &amp;&amp; buckets[index] == TOMBSTONE) &#123;</span><br><span class="line">                firstTombstone = index;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 计算桶索引，越过尾部则返回头部</span></span><br><span class="line">            index = (index + <span class="number">1</span>) % capacity;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若 key 不存在，则返回添加点的索引</span></span><br><span class="line">        <span class="keyword">return</span> firstTombstone == <span class="number">-1</span> ? index : firstTombstone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 查询操作 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">String</span> <span class="title">get</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 搜索 key 对应的桶索引</span></span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">findBucket</span>(key);</span><br><span class="line">        <span class="comment">// 若找到键值对，则返回对应 val</span></span><br><span class="line">        <span class="keyword">if</span> (buckets[index] != null &amp;&amp; buckets[index] != TOMBSTONE) &#123;</span><br><span class="line">            <span class="keyword">return</span> buckets[index].val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若键值对不存在，则返回 null</span></span><br><span class="line">        <span class="keyword">return</span> null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 添加操作 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">put</span><span class="params">(<span class="type">int</span> key, <span class="type">String</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当负载因子超过阈值时，执行扩容</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">loadFactor</span>() &gt; loadThres) &#123;</span><br><span class="line">            <span class="built_in">extend</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 搜索 key 对应的桶索引</span></span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">findBucket</span>(key);</span><br><span class="line">        <span class="comment">// 若找到键值对，则覆盖 val 并返回</span></span><br><span class="line">        <span class="keyword">if</span> (buckets[index] != null &amp;&amp; buckets[index] != TOMBSTONE) &#123;</span><br><span class="line">            buckets[index].val = val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若键值对不存在，则添加该键值对</span></span><br><span class="line">        buckets[index] = <span class="keyword">new</span> <span class="built_in">Pair</span>(key, val);</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 删除操作 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 搜索 key 对应的桶索引</span></span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">findBucket</span>(key);</span><br><span class="line">        <span class="comment">// 若找到键值对，则用删除标记覆盖它</span></span><br><span class="line">        <span class="keyword">if</span> (buckets[index] != null &amp;&amp; buckets[index] != TOMBSTONE) &#123;</span><br><span class="line">            buckets[index] = TOMBSTONE;</span><br><span class="line">            size--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 扩容哈希表 */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="type">void</span> <span class="title">extend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 暂存原哈希表</span></span><br><span class="line">        Pair[] bucketsTmp = buckets;</span><br><span class="line">        <span class="comment">// 初始化扩容后的新哈希表</span></span><br><span class="line">        capacity *= extendRatio;</span><br><span class="line">        buckets = <span class="keyword">new</span> Pair[capacity];</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 将键值对从原哈希表搬运至新哈希表</span></span><br><span class="line">        <span class="keyword">for</span> (Pair pair : bucketsTmp) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pair != null &amp;&amp; pair != TOMBSTONE) &#123;</span><br><span class="line">                <span class="built_in">put</span>(pair.key, pair.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打印哈希表 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Pair pair : buckets) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pair == null) &#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">&quot;null&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pair == TOMBSTONE) &#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">&quot;TOMBSTONE&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(pair.key + <span class="string">&quot; -&gt; &quot;</span> + pair.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-4"><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 开放寻址哈希表 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HashMapOpenAddressing</span> &#123;</span><br><span class="line">    <span class="type">int</span> size; <span class="comment">// 键值对数量</span></span><br><span class="line">    <span class="type">int</span> capacity = <span class="number">4</span>; <span class="comment">// 哈希表容量</span></span><br><span class="line">    <span class="type">double</span> loadThres = <span class="number">2.0</span> / <span class="number">3.0</span>; <span class="comment">// 触发扩容的负载因子阈值</span></span><br><span class="line">    <span class="type">int</span> extendRatio = <span class="number">2</span>; <span class="comment">// 扩容倍数</span></span><br><span class="line">    Pair[] buckets; <span class="comment">// 桶数组</span></span><br><span class="line">    Pair TOMBSTONE = <span class="built_in">new</span>(<span class="number">-1</span>, <span class="string">&quot;-1&quot;</span>); <span class="comment">// 删除标记</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 构造方法 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMapOpenAddressing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        buckets = <span class="keyword">new</span> Pair[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 哈希函数 */</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">HashFunc</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key % capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 负载因子 */</span></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">LoadFactor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">double</span>)size / capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 搜索 key 对应的桶索引 */</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">FindBucket</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">HashFunc</span>(key);</span><br><span class="line">        <span class="type">int</span> firstTombstone = <span class="number">-1</span>;</span><br><span class="line">        <span class="comment">// 线性探测，当遇到空桶时跳出</span></span><br><span class="line">        <span class="keyword">while</span> (buckets[index] != null) &#123;</span><br><span class="line">            <span class="comment">// 若遇到 key ，返回对应的桶索引</span></span><br><span class="line">            <span class="keyword">if</span> (buckets[index].key == key) &#123;</span><br><span class="line">                <span class="comment">// 若之前遇到了删除标记，则将键值对移动至该索引处</span></span><br><span class="line">                <span class="keyword">if</span> (firstTombstone != <span class="number">-1</span>) &#123;</span><br><span class="line">                    buckets[firstTombstone] = buckets[index];</span><br><span class="line">                    buckets[index] = TOMBSTONE;</span><br><span class="line">                    <span class="keyword">return</span> firstTombstone; <span class="comment">// 返回移动后的桶索引</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> index; <span class="comment">// 返回桶索引</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 记录遇到的首个删除标记</span></span><br><span class="line">            <span class="keyword">if</span> (firstTombstone == <span class="number">-1</span> &amp;&amp; buckets[index] == TOMBSTONE) &#123;</span><br><span class="line">                firstTombstone = index;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 计算桶索引，越过尾部则返回头部</span></span><br><span class="line">            index = (index + <span class="number">1</span>) % capacity;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若 key 不存在，则返回添加点的索引</span></span><br><span class="line">        <span class="keyword">return</span> firstTombstone == <span class="number">-1</span> ? index : firstTombstone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 查询操作 */</span></span><br><span class="line">    <span class="keyword">public</span> string? <span class="built_in">Get</span>(<span class="type">int</span> key) &#123;</span><br><span class="line">        <span class="comment">// 搜索 key 对应的桶索引</span></span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">FindBucket</span>(key);</span><br><span class="line">        <span class="comment">// 若找到键值对，则返回对应 val</span></span><br><span class="line">        <span class="keyword">if</span> (buckets[index] != null &amp;&amp; buckets[index] != TOMBSTONE) &#123;</span><br><span class="line">            <span class="keyword">return</span> buckets[index].val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若键值对不存在，则返回 null</span></span><br><span class="line">        <span class="keyword">return</span> null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 添加操作 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">Put</span><span class="params">(<span class="type">int</span> key, string val)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当负载因子超过阈值时，执行扩容</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">LoadFactor</span>() &gt; loadThres) &#123;</span><br><span class="line">            <span class="built_in">Extend</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 搜索 key 对应的桶索引</span></span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">FindBucket</span>(key);</span><br><span class="line">        <span class="comment">// 若找到键值对，则覆盖 val 并返回</span></span><br><span class="line">        <span class="keyword">if</span> (buckets[index] != null &amp;&amp; buckets[index] != TOMBSTONE) &#123;</span><br><span class="line">            buckets[index].val = val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若键值对不存在，则添加该键值对</span></span><br><span class="line">        buckets[index] = <span class="keyword">new</span> <span class="built_in">Pair</span>(key, val);</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 删除操作 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">Remove</span><span class="params">(<span class="type">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 搜索 key 对应的桶索引</span></span><br><span class="line">        <span class="type">int</span> index = <span class="built_in">FindBucket</span>(key);</span><br><span class="line">        <span class="comment">// 若找到键值对，则用删除标记覆盖它</span></span><br><span class="line">        <span class="keyword">if</span> (buckets[index] != null &amp;&amp; buckets[index] != TOMBSTONE) &#123;</span><br><span class="line">            buckets[index] = TOMBSTONE;</span><br><span class="line">            size--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 扩容哈希表 */</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Extend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 暂存原哈希表</span></span><br><span class="line">        Pair[] bucketsTmp = buckets;</span><br><span class="line">        <span class="comment">// 初始化扩容后的新哈希表</span></span><br><span class="line">        capacity *= extendRatio;</span><br><span class="line">        buckets = <span class="keyword">new</span> Pair[capacity];</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 将键值对从原哈希表搬运至新哈希表</span></span><br><span class="line">        foreach (Pair pair in bucketsTmp) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pair != null &amp;&amp; pair != TOMBSTONE) &#123;</span><br><span class="line">                <span class="built_in">Put</span>(pair.key, pair.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打印哈希表 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">Print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        foreach (Pair pair in buckets) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pair == null) &#123;</span><br><span class="line">                <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(<span class="string">&quot;null&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pair == TOMBSTONE) &#123;</span><br><span class="line">                <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(<span class="string">&quot;TOMBSTONE&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(pair.key + <span class="string">&quot; -&gt; &quot;</span> + pair.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-5"><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 开放寻址哈希表 */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HashMapOpenAddressing</span> &#123;</span><br><span class="line">    #size; <span class="comment">// 键值对数量</span></span><br><span class="line">    #capacity; <span class="comment">// 哈希表容量</span></span><br><span class="line">    #loadThres; <span class="comment">// 触发扩容的负载因子阈值</span></span><br><span class="line">    #extendRatio; <span class="comment">// 扩容倍数</span></span><br><span class="line">    #buckets; <span class="comment">// 桶数组</span></span><br><span class="line">    #TOMBSTONE; <span class="comment">// 删除标记</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 构造方法 */</span></span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.#size = <span class="number">0</span>; <span class="comment">// 键值对数量</span></span><br><span class="line">        <span class="keyword">this</span>.#capacity = <span class="number">4</span>; <span class="comment">// 哈希表容量</span></span><br><span class="line">        <span class="keyword">this</span>.#loadThres = <span class="number">2.0</span> / <span class="number">3.0</span>; <span class="comment">// 触发扩容的负载因子阈值</span></span><br><span class="line">        <span class="keyword">this</span>.#extendRatio = <span class="number">2</span>; <span class="comment">// 扩容倍数</span></span><br><span class="line">        <span class="keyword">this</span>.#buckets = Array(<span class="keyword">this</span>.#capacity).fill(<span class="literal">null</span>); <span class="comment">// 桶数组</span></span><br><span class="line">        <span class="keyword">this</span>.#TOMBSTONE = new Pair(-<span class="number">1</span>, <span class="string">&#x27;-1&#x27;</span>); <span class="comment">// 删除标记</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 哈希函数 */</span></span><br><span class="line">    #hashFunc(key) &#123;</span><br><span class="line">        <span class="keyword">return</span> key % <span class="keyword">this</span>.#capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 负载因子 */</span></span><br><span class="line">    #loadFactor() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.#size / <span class="keyword">this</span>.#capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 搜索 key 对应的桶索引 */</span></span><br><span class="line">    #findBucket(key) &#123;</span><br><span class="line">        let index = <span class="keyword">this</span>.#hashFunc(key);</span><br><span class="line">        let firstTombstone = -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 线性探测，当遇到空桶时跳出</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">this</span>.#buckets[index] !== <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 若遇到 key ，返回对应的桶索引</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.#buckets[index].key === key) &#123;</span><br><span class="line">                <span class="comment">// 若之前遇到了删除标记，则将键值对移动至该索引处</span></span><br><span class="line">                <span class="keyword">if</span> (firstTombstone !== -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.#buckets[firstTombstone] = <span class="keyword">this</span>.#buckets[index];</span><br><span class="line">                    <span class="keyword">this</span>.#buckets[index] = <span class="keyword">this</span>.#TOMBSTONE;</span><br><span class="line">                    <span class="keyword">return</span> firstTombstone; <span class="comment">// 返回移动后的桶索引</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> index; <span class="comment">// 返回桶索引</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 记录遇到的首个删除标记</span></span><br><span class="line">            <span class="keyword">if</span> (</span><br><span class="line">                firstTombstone === -<span class="number">1</span> &amp;&amp;</span><br><span class="line">                <span class="keyword">this</span>.#buckets[index] === <span class="keyword">this</span>.#TOMBSTONE</span><br><span class="line">            ) &#123;</span><br><span class="line">                firstTombstone = index;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 计算桶索引，越过尾部则返回头部</span></span><br><span class="line">            index = (index + <span class="number">1</span>) % <span class="keyword">this</span>.#capacity;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若 key 不存在，则返回添加点的索引</span></span><br><span class="line">        <span class="keyword">return</span> firstTombstone === -<span class="number">1</span> ? index : firstTombstone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 查询操作 */</span></span><br><span class="line">    <span class="keyword">get</span>(key) &#123;</span><br><span class="line">        <span class="comment">// 搜索 key 对应的桶索引</span></span><br><span class="line">        <span class="keyword">const</span> index = <span class="keyword">this</span>.#findBucket(key);</span><br><span class="line">        <span class="comment">// 若找到键值对，则返回对应 val</span></span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            <span class="keyword">this</span>.#buckets[index] !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">            <span class="keyword">this</span>.#buckets[index] !== <span class="keyword">this</span>.#TOMBSTONE</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.#buckets[index].<span class="keyword">val</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若键值对不存在，则返回 null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 添加操作 */</span></span><br><span class="line">    put(key, <span class="keyword">val</span>) &#123;</span><br><span class="line">        <span class="comment">// 当负载因子超过阈值时，执行扩容</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.#loadFactor() &gt; <span class="keyword">this</span>.#loadThres) &#123;</span><br><span class="line">            <span class="keyword">this</span>.#extend();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 搜索 key 对应的桶索引</span></span><br><span class="line">        <span class="keyword">const</span> index = <span class="keyword">this</span>.#findBucket(key);</span><br><span class="line">        <span class="comment">// 若找到键值对，则覆盖 val 并返回</span></span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            <span class="keyword">this</span>.#buckets[index] !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">            <span class="keyword">this</span>.#buckets[index] !== <span class="keyword">this</span>.#TOMBSTONE</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="keyword">this</span>.#buckets[index].<span class="keyword">val</span> = <span class="keyword">val</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若键值对不存在，则添加该键值对</span></span><br><span class="line">        <span class="keyword">this</span>.#buckets[index] = new Pair(key, <span class="keyword">val</span>);</span><br><span class="line">        <span class="keyword">this</span>.#size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 删除操作 */</span></span><br><span class="line">    remove(key) &#123;</span><br><span class="line">        <span class="comment">// 搜索 key 对应的桶索引</span></span><br><span class="line">        <span class="keyword">const</span> index = <span class="keyword">this</span>.#findBucket(key);</span><br><span class="line">        <span class="comment">// 若找到键值对，则用删除标记覆盖它</span></span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            <span class="keyword">this</span>.#buckets[index] !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">            <span class="keyword">this</span>.#buckets[index] !== <span class="keyword">this</span>.#TOMBSTONE</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="keyword">this</span>.#buckets[index] = <span class="keyword">this</span>.#TOMBSTONE;</span><br><span class="line">            <span class="keyword">this</span>.#size--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 扩容哈希表 */</span></span><br><span class="line">    #extend() &#123;</span><br><span class="line">        <span class="comment">// 暂存原哈希表</span></span><br><span class="line">        <span class="keyword">const</span> bucketsTmp = <span class="keyword">this</span>.#buckets;</span><br><span class="line">        <span class="comment">// 初始化扩容后的新哈希表</span></span><br><span class="line">        <span class="keyword">this</span>.#capacity *= <span class="keyword">this</span>.#extendRatio;</span><br><span class="line">        <span class="keyword">this</span>.#buckets = Array(<span class="keyword">this</span>.#capacity).fill(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.#size = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 将键值对从原哈希表搬运至新哈希表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> pair of bucketsTmp) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pair !== <span class="literal">null</span> &amp;&amp; pair !== <span class="keyword">this</span>.#TOMBSTONE) &#123;</span><br><span class="line">                <span class="keyword">this</span>.put(pair.key, pair.<span class="keyword">val</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 打印哈希表 */</span></span><br><span class="line">    print() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> pair of <span class="keyword">this</span>.#buckets) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pair === <span class="literal">null</span>) &#123;</span><br><span class="line">                console.log(<span class="string">&#x27;null&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pair === <span class="keyword">this</span>.#TOMBSTONE) &#123;</span><br><span class="line">                console.log(<span class="string">&#x27;TOMBSTONE&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                console.log(pair.key + <span class="string">&#x27; -&gt; &#x27;</span> + pair.<span class="keyword">val</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="平方探测">平方探测</h3><p>平方探测与线性探测类似，都是开放寻址的常见策略之一。当发生冲突时，平方探测不是简单地跳过一个固定的步数，而是跳过“探测次数的平方”的步数，即$1,4,9,·····$步。</p><p>平方探测主要具有以下优势。</p><ul><li><p>平方探测通过跳过探测次数平方的距离，试图缓解线性探测的聚集效应。</p></li><li><p>平方探测会跳过更大的距离来寻找空位置，有助于数据分布得更加均匀。<br>然而，平方探测并不是完美的。</p></li><li><p>仍然存在聚集现象，即某些位置比其他位置更容易被占用。</p></li><li><p>由于平方的增长，平方探测可能不会探测整个哈希表，这意味着即使哈希表中有空桶，平方探测也可能无法访问到它。</p></li></ul><h3 id="多次哈希">多次哈希</h3><p>顾名思义，多次哈希方法使用多个哈希函数$ f_1(x),f_2(x),f_3(x)···$ 进行探测。</p><ul><li>插入元素：若哈希函数$f_1(x)$ 出现冲突，则尝试 $f_2(x)$，以此类推，直到找到空位后插入元素。</li><li>查找元素：在相同的哈希函数顺序下进行查找，直到找到目标元素时返回；若遇到空位或已尝试所有哈希函数，说明哈希表中不存在该元素，则返回 <code>None</code> 。</li></ul><p>与线性探测相比，多次哈希方法不易产生聚集，但多个哈希函数会带来额外的计算量。</p><div class="note warning flat"><p>请注意，开放寻址（线性探测、平方探测和多次哈希）哈希表都存在“不能直接删除元素”的问题。</p></div><h1 id="二叉树">二叉树</h1><p>「二叉树 binary tree」是一种非线性数据结构，代表“祖先”与“后代”之间的派生关系，体现了“一分为二”的分治逻辑。与链表类似，二叉树的基本单元是节点，每个节点包含值、左子节点引用和右子节点引用。每个节点都有两个引用（指针），分别指向「左子节点 left-child node」和「右子节点 right-child node」，该节点被称为这两个子节点的「父节点 parent node」。当给定一个二叉树的节点时，我们将该节点的左子节点及其以下节点形成的树称为该节点的「左子树 left subtree」，同理可得「右子树 right subtree」。<em><strong>在二叉树中，除叶节点外，其他所有节点都包含子节点和非空子树。</strong></em></p><ul><li>「根节点 root node」：位于二叉树顶层的节点，没有父节点。</li><li>「叶节点 leaf node」：没有子节点的节点，其两个指针均指向 None 。</li><li>「边 edge」：连接两个节点的线段，即节点引用（指针）。</li><li>节点所在的「层 level」：从顶至底递增，根节点所在层为 1 。</li><li>节点的「度 degree」：节点的子节点的数量。在二叉树中，度的取值范围是 0、1、2 。</li><li>二叉树的「高度 height」：从根节点到最远叶节点所经过的边的数量。</li><li>节点的「深度 depth」：从根节点到该节点所经过的边的数量。</li><li>节点的「高度 height」：从距离该节点最远的叶节点到该节点所经过的边的数量。</li></ul><h2 id="常见二叉树类型">常见二叉树类型</h2><ul><li><p>「完美二叉树or满二叉树 perfect binary tree」所有层的节点都被完全填满。在完美二叉树中，叶节点的度为 $0$ ，其余所有节点的度都为$2$；若树的高度为$h$，则节点总数为$2^{h+1}-1$。</p></li><li><p>「完全二叉树 complete binary tree」只有最底层的节点未被填满，且最底层节点尽量靠左填充。</p></li><li><p>「完满二叉树 full binary tree」除了叶节点之外，其余所有节点都有两个子节点。</p></li><li><p>「平衡二叉树 balanced binary tree」中任意节点的左子树和右子树的高度之差的绝对值不超过 1 。</p></li></ul><h2 id="二叉树的遍历">二叉树的遍历</h2><ol><li>「层序遍历 level-order traversal」从顶部到底部逐层遍历二叉树，并在每一层按照从左到右的顺序访问节点。层序遍历本质上属于「广度优先遍历 breadth-first traversal」，也称「广度优先搜索 breadth-first search, BFS」，它体现了一种“一圈一圈向外扩展”的逐层遍历方式。</li></ol><div class="tabs" id="初始化代码"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="初始化代码-1">Python</button><button type="button" class="tab " data-href="初始化代码-2">C++</button><button type="button" class="tab " data-href="初始化代码-3">Java</button><button type="button" class="tab " data-href="初始化代码-4">C#</button><button type="button" class="tab " data-href="初始化代码-5">JS</button></ul><div class="tab-contents"><div class="tab-item-content active" id="初始化代码-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">level_order</span>(<span class="params">root: TreeNode | <span class="literal">None</span></span>) -&gt; <span class="built_in">list</span>[<span class="built_in">int</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;层序遍历&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 初始化队列，加入根节点</span></span><br><span class="line">    queue: deque[TreeNode] = deque()</span><br><span class="line">    queue.append(root)</span><br><span class="line">    <span class="comment"># 初始化一个列表，用于保存遍历序列</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        node: TreeNode = queue.popleft()  <span class="comment"># 队列出队</span></span><br><span class="line">        res.append(node.val)  <span class="comment"># 保存节点值</span></span><br><span class="line">        <span class="keyword">if</span> node.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            queue.append(node.left)  <span class="comment"># 左子节点入队</span></span><br><span class="line">        <span class="keyword">if</span> node.right <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            queue.append(node.right)  <span class="comment"># 右子节点入队</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-2"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 层序遍历 */</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">levelOrder</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化队列，加入根节点</span></span><br><span class="line">    queue&lt;TreeNode *&gt; queue;</span><br><span class="line">    queue.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="comment">// 初始化一个列表，用于保存遍历序列</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">    <span class="keyword">while</span> (!queue.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        TreeNode *node = queue.<span class="built_in">front</span>();</span><br><span class="line">        queue.<span class="built_in">pop</span>();              <span class="comment">// 队列出队</span></span><br><span class="line">        vec.<span class="built_in">push_back</span>(node-&gt;val); <span class="comment">// 保存节点值</span></span><br><span class="line">        <span class="keyword">if</span> (node-&gt;left != <span class="literal">nullptr</span>)</span><br><span class="line">            queue.<span class="built_in">push</span>(node-&gt;left); <span class="comment">// 左子节点入队</span></span><br><span class="line">        <span class="keyword">if</span> (node-&gt;right != <span class="literal">nullptr</span>)</span><br><span class="line">            queue.<span class="built_in">push</span>(node-&gt;right); <span class="comment">// 右子节点入队</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-3"><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 层序遍历 */</span></span><br><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">    <span class="comment">// 初始化队列，加入根节点</span></span><br><span class="line">    <span class="built_in">Queue</span>&lt;TreeNode&gt; <span class="built_in">queue</span> = <span class="literal">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="built_in">queue</span>.add(root);</span><br><span class="line">    <span class="comment">// 初始化一个列表，用于保存遍历序列</span></span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">Integer</span>&gt; <span class="built_in">list</span> = <span class="literal">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">queue</span>.isEmpty()) &#123;</span><br><span class="line">        TreeNode node = <span class="built_in">queue</span>.poll(); <span class="comment">// 队列出队</span></span><br><span class="line">        <span class="built_in">list</span>.add(node.val);           <span class="comment">// 保存节点值</span></span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="built_in">null</span>)</span><br><span class="line">            <span class="built_in">queue</span>.offer(node.left);   <span class="comment">// 左子节点入队</span></span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="built_in">null</span>)</span><br><span class="line">            <span class="built_in">queue</span>.offer(node.right);  <span class="comment">// 右子节点入队</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-4"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 层序遍历 */</span></span><br><span class="line"><span class="function">List&lt;<span class="type">int</span>&gt; <span class="title">LevelOrder</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化队列，加入根节点</span></span><br><span class="line">    Queue&lt;TreeNode&gt; queue = <span class="built_in">new</span>();</span><br><span class="line">    queue.<span class="built_in">Enqueue</span>(root);</span><br><span class="line">    <span class="comment">// 初始化一个列表，用于保存遍历序列</span></span><br><span class="line">    List&lt;<span class="type">int</span>&gt; list = [];</span><br><span class="line">    <span class="keyword">while</span> (queue.Count != <span class="number">0</span>) &#123;</span><br><span class="line">        TreeNode node = queue.<span class="built_in">Dequeue</span>(); <span class="comment">// 队列出队</span></span><br><span class="line">        list.<span class="built_in">Add</span>(node.val!.Value);       <span class="comment">// 保存节点值</span></span><br><span class="line">        <span class="keyword">if</span> (node.left != null)</span><br><span class="line">            queue.<span class="built_in">Enqueue</span>(node.left);    <span class="comment">// 左子节点入队</span></span><br><span class="line">        <span class="keyword">if</span> (node.right != null)</span><br><span class="line">            queue.<span class="built_in">Enqueue</span>(node.right);   <span class="comment">// 右子节点入队</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-5"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 层序遍历 */</span></span><br><span class="line"><span class="function">function <span class="title">levelOrder</span><span class="params">(root)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化队列，加入根节点</span></span><br><span class="line">    <span class="type">const</span> queue = [root];</span><br><span class="line">    <span class="comment">// 初始化一个列表，用于保存遍历序列</span></span><br><span class="line">    <span class="type">const</span> list = [];</span><br><span class="line">    <span class="keyword">while</span> (queue.length) &#123;</span><br><span class="line">        let node = queue.<span class="built_in">shift</span>(); <span class="comment">// 队列出队</span></span><br><span class="line">        list.<span class="built_in">push</span>(node.val); <span class="comment">// 保存节点值</span></span><br><span class="line">        <span class="keyword">if</span> (node.left) queue.<span class="built_in">push</span>(node.left); <span class="comment">// 左子节点入队</span></span><br><span class="line">        <span class="keyword">if</span> (node.right) queue.<span class="built_in">push</span>(node.right); <span class="comment">// 右子节点入队</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><ol start="2"><li>前序、中序和后序遍历都属于「深度优先遍历 depth-first traversal」，也称「深度优先搜索 depth-first search, DFS」，它体现了一种“先走到尽头，再回溯继续”的遍历方式。</li></ol><div class="tabs" id="初始化代码"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="初始化代码-1">Python</button><button type="button" class="tab " data-href="初始化代码-2">C++</button><button type="button" class="tab " data-href="初始化代码-3">Java</button><button type="button" class="tab " data-href="初始化代码-4">C#</button><button type="button" class="tab " data-href="初始化代码-5">JS</button></ul><div class="tab-contents"><div class="tab-item-content active" id="初始化代码-1"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pre_order</span>(<span class="params">root: TreeNode | <span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;前序遍历&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 访问优先级：根节点 -&gt; 左子树 -&gt; 右子树</span></span><br><span class="line">    res.append(root.val)</span><br><span class="line">    pre_order(root=root.left)</span><br><span class="line">    pre_order(root=root.right)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">in_order</span>(<span class="params">root: TreeNode | <span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;中序遍历&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 访问优先级：左子树 -&gt; 根节点 -&gt; 右子树</span></span><br><span class="line">    in_order(root=root.left)</span><br><span class="line">    res.append(root.val)</span><br><span class="line">    in_order(root=root.right)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">post_order</span>(<span class="params">root: TreeNode | <span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;后序遍历&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 访问优先级：左子树 -&gt; 右子树 -&gt; 根节点</span></span><br><span class="line">    post_order(root=root.left)</span><br><span class="line">    post_order(root=root.right)</span><br><span class="line">    res.append(root.val)</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-2"><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 前序遍历 */</span></span><br><span class="line">void <span class="built_in">preOrder</span>(TreeNode *root) &#123;</span><br><span class="line">    if (root == nullptr)</span><br><span class="line">        return;</span><br><span class="line">    <span class="comment">// 访问优先级：根节点 -&gt; 左子树 -&gt; 右子树</span></span><br><span class="line">    vec<span class="selector-class">.push_back</span>(root-&gt;val);</span><br><span class="line">    <span class="built_in">preOrder</span>(root-&gt;left);</span><br><span class="line">    <span class="built_in">preOrder</span>(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 中序遍历 */</span></span><br><span class="line">void <span class="built_in">inOrder</span>(TreeNode *root) &#123;</span><br><span class="line">    if (root == nullptr)</span><br><span class="line">        return;</span><br><span class="line">    <span class="comment">// 访问优先级：左子树 -&gt; 根节点 -&gt; 右子树</span></span><br><span class="line">    <span class="built_in">inOrder</span>(root-&gt;left);</span><br><span class="line">    vec<span class="selector-class">.push_back</span>(root-&gt;val);</span><br><span class="line">    <span class="built_in">inOrder</span>(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 后序遍历 */</span></span><br><span class="line">void <span class="built_in">postOrder</span>(TreeNode *root) &#123;</span><br><span class="line">    if (root == nullptr)</span><br><span class="line">        return;</span><br><span class="line">    <span class="comment">// 访问优先级：左子树 -&gt; 右子树 -&gt; 根节点</span></span><br><span class="line">    <span class="built_in">postOrder</span>(root-&gt;left);</span><br><span class="line">    <span class="built_in">postOrder</span>(root-&gt;right);</span><br><span class="line">    vec<span class="selector-class">.push_back</span>(root-&gt;val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-3"><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 前序遍历 */</span></span><br><span class="line">void <span class="built_in">preOrder</span>(TreeNode root) &#123;</span><br><span class="line">    if (root == null)</span><br><span class="line">        return;</span><br><span class="line">    <span class="comment">// 访问优先级：根节点 -&gt; 左子树 -&gt; 右子树</span></span><br><span class="line">    list<span class="selector-class">.add</span>(root.val);</span><br><span class="line">    <span class="built_in">preOrder</span>(root.left);</span><br><span class="line">    <span class="built_in">preOrder</span>(root.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 中序遍历 */</span></span><br><span class="line">void <span class="built_in">inOrder</span>(TreeNode root) &#123;</span><br><span class="line">    if (root == null)</span><br><span class="line">        return;</span><br><span class="line">    <span class="comment">// 访问优先级：左子树 -&gt; 根节点 -&gt; 右子树</span></span><br><span class="line">    <span class="built_in">inOrder</span>(root.left);</span><br><span class="line">    list<span class="selector-class">.add</span>(root.val);</span><br><span class="line">    <span class="built_in">inOrder</span>(root.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 后序遍历 */</span></span><br><span class="line">void <span class="built_in">postOrder</span>(TreeNode root) &#123;</span><br><span class="line">    if (root == null)</span><br><span class="line">        return;</span><br><span class="line">    <span class="comment">// 访问优先级：左子树 -&gt; 右子树 -&gt; 根节点</span></span><br><span class="line">    <span class="built_in">postOrder</span>(root.left);</span><br><span class="line">    <span class="built_in">postOrder</span>(root.right);</span><br><span class="line">    list<span class="selector-class">.add</span>(root.val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-4"><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 前序遍历 */</span></span><br><span class="line">void <span class="built_in">PreOrder</span>(TreeNode? root) &#123;</span><br><span class="line">    if (root == null) return;</span><br><span class="line">    <span class="comment">// 访问优先级：根节点 -&gt; 左子树 -&gt; 右子树</span></span><br><span class="line">    list<span class="selector-class">.Add</span>(root.val!.Value);</span><br><span class="line">    <span class="built_in">PreOrder</span>(root.left);</span><br><span class="line">    <span class="built_in">PreOrder</span>(root.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 中序遍历 */</span></span><br><span class="line">void <span class="built_in">InOrder</span>(TreeNode? root) &#123;</span><br><span class="line">    if (root == null) return;</span><br><span class="line">    <span class="comment">// 访问优先级：左子树 -&gt; 根节点 -&gt; 右子树</span></span><br><span class="line">    <span class="built_in">InOrder</span>(root.left);</span><br><span class="line">    list<span class="selector-class">.Add</span>(root.val!.Value);</span><br><span class="line">    <span class="built_in">InOrder</span>(root.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 后序遍历 */</span></span><br><span class="line">void <span class="built_in">PostOrder</span>(TreeNode? root) &#123;</span><br><span class="line">    if (root == null) return;</span><br><span class="line">    <span class="comment">// 访问优先级：左子树 -&gt; 右子树 -&gt; 根节点</span></span><br><span class="line">    <span class="built_in">PostOrder</span>(root.left);</span><br><span class="line">    <span class="built_in">PostOrder</span>(root.right);</span><br><span class="line">    list<span class="selector-class">.Add</span>(root.val!.Value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="初始化代码-5"><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 前序遍历 */</span></span><br><span class="line">function <span class="built_in">preOrder</span>(root) &#123;</span><br><span class="line">    if (root === null) return;</span><br><span class="line">    <span class="comment">// 访问优先级：根节点 -&gt; 左子树 -&gt; 右子树</span></span><br><span class="line">    list<span class="selector-class">.push</span>(root.val);</span><br><span class="line">    <span class="built_in">preOrder</span>(root.left);</span><br><span class="line">    <span class="built_in">preOrder</span>(root.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 中序遍历 */</span></span><br><span class="line">function <span class="built_in">inOrder</span>(root) &#123;</span><br><span class="line">    if (root === null) return;</span><br><span class="line">    <span class="comment">// 访问优先级：左子树 -&gt; 根节点 -&gt; 右子树</span></span><br><span class="line">    <span class="built_in">inOrder</span>(root.left);</span><br><span class="line">    list<span class="selector-class">.push</span>(root.val);</span><br><span class="line">    <span class="built_in">inOrder</span>(root.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 后序遍历 */</span></span><br><span class="line">function <span class="built_in">postOrder</span>(root) &#123;</span><br><span class="line">    if (root === null) return;</span><br><span class="line">    <span class="comment">// 访问优先级：左子树 -&gt; 右子树 -&gt; 根节点</span></span><br><span class="line">    <span class="built_in">postOrder</span>(root.left);</span><br><span class="line">    <span class="built_in">postOrder</span>(root.right);</span><br><span class="line">    list<span class="selector-class">.push</span>(root.val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h1 id="排序算法">排序算法</h1><h2 id="桶排序">桶排序</h2><ul><li>桶排序简单理解就是用一组有序的容器(桶)，将原先无序的数组进行归类。这样按照有序的容器逐个输出，就将原先无序的数组变成有序的数组了。<br>初始数组： <code>5 5 2 6 6 3 9 7</code><br>准备有序容器从<code>1-10</code>共<code>10</code>个桶，分别将初始数组元素装入。<br>有序容器: <code>1</code> <code>2</code> <code>3</code> <code>4</code> <code>5</code> <code>6</code> <code>7</code> <code>8</code> <code>9</code> <code>10</code><br>装有个数: <code>0</code> <code>1</code> <code>1</code> <code>0</code> <code>2</code> <code>2</code> <code>1</code> <code>0</code> <code>1</code> <code>0</code><br>现在在按照有序容器的顺序输出(相当于按照容器顺序将桶内的数给拿出去)，就可以达到排序的结果。</li></ul><p>java代码如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        Scanner sc = <span class="built_in">new</span> Scanner(<span class="keyword">System</span>.<span class="keyword">in</span>);</span><br><span class="line">        <span class="type">int</span>[] tong = <span class="built_in">new</span> <span class="type">int</span>[<span class="number">1001</span>];</span><br><span class="line">        <span class="type">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            tong[sc.nextInt()] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;tong.length;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(tong[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.print(i);</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.print(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">                tong[i] -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>桶排序的时间复杂度是$O(M+N)$,这是一个很快速的排序算法,但是它特别浪费空间,试想一下如果你的数据范围是在0-2亿，但是你的数组实际上就只有5个数。你要准备的桶的数量是很多的。更进一步来说，当你需要排序的数据出现小数的时候，桶排序是很难做到。</p></blockquote><h2 id="冒泡排序">冒泡排序</h2><ul><li>基本思想:每次比较两个相邻的元素，如果它们的顺序错误就交换它们的位置。<br>代码思路： 你想想假设5个数字排序，你每次冒泡交换位置之后可以确定一个元素的唯一位置，那么当你执行完第4个时，第五个就确定了。所以外层循环为<code>n-1</code>次。内层循环就是为了冒泡而生,交换相邻位置(<code>j</code>和<code>j+1</code>) 这样冒泡排序就完成了。</li></ul><p>java代码如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        Scanner sc = <span class="built_in">new</span> Scanner(<span class="keyword">System</span>.<span class="keyword">in</span>);</span><br><span class="line">        <span class="type">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="type">int</span>[] maopao = <span class="built_in">new</span> <span class="type">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            maopao[i] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n-i<span class="number">-1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(maopao[j]&lt;maopao[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="type">int</span> tmp = maopao[j+<span class="number">1</span>];</span><br><span class="line">                    maopao[j+<span class="number">1</span>] = maopao[j];</span><br><span class="line">                    maopao[j] = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.print(maopao[i]);</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.print(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>冒泡排序的核心就是这个双层循环，时间复杂度是是 $O(N^2)$,当数据量特别大的时候，这个算法的时间复杂度是很大。</p></blockquote><h2 id="快速排序">快速排序</h2><p>快速排序是基于二分的思想，首先在这个序列中随便找一个数作为基准数M，为了将这个基准数移到某个位置k,使得左边的数都小于等于 M，右边的数都大于等于 M。</p><p>例如：“6 1 2 7 9 3 4 5 10 8”两端开始“探测”。先从右往左找一个小于 6 的数，再从左往右找一个大于 6 的数，然后交换它们。这里可以用两个变量 i 和 j，分别指向序列最左边和最右边让哨兵 j 先出动，这一点非常重要。哨兵 j 一步一步地向左挪动（即 j++），直到找到一个小于 6 的数停下来。接下来哨兵 i 再一步一步向右挪动（即 i++），直到找到一个大于 6的数停下来。最后哨兵 j 停在了数字 5 面前，哨兵 i 停在了数字 7 面前。现在交换二者位置。原序列变为 “6 1 2 <span class='p red'>5</span> 9 3 4 <span class='p red'>7</span> 10 8”<br>第一次交换结束。接下来哨兵 j 继续向左挪动（再次友情提醒，每次必须是哨兵j 先出发）。他发现了 4（比基准数 6 要小，满足要求）之后停了下来。哨兵 i 也继续向右挪动，他发现了 9（比基准数 6 要大，满足要求）之后停了下来。此时再次进行交换，交换之后的序列如下“6 1 2 5 <span class='p red'>4</span> 3 <span class='p red'>9</span> 7 10 8”<br>第二次交换结束，“探测”继续。哨兵 j 继续向左挪动，他发现了 3（比基准数 6 要小，满足要求）之后又停了下来。哨兵 i 继续向右移动，此时哨兵 i 和哨兵 j 相遇了，哨兵 i 和哨兵 j 都走到 3 面前。说明此时“探测”结束。我们将基准数 6 和 3 进行交换。交换之后的序列如下。“<span class='p red'>3</span> 1 2 5 4 <span class='p red'>6</span> 9 7 10 8 ”<br>这样我们就得到了一个满足要求的序列，此时以基准数 6 为分界点，6 左边的数都小于等于 6，6右边的数都大于等于 6。“3 1 2 5 4 <mark class="hl-label red">6</mark>  9 7 10 8 ”<br>对剩下两边重复上面这个过程，就得到了一个有序序列。<br>变化过程如下:</p><p>10<br>6 1 2 7 9 3 4 5 10 8</p><hr><p>3 1 2 5 4 6 9 7 10 8<br>2 1 3 5 4 6 9 7 10 8<br>1 2 3 5 4 6 9 7 10 8<br>1 2 3 5 4 6 9 7 10 8<br>1 2 3 4 5 6 9 7 10 8<br>1 2 3 4 5 6 9 7 10 8<br>1 2 3 4 5 6 8 7 9 10<br>1 2 3 4 5 6 7 8 9 10<br>1 2 3 4 5 6 7 8 9 10<br>1 2 3 4 5 6 7 8 9 10</p><hr><p>java代码如下：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">quicksort</span><span class="params">(<span class="type">int</span>[] quick,<span class="type">int</span> left,<span class="type">int</span> right)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(left&gt;right)<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = left,j = right,tmp=quick[left];</span><br><span class="line">    <span class="comment">//tmp为基准数</span></span><br><span class="line">    <span class="keyword">while</span>(i!=j)&#123;</span><br><span class="line">        <span class="comment">//先右后左</span></span><br><span class="line">        <span class="keyword">while</span>(quick[j]&gt;=tmp &amp;&amp; i&lt;j)j--;</span><br><span class="line">        <span class="keyword">while</span>(quick[i]&lt;=tmp &amp;&amp; i&lt;j)i++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//满足要求就交换位置</span></span><br><span class="line">        <span class="keyword">if</span>(i&lt;j)&#123;</span><br><span class="line">            <span class="type">int</span> a = quick[i];</span><br><span class="line">            quick[i] = quick[j];</span><br><span class="line">            quick[j] = a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最终将基准数归位,实际上就是找到了基准数最后的位置。</span></span><br><span class="line">    quick[left] = quick[i];</span><br><span class="line">    quick[i] = tmp;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//现在就相当于一遍完成了。对左右两个序列用相同方法。</span></span><br><span class="line">    <span class="built_in">quicksort</span>(quick,left,i<span class="number">-1</span>);<span class="comment">//左边序列</span></span><br><span class="line">    <span class="built_in">quicksort</span>(quick,i+<span class="number">1</span>,right);<span class="comment">//右边序列</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>快速排序之所以比较快，是因为相比冒泡排序，每次交换是跳跃式的。每次排序的时候设置一个基准点，将小于等于基准点的数全部放到基准点的左边，将大于等于基准点的数全部放到基准点的右边。这样在每次交换的时候就不会像冒泡排序一样只能在相邻的数之间进行交换，交换的距离就大得多了。因此总的比较和交换次数就少了，速度自然就提高了。<u>当然在最坏的情况下，仍可能是相邻的两个数进行了交换。因此快速排序的最差时间复杂度和冒泡排序是一样的，都是 $O(N^2)$，它的平均时间复杂度为 $O(NlogN)$。</u></p></blockquote><h1 id="滚动窗口"><a href="https://leetcode.cn/leetbook/read/illustration-of-algorithm/7fdcue/">滚动窗口</a></h1><blockquote><p>输入：target = 12<br>输出：[[3, 4, 5]]<br>解释：在上述示例中，存在一个连续正整数序列的和为 12，为 [3, 4, 5]。</p></blockquote><p>本题可以使用求和公式求解，但是我想要记录一下另外一种方法，<em><strong>滑动窗口</strong></em>。</p><p>思路如下：传入<code>target</code>，找到一个数组求和等于它。我们可以假设一个一个小窗口<br>窗口初始位置<code>i=1</code>,末尾位置为<code>j=2</code>,窗口求和<code>sum=3</code>。<br>当<code>i&lt;j</code>时不断循环，一开始<code>sum=3 &lt; target</code>。那我们就让<code>j++</code>,相当于窗口扩大，<code>sum += j </code>为<code>6</code> 此时<code>sum &lt; target</code>,重复刚刚的过程。<code>sum=10 &lt; target</code>,当<code>sum=15 &gt;target </code> 让窗口缩小，左侧移动，<code>i++</code>,此时窗口<code>sum</code>减小，<code>sum -= i</code> 为<code>14</code>，重复上述逻辑，<code>i++ sum-=i</code> 为<code>12</code>，那我们就找到了可以组成<code>target</code>数组的首相和尾项。最后组合数组就完成了。</p><p>Java代码如下：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span>[][] fileCombination(<span class="built_in">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">int</span> i=<span class="number">1</span>,j=<span class="number">2</span>,<span class="keyword">sum</span>=<span class="number">3</span>;</span><br><span class="line">        List&lt;<span class="built_in">int</span>[]&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">sum</span>==target)&#123;</span><br><span class="line">                <span class="built_in">int</span>[] ans = <span class="keyword">new</span> <span class="built_in">int</span>[j-i+<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">for</span>(<span class="built_in">int</span> k=i;k&lt;=j;k++)</span><br><span class="line">                    ans[k-i] = k;</span><br><span class="line">                res.add(ans);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">sum</span>&gt;=target)&#123;</span><br><span class="line">                <span class="keyword">sum</span> -= i;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                j++;</span><br><span class="line">                <span class="keyword">sum</span>+=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toArray(<span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">0</span>][]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>b站专栏视频爬取</title>
      <link href="/posts/24b9c3a5/"/>
      <url>/posts/24b9c3a5/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面">写在前面</h1><p>在使用和分享此爬虫代码时，请务必遵守以下限制和建议，并减少对目标服务器的负担：</p><ol><li><p><strong>遵循网站规定：</strong> 请始终遵循被爬取网站的使用条款、隐私政策以及<code>robots.txt</code>文件中的规定。不得违反网站规定的任何规则。</p></li><li><p><strong>合法用途：</strong> 此爬虫代码仅用于合法、合理的用途，如数据收集、分析或学术研究等。不得将其用于非法用途，包括但不限于侵犯隐私、版权或其他法律权益。</p></li><li><p><strong>适度请求频率：</strong> 设置合理的请求频率，避免对目标服务器造成过度负担。频繁的请求可能导致被封禁或其他限制。</p></li><li><p><strong>尊重隐私：</strong> 不得通过爬虫获取或传播任何用户敏感信息。请尊重被爬取网站和用户的隐私权。</p></li><li><p><strong>不要滥用资源：</strong> 避免滥用带宽和其他资源。在下载大量数据时，谨慎使用服务器资源，以确保公平共享和减少不必要的开销。</p></li><li><p><strong>不要绕过登录限制：</strong> 不得通过绕过网站的登录限制或其他访问控制机制，以确保不违反网站的安全策略。</p></li></ol><p>请注意，违反这些限制可能会导致法律责任，打击作者的热情，对爬虫作者和使用者都会产生负面影响。在使用和分享爬虫代码时，请谨慎考虑其合法性和合规性，以维护互联网的健康和稳定。</p><h1 id="使用说明">使用说明</h1><ol><li>有一定的<code>python</code>基础。</li><li>知道如何获取自己的<code>Cookie</code></li><li>已经安装了相关库，配置好了相关环境</li></ol><h1 id="RequestUrl">RequestUrl</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> uniform</span><br><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> get</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_url</span>(<span class="params">url,cookie=<span class="string">&#x27;&#x27;</span>,Referer=<span class="string">&#x27;https://www.bilibili.com/&#x27;</span></span>):</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 Edg/121.0.0.0&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>:Referer,</span><br><span class="line">        <span class="string">&#x27;Origin&#x27;</span>:<span class="string">&#x27;https://www.bilibili.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Cookie&#x27;</span>: cookie <span class="comment">#填你自己的</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = get(url, headers=headers, timeout=<span class="number">3</span>)</span><br><span class="line">        sleep(uniform(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> error:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;url&#125;</span> 请求发生错误: <span class="subst">&#123;error&#125;</span>\n&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">&#x27;.\\log&#x27;</span>) == <span class="literal">False</span>:</span><br><span class="line">            os.makedirs(<span class="string">&#x27;.\\log&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;.\\log\\error.txt&quot;</span>, mode=<span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(<span class="string">f&quot;<span class="subst">&#123;url&#125;</span> 请求发生错误: <span class="subst">&#123;error&#125;</span>\n&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="b站专栏视频爬取">b站专栏视频爬取</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> RequestUrl <span class="keyword">import</span> get_url</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_infor</span>(<span class="params">url</span>):</span><br><span class="line">    resp = get_url(url)</span><br><span class="line">    base_url = url.split(<span class="string">&#x27;?&#x27;</span>)[<span class="number">0</span>] + <span class="string">&#x27;?p=&#x27;</span></span><br><span class="line">    pages = <span class="string">&#x27;&#123;&#x27;</span> + re.findall(<span class="string">&#x27;&quot;pages&quot;:\[.*?]&#x27;</span>,resp.text,re.S)[<span class="number">0</span>] + <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">    pages = json.loads(pages)</span><br><span class="line">    html = etree.HTML(resp.text)</span><br><span class="line">    name = html.xpath(<span class="string">&#x27;/html/body/div[2]/div[2]/div[1]/div[1]/h1/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    name = re.sub(<span class="string">r&#x27;\W+&#x27;</span>, <span class="string">&#x27;&#x27;</span>, name).replace(<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">f&#x27;.\\<span class="subst">&#123;name&#125;</span>&#x27;</span>)==<span class="literal">False</span>:</span><br><span class="line">        os.makedirs(<span class="string">f&#x27;.\\<span class="subst">&#123;name&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    remove = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> pages[<span class="string">&#x27;pages&#x27;</span>]:</span><br><span class="line">        title = i[<span class="string">&#x27;part&#x27;</span>]</span><br><span class="line">        remove.append(title)</span><br><span class="line">        page_url = base_url + <span class="built_in">str</span>(i[<span class="string">&#x27;page&#x27;</span>])</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(page_url,title)</span><br><span class="line">        download(page_url,title,name)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;i[<span class="string">&quot;page&quot;</span>]&#125;</span> is ok!&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> remove:</span><br><span class="line">        Clear_down(i,name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">page_url,title,name</span>):</span><br><span class="line"></span><br><span class="line">    response = get_url(page_url)</span><br><span class="line">    result = re.findall(<span class="string">r&#x27;&lt;script&gt;window.__playinfo__=(.*?)&lt;/script&gt;&#x27;</span>, response.text)[<span class="number">0</span>]</span><br><span class="line">    data = json.loads(result)</span><br><span class="line">    <span class="comment"># 获取音频和视频的URL</span></span><br><span class="line">    <span class="comment"># print(data)</span></span><br><span class="line">    audio_url = data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;dash&#x27;</span>][<span class="string">&#x27;audio&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;baseUrl&#x27;</span>]</span><br><span class="line">    video_url = data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;dash&#x27;</span>][<span class="string">&#x27;video&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;baseUrl&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;.\\<span class="subst">&#123;name&#125;</span>\\<span class="subst">&#123;title&#125;</span>&#x27;</span> + <span class="string">&#x27;.mp3&#x27;</span>, mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        audio_content = get_url(url=audio_url).content</span><br><span class="line">        f.write(audio_content)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;音频下载完成&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;.\\<span class="subst">&#123;name&#125;</span>\\<span class="subst">&#123;title&#125;</span>&#x27;</span> + <span class="string">&#x27;.mp4&#x27;</span>, mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        video_content = get_url(url=video_url)</span><br><span class="line">        f.write(video_content.content)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;视频下载完成&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;下载完成,正在为你合成文件&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    merge_command = <span class="string">f&#x27;ffmpeg -loglevel quiet -i .\\<span class="subst">&#123;name&#125;</span>\\<span class="subst">&#123;title&#125;</span>.mp4 -i .\\<span class="subst">&#123;name&#125;</span>\\<span class="subst">&#123;title&#125;</span>.mp3 -c:v copy -c:a aac -strict experimental .\\<span class="subst">&#123;name&#125;</span>\\<span class="subst">&#123;title&#125;</span>output.mp4&#x27;</span></span><br><span class="line">    subprocess.run(merge_command, shell=<span class="literal">True</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;音视频合并完成&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Clear_down</span>(<span class="params">title,name</span>):</span><br><span class="line">    os.remove(<span class="string">f&#x27;.\\<span class="subst">&#123;name&#125;</span>\\<span class="subst">&#123;title&#125;</span>.mp4&#x27;</span>)</span><br><span class="line">    os.remove(<span class="string">f&#x27;.\\<span class="subst">&#123;name&#125;</span>\\<span class="subst">&#123;title&#125;</span>.mp3&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>未使用多线程爬取，当分批视频特别多的时候爬取效率低下。<br>可以使用我的多线程模板加快速度。</p></blockquote><blockquote><p>其中<code>download</code>适用于b站大多数视频的下载。<code>title</code>为下载文件的文件名，<code>name</code>为将下载好的文件放到名为<code>name</code>的文件夹下。方便后续管理。</p></blockquote><div class="note warning flat"><p>像是拜年祭类似的视频，使用<code>download</code>是无法下载的，那个涉及到w_rid的解密</p></div>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
          <category> 非教程 </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#核心技术</title>
      <link href="/posts/e2aead40/"/>
      <url>/posts/e2aead40/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-窗体应用程序设计">Windows 窗体应用程序设计</h1><h2 id="添加一个windows窗体">添加一个windows窗体</h2><ul><li>在c#文件下直接点击添加–&gt; windows窗体 ，可以直接创建windows窗体</li><li><code>Application.Run(new 窗口名());</code> 启动窗体</li></ul><h2 id="窗体属性">窗体属性</h2><p><em><strong>FromBorderStyle</strong></em></p><table><thead><tr><th style="text-align:center">属性值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">Fixed3D</td><td style="text-align:center">固定的三维边框</td></tr><tr><td style="text-align:center">FixedDialog</td><td style="text-align:center">固定的对话框样式的粗边框</td></tr><tr><td style="text-align:center">FixedSingel</td><td style="text-align:center">固定的单行边框</td></tr><tr><td style="text-align:center">FixedToolWindow</td><td style="text-align:center">不可调整大小的工具窗口边框</td></tr><tr><td style="text-align:center">None</td><td style="text-align:center">无边框</td></tr><tr><td style="text-align:center">Sizable</td><td style="text-align:center">可调整大小的边框</td></tr><tr><td style="text-align:center">sizableToolWindow</td><td style="text-align:center">可调整大小的工具窗口边框</td></tr></tbody></table><p><em><strong>StartPosition</strong></em></p><table><thead><tr><th style="text-align:center">属性值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">CenterParent</td><td style="text-align:center">在其父窗体居中</td></tr><tr><td style="text-align:center">CenterScreen</td><td style="text-align:center">在当前显示窗口居中，其尺寸在窗体大小中指定</td></tr><tr><td style="text-align:center">Manual</td><td style="text-align:center">位置由Location属性确定</td></tr><tr><td style="text-align:center">WindowsDefaultBounds</td><td style="text-align:center">定位在windows默认位置，其边界由windows默认决定</td></tr><tr><td style="text-align:center">WindowsDefaultLocation</td><td style="text-align:center">定位在windows默认位置，其尺寸在窗体大小中指定</td></tr></tbody></table><h2 id="窗体的显示和隐藏">窗体的显示和隐藏</h2><ul><li><code>窗体.show()</code> 显示窗体</li><li><code>窗体.Hide()</code> 隐藏窗体</li></ul><h2 id="窗体的事件">窗体的事件</h2><p><em><strong>其实从属性窗口双击进入直接编写就可以了，方便简单。</strong></em></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (MessageBox.Show(<span class="string">&quot;是否查看窗体！&quot;</span>, <span class="string">&quot;&quot;</span>, MessageBoxButtons.YesNo, MessageBoxIcon.Information) == DialogResult.Yes)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;点击了窗体&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    MessageBox.Show(<span class="string">&quot;点击了窗体&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_FormClosing</span>(<span class="params"><span class="built_in">object</span> sender, FormClosingEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    DialogResult dr = MessageBox.Show(<span class="string">&quot;是否关闭窗体&quot;</span>,<span class="string">&quot;提示&quot;</span>,MessageBoxButtons.YesNo, MessageBoxIcon.Warning);</span><br><span class="line">    <span class="keyword">if</span>(dr == DialogResult.Yes)</span><br><span class="line">    &#123;</span><br><span class="line">        e.Cancel = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        e.Cancel= <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MDI窗体">MDI窗体</h2><ul><li>多文档界面，一个界面显示多个文档。</li></ul><h3 id="设置MDI窗体">设置MDI窗体</h3><ol><li>设置父窗体 -&gt;在属性面板找到 <emp>IsMdiContainer</emp> 将<code>false</code>改为<code>True</code></li><li><code>窗体.MdiParent = this;</code> 将目标窗体设置为子窗体。</li></ol><h4 id="排列MDI子窗体">排列MDI子窗体</h4><ol><li>在菜单栏中选择“视图”命令 ，再选择“工具箱”命令，就会弹出工具箱。选择MenuStrip控件，此时就会在窗体中出现一排菜单栏，并依次输入“加载窗体”、“层叠排列”、“水平平铺”、“垂直平铺”、“关闭”。</li><li>双击你输入的菜单它会自动帮你生成函数。在加载窗体中你可以这样写：</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> 加载子窗体ToolStripMenuItem_Click(<span class="built_in">object</span> sender, EventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">    Form2 form2 = <span class="keyword">new</span> Form2();</span><br><span class="line">    form2.MdiParent = <span class="keyword">this</span>;</span><br><span class="line">    form2.Show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>设置水平平铺等</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private void 水平平铺<span class="built_in">ToolStripMenuItem_Click_1</span>(object sender, EventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">LayoutMdi</span>(MdiLayout.TileVertical);</span><br><span class="line">&#125;</span><br><span class="line">其他的方法是一样的，就是改一下MdiLayout.你要设置的方法</span><br></pre></td></tr></table></figure><h1 id="Windows窗体应用程序常用控件">Windows窗体应用程序常用控件</h1><h2 id="添加控件方法">添加控件方法</h2><ul><li>添加控件有2种方法：</li></ul><ol><li>通过工具箱双击直接添加(左上角视图里面有工具箱)</li><li>编程方式添加。  代码如下：<br><figure class="highlight plaintext"><figcaption><span>void button1_Click(object sender, EventArgs e)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    TextBox textBox = new TextBox();</span><br><span class="line">    textBox.Location = new Point(25, 25);</span><br><span class="line">    this.Controls.Add(textBox);</span><br><span class="line">&#125;</span><br><span class="line">为点击按钮事件添加TextBox控件</span><br></pre></td></tr></table></figure></li></ol><h2 id="文本类控件">文本类控件</h2><h3 id="Label-设置标签文本">Label 设置标签文本</h3><p><code>Text</code>属性用于设置控件上显示的文本。可以直接在属性面板(Text)去设置要展示的内容，该内容用户不能编辑。</p><h3 id="Button-按钮控件">Button 按钮控件</h3><ul><li>该控件允许用户通过点击来执行相关操作。它既可以显示文本，也可以显示图像。</li><li>响应按键的点击事件<code>Click</code></li><li>Button 控件<code>AcceptButton</code>属性用于设置窗体的“接受”按钮，设置后用户每次按下 <emp>回车键</emp> 都相当于点击按钮。</li><li>Button 控件<code>CancelButton</code>属性用于设置窗体的“取消”按钮，设置后用户每次按下 <emp>Esc</emp> 键都相当于点击按钮。</li><li>上面两个属性都在窗口属性中的杂项中(不同版本可能不一样)</li></ul><h3 id="TextBox-控件">TextBox 控件</h3><ul><li>创建只读文本框<ol><li><code>textBox1.ReadOnly = true;</code></li><li>在属性栏中找到<code>ReadOnly</code>，将其改为<code>true</code></li></ol></li><li>创建密码文本框<ol><li><code>PasswordChar</code>属性可以在文本框中显示密码字符，比如将密码显示为 <code>*,@,# %</code> 等等。</li><li><code>UseSystemPasswordChar</code>属性为<code>true</code>时，输入密码文本框显示密码为 <code>*</code></li></ol></li><li>创建多行文本框<ul><li>一般情况下TextBox只允许输入单行数据，如果想要输入多行数据要将其<code>Multiline</code>属性设置为<code>true</code>即可。</li></ul></li><li>突出显示文本<ul><li>通过<code>SelectionStart</code>属性和<code>SelectionLength</code>属性来设置要突出显示的文本。前者表示突出显示的开头位置，后者表示突出显示的长度。</li></ul></li><li>响应文本框内容更改事件(推荐代码设置)<ul><li>通过事件<code>TextChanged</code>来设置文本变动的响应事件。</li></ul></li></ul><h3 id="RichTextBox-控件">RichTextBox 控件</h3><blockquote><p>用于显示、输入和操作带有格式的文本，还可以显示字体颜色和链接</p></blockquote><ol><li><p>显示滚动条</p><ul><li><code>Multiline</code>属性设置为<code>true</code>即可。</li><li><code>ScrollBars</code>属性可以设置如何显示滚动条。</li></ul><table><thead><tr><th style="text-align:center">属性值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">Both</td><td style="text-align:center">文本超过控件宽度或长度时，显示水平滚动条、垂直滚动条，或者两个都显示</td></tr><tr><td style="text-align:center">None</td><td style="text-align:center">不显示任何类型的滚动条</td></tr><tr><td style="text-align:center">Horizontal</td><td style="text-align:center">文本超过控件宽度时，显示水平滚动条(WordWrap为false有效)</td></tr><tr><td style="text-align:center">Vertical</td><td style="text-align:center">文本超过控件高度时，显示垂直滚动条</td></tr><tr><td style="text-align:center">ForcedHorizontal</td><td style="text-align:center">WordWrap为false时，显示水平规定条。文本未超过控件宽度时，滚动条为浅灰色</td></tr><tr><td style="text-align:center">ForcedVertical</td><td style="text-align:center">始终显示垂直滚动条。文本未超过控件长度时，滚动条为浅灰色</td></tr><tr><td style="text-align:center">ForcedBoth</td><td style="text-align:center">始终显示垂直滚动条。WordWrap属性为false时，显示水平滚动条。文本未超过控件宽度或长度时，二者都为灰色</td></tr></tbody></table><blockquote><p><code>WordWrap</code> 属性用于设置多行文本框控件是否要在必要时自动换行。当为<code>true</code>,不论<code>ScrollBars</code>是什么都不会显示水平滚动条。</p></blockquote></li><li><p>字体设置</p></li></ol><ul><li>可以直接通过属性来调整</li><li>也可以通过代码调整，如下:</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">richTexeBox1.SelectionFont</span> = new Font(<span class="string">&quot;楷体&quot;</span>,<span class="number">12</span>,FontStyle.Bold)<span class="comment">;</span></span><br><span class="line"><span class="attr">richTexeBox1.SelectionColor</span> = system.Drawing.Color.Blue<span class="comment">;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>文本含有超链接</li></ol><blockquote><p>通过<code>LinkClicked</code>事件编写，代码如下：</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private <span class="type">void</span> richTextBox1_LinkClicked(<span class="keyword">object</span> sender, LinkClickedEventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">Diagnostics</span>.Process.<span class="keyword">Start</span>(e.LinkText);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><mark class="hl-label red">使用此方法超链接必须是http://开头</mark> <ol start="4"><li>设置控件中段落格式</li></ol><ul><li>通过<code>SelectionBullet</code> 属性，可将选定段落位置设置为项目符号列表格式，通过<code>SelectionIndent</code>和<code>SelectionHangingIndent</code>属性，可设置左右边缘缩进。</li></ul><h2 id="选择类控件">选择类控件</h2><p>选择类控件主要包含<code>ComboBox</code>控件(下拉组合框控件),<code>CheckBox</code>控件(复选框控件)、<code>RaduoButton</code>控件(单选按钮控件)、<code>NumericUpDown</code>控件(数值选择控件)和<code>ListBox</code>控件(列表控件)</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#基础语法</title>
      <link href="/posts/4ff615c/"/>
      <url>/posts/4ff615c/</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型">数据类型</h1><h2 id="整数类型">整数类型</h2><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">范围</th></tr></thead><tbody><tr><td style="text-align:center">sbyte</td><td style="text-align:center">8位有符号整数</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">16位有符号整数</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">32位有符号整数</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">64位有符号整数</td></tr><tr><td style="text-align:center">byte</td><td style="text-align:center">8位无符号整数</td></tr><tr><td style="text-align:center">ushort</td><td style="text-align:center">16位无符号整数</td></tr><tr><td style="text-align:center">uint</td><td style="text-align:center">32位无符号整数</td></tr><tr><td style="text-align:center">ulong</td><td style="text-align:center">64位无符号整数</td></tr></tbody></table><h2 id="浮点类型">浮点类型</h2><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">范围</th></tr></thead><tbody><tr><td style="text-align:center">float</td><td style="text-align:center">精确到6~9位数</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">精确到15~17位数</td></tr><tr><td style="text-align:center">decimal</td><td style="text-align:center">精确到28~29位数</td></tr></tbody></table><blockquote><p>一般情况包含小数点的数值会被默认为double类型，在数值后面添上<mark class="hl-label red">f或F</mark> 可以强制类型转化为float</p></blockquote><div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">在c#中布尔类型的值只能是true和false（和java类似）,不能将其他值指定给布尔类型变量，也不能将它转化为其他类型,如下面这个语句就是错误的</p></div><blockquote><ul><li>bool x = 520;</li></ul></blockquote><h2 id="枚举类型">枚举类型</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">enum&#123;</span><br><span class="line">    枚举值的标识名称 <span class="operator">=</span> 对应的整数数值，</span><br><span class="line">    ...</span><br><span class="line">    枚举值的标识名称 <span class="operator">=</span> 对应的整数数值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="强制类型转化">强制类型转化</h2><blockquote><p>这个和java基本类似，<strong>（强制转换类型）对象</strong></p></blockquote><h1 id="运算符">运算符</h1><ul><li>“按位与”运算 &amp;</li><li>“按位或”运算 |</li><li>“按位取反”运算  ~</li><li>“按位异或”运算 ^</li><li>“移位操作” &gt;&gt; &lt;&lt; <em><strong>用来进行2的乘除运算挺好用的</strong></em></li><li>is 运算符 <em><strong>判断变量是否为指定类型</strong></em></li><li><span class='p red'>条件运算符 (条件式?成立执行:不成立执行)</span>  <strong>这个还是很好用的</strong></li><li>typeof 运算符 获取对象类型</li></ul><h1 id="Char类-字符">Char类 字符</h1><h2 id="常用方法及其说明">常用方法及其说明</h2><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">IsControl()</td><td style="text-align:center">Unicode字符是否为控制字符类别</td></tr><tr><td style="text-align:center">IsDigit()</td><td style="text-align:center">Unicode字符是否为十进制数字类别</td></tr><tr><td style="text-align:center">IsHighSurrogate()</td><td style="text-align:center">指定的 Char 对象是否为高代理项</td></tr><tr><td style="text-align:center">IsLetter()</td><td style="text-align:center">指定的 Unicode 字符是否属于字母类别</td></tr><tr><td style="text-align:center">IsLetterOrDigit()</td><td style="text-align:center">指定的 Unicode 字符是属于字母类别还是属于十进制数字类别</td></tr><tr><td style="text-align:center">IsLower()</td><td style="text-align:center">指定的 Unicode 字符是否属于小写字母类别</td></tr><tr><td style="text-align:center">IsLowSurrogate()</td><td style="text-align:center">指定的 Char 对象是否为低代理项</td></tr><tr><td style="text-align:center">IsNumber()</td><td style="text-align:center">指定的 Unicode 字符是否属于数字类别</td></tr><tr><td style="text-align:center">IsPunctuation()</td><td style="text-align:center">指定的 Unicode 字符是否属于标点符号</td></tr><tr><td style="text-align:center">IsSeparator()</td><td style="text-align:center">指定的 Unicode 字符是否属于分隔符类别</td></tr><tr><td style="text-align:center">IsSurrogate()</td><td style="text-align:center">指定的 Unicode 字符是否属于代理项字符类别</td></tr><tr><td style="text-align:center">IsSurrogatePair()</td><td style="text-align:center">两个指定的 Char 对象是否形成代理项对</td></tr><tr><td style="text-align:center">IsSymbol()</td><td style="text-align:center">指定的 Unicode 字符是否属于符号字符类别</td></tr><tr><td style="text-align:center">IsUpper()</td><td style="text-align:center">指定的 Unicode 字符是否属于大写字母类别</td></tr><tr><td style="text-align:center">IsWhiteSpace()</td><td style="text-align:center">指定的 Unicode 字符是否属于空白类别</td></tr><tr><td style="text-align:center">Parse()</td><td style="text-align:center">将指定字符串的值转换为它的等效 Unicode 字符</td></tr><tr><td style="text-align:center">ToLower()</td><td style="text-align:center">将 Unicode 字符的值转换为它的小写等效项</td></tr><tr><td style="text-align:center">ToUpper()</td><td style="text-align:center">将 Unicode 字符的值转换为它的大写等效项</td></tr><tr><td style="text-align:center">ToLowerInvariant()</td><td style="text-align:center">使用固定区域性的大小写规则，将 Unicode 字符的值转换为其小写等效项</td></tr><tr><td style="text-align:center">ToString()</td><td style="text-align:center">将此实例的值转换为等效的字符串表示</td></tr><tr><td style="text-align:center">ToUpperInvariant()</td><td style="text-align:center">使用固定区域性的大小写规则，将 Unicode 字符的值转换为其大写等效项</td></tr><tr><td style="text-align:center">TryParse()</td><td style="text-align:center">将指定字符串的值转换为它的等效 Unicode 字符</td></tr></tbody></table><h2 id="转义字符">转义字符</h2><table><thead><tr><th style="text-align:center">转义字符</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">\n</td><td style="text-align:center">回车换行</td></tr><tr><td style="text-align:center">\t</td><td style="text-align:center">横向跳到下一制表位</td></tr><tr><td style="text-align:center">\b</td><td style="text-align:center">退格</td></tr><tr><td style="text-align:center">\r</td><td style="text-align:center">按回车建</td></tr><tr><td style="text-align:center">\f</td><td style="text-align:center">换页</td></tr></tbody></table><h1 id="String-类-字符串">String 类 字符串</h1><blockquote><p>使用 <mark class="hl-label red">==</mark>  可以判断两个字符串是否完全一致。是否相同，不是是否相等</p></blockquote> <span class='p red h1'>这个和java是完全不一样的，在java中要使用equals()，当然在C#中也可以使用这个函数去判断是否相同</span><h2 id="Compare-String-A-String-B-bool-ignorCase-比大小">Compare(String A,String B,bool ignorCase) 比大小</h2><blockquote><p>比较两个字符串的大小，若A&gt;B,return 1;反之 return -1，二者相等，return 0。ignorCase 表示比较时是否忽略大小写</p></blockquote><h2 id="CompareTo-String-B-比大小">CompareTo(String B) 比大小</h2><blockquote><p>和上面差不多</p></blockquote><h2 id="Format-格式化输出">Format() 格式化输出</h2><ul><li>Format(String format,object obj);</li></ul><table><thead><tr><th style="text-align:center">格式符(大小写都可以)</th><th style="text-align:center">名称</th></tr></thead><tbody><tr><td style="text-align:center">c</td><td style="text-align:center">货币</td></tr><tr><td style="text-align:center">d</td><td style="text-align:center">整型</td></tr><tr><td style="text-align:center">e</td><td style="text-align:center">科学计数法</td></tr><tr><td style="text-align:center">f</td><td style="text-align:center">定点</td></tr><tr><td style="text-align:center">n</td><td style="text-align:center">数字</td></tr><tr><td style="text-align:center">p</td><td style="text-align:center">百分比</td></tr><tr><td style="text-align:center">x</td><td style="text-align:center">十六进制</td></tr></tbody></table><ul><li>日期控制</li></ul><table><thead><tr><th style="text-align:center">格式符(注意大小写)</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">d</td><td style="text-align:center">YYYY-MM-DD</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">YYYY年MM月dd日</td></tr><tr><td style="text-align:center">t</td><td style="text-align:center">hh:mm</td></tr><tr><td style="text-align:center">T</td><td style="text-align:center">hh:mm:ss</td></tr><tr><td style="text-align:center">f</td><td style="text-align:center">YYYY-MM-DD hh:mm</td></tr><tr><td style="text-align:center">F</td><td style="text-align:center">YYYY年MM月dd日 hh:mm:ss</td></tr><tr><td style="text-align:center">g</td><td style="text-align:center">YYYY-MM-DD hh:mm (可排序)</td></tr><tr><td style="text-align:center">G</td><td style="text-align:center">YYYY-MM-DD hh:mm:ss (可排序)</td></tr><tr><td style="text-align:center">M或m</td><td style="text-align:center">MM月dd日</td></tr><tr><td style="text-align:center">Y或y</td><td style="text-align:center">YYYY年MM月</td></tr></tbody></table><h2 id="Substring-int-start-int-length-截取字符串">Substring(int start,int length) 截取字符串</h2><blockquote><p>若 length大于字符串本身的长度，则从start的位置开始截取全部</p></blockquote><h2 id="Split-params-char-a-分割字符串">Split(params char[] a ) 分割字符串</h2><blockquote><p>用过py的应该都知道</p></blockquote><h2 id="Insert-int-start-String-value-插入字符串">Insert(int start,String value) 插入字符串</h2><blockquote><p>指定位置插入字符串</p></blockquote><h2 id="PadLeft-int-totalWidth-char-paddingChar-左侧填充字符串">PadLeft(int totalWidth,char paddingChar) 左侧填充字符串</h2><blockquote><p>左侧填充字符串到你指定的长度，但是切记这个长度是总长度。<br>将 Left -&gt; Right 就是右侧</p></blockquote><h2 id="Remove-int-start-int-count-删除指定位置字符串">Remove(int start,int count) 删除指定位置字符串</h2><blockquote><p>count可以不写，不写默认在指定位置后全删<br><em><strong><span class='p red'>count > 0</span></strong></em></p></blockquote><h2 id="Copy-String-str-复制字符串">Copy(String str) 复制字符串</h2><blockquote><p>a = String.Copy(str);<br>将str复制给a</p></blockquote><h2 id="CopyTo-int-start-char-destination-int-destinationIndex-int-count">CopyTo(int start, char[]destination,int destinationIndex,int count)</h2><p>举一个例子：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">    string str1 = <span class="string">&quot;举一个栗子&quot;</span>;</span><br><span class="line">    <span class="built_in">char</span>[] <span class="built_in">str</span> = <span class="keyword">new</span> <span class="built_in">char</span>[<span class="number">5</span>];</span><br><span class="line">    str1.CopyTo(<span class="number">3</span>, <span class="built_in">str</span>, <span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">    Console.WriteLine(<span class="built_in">str</span>);</span><br><span class="line">    Console.ReadLine();</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">3</span> 表示从str1的下标<span class="number">3</span>开始复制</span><br><span class="line"><span class="built_in">str</span> 表示要复制给的对象</span><br><span class="line"><span class="number">0</span> 表示复制的值从<span class="built_in">char</span>数组的<span class="number">0</span>号位置开始</span><br><span class="line"><span class="number">2</span> 表示复制str1的长度为<span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="Replace-a-b-替换字符">Replace(a,b) 替换字符</h2><blockquote><p>将 a -&gt; b</p></blockquote><h1 id="StringBuilder-可变字符串类">StringBuilder 可变字符串类</h1><blockquote><p>要是学过java对这两个的区别就很熟悉了，都大差不差<br>当你需要频繁改变字符串时，stringBuilder的效率明显高于string，string是不可变长的。</p></blockquote><h1 id="正则表达式">正则表达式</h1><ul><li>爬虫必学，十分好用</li></ul><h2 id="行定位符">行定位符</h2><ul><li>^ 表示行的开始， $ 表示行的结束</li></ul><h2 id="元字符">元字符</h2><table><thead><tr><th style="text-align:center">元字符</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">.</td><td style="text-align:center">匹配除了换行符以外的任意字符</td></tr><tr><td style="text-align:center">\w</td><td style="text-align:center">匹配字母，数字，下划线或者汉字</td></tr><tr><td style="text-align:center">\s</td><td style="text-align:center">匹配任意空白字符</td></tr><tr><td style="text-align:center">\d</td><td style="text-align:center">匹配数字</td></tr><tr><td style="text-align:center">\b</td><td style="text-align:center">匹配单词的开始或者结束</td></tr></tbody></table><h2 id="限定符">限定符</h2><table><thead><tr><th style="text-align:center">限定符</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">?</td><td style="text-align:center">匹配前面的字符零次或者一次</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">匹配前面的字符一次或者多次</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">匹配前面的字符零次或者一次</td></tr><tr><td style="text-align:center">{n}</td><td style="text-align:center">匹配前面的字符n次</td></tr><tr><td style="text-align:center">{n,}</td><td style="text-align:center">匹配前面的字符<mark class="hl-label red">最少</mark> n次</td></tr><tr><td style="text-align:center">{n,m}</td><td style="text-align:center">匹配前面的字符<mark class="hl-label red">最少</mark> n次，<mark class="hl-label red">最多</mark> m次</td></tr></tbody></table><div class="note success simple"><p>如果想要匹配任意<mark class="hl-label red">一个</mark> 汉字，可以使用[\u4e00-\u9fa5]<br>如果想要匹配连续<mark class="hl-label red">多个</mark> 汉字，可以使用[\u4e00-\u9fa5]+</p></div><h2 id="排除字符">排除字符</h2><ul><li><mark class="hl-label red">^</mark>  也可以表示排除</li></ul><p>如：<code>[^a-zA-Z]</code> 匹配非字母字符</p><h2 id="举一个综合例子">举一个综合例子</h2><ul><li>身份证号码匹配</li></ul><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(^\d&#123;15&#125;$)|<span class="string">(^\d&#123;18&#125;$)</span>|<span class="string">(^\d&#123;17&#125;)(\d</span>|<span class="string">X</span>|<span class="string">x)$</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span>|<span class="string"> 表示或,在正则表达式中可以使用逻辑符号</span></span><br></pre></td></tr></table></figure><h2 id="C-中使用正则表达式">C#中使用正则表达式</h2><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">IsMatch()</td><td style="text-align:center">正则表达式是否找到匹配项</td></tr><tr><td style="text-align:center">Match()</td><td style="text-align:center">返回正则表达式查找对象</td></tr><tr><td style="text-align:center">Matchs()</td><td style="text-align:center">多次匹配</td></tr><tr><td style="text-align:center">Replace()</td><td style="text-align:center">按照正则表达式替换</td></tr><tr><td style="text-align:center">Split()</td><td style="text-align:center">按照正则表达式分割</td></tr></tbody></table><h1 id="数组">数组</h1><ul><li>一维数组的定义和java大差不差，关键在于二维数组的定义</li><li><code>type[,] name = new type[,]</code></li><li><code> type[][] name = new type[][]</code> java用的这个</li><li>初始化数组和java一样通过 <code>&quot; &#123; &#125; &quot;</code> 就可以完成初始化</li></ul><h2 id="遍历数组">遍历数组</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">foreach</span>(<span class="class"><span class="keyword">type</span> a in arrName)&#123;</span></span><br><span class="line"><span class="class">  <span class="type">Console</span>.<span class="type">WriteLine(a)</span>;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line">这是特殊遍历方式，java的是--&gt;foreach(<span class="class"><span class="keyword">type</span> a : arrName)</span></span><br></pre></td></tr></table></figure><h1 id="ArrayList-类">ArrayList 类</h1><ul><li>构造方法： <code>ArrayList name = new ArrayList(); </code></li><li>和java一样的方法，大部分用法也类似</li></ul><table><thead><tr><th style="text-align:center">函数名</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">add()</td><td style="text-align:center">末尾添加元素</td></tr><tr><td style="text-align:center">Instert(int index,object obj)</td><td style="text-align:center">指定位置插入元素obj</td></tr><tr><td style="text-align:center">Clear()</td><td style="text-align:center">删除所有元素</td></tr><tr><td style="text-align:center">Remove(Object obj)</td><td style="text-align:center">移除obj</td></tr><tr><td style="text-align:center">RemoveAt(int index)</td><td style="text-align:center">指定位置移除元素</td></tr><tr><td style="text-align:center">RemoveRange(int index,int count)</td><td style="text-align:center">从index开始移除count个元素</td></tr><tr><td style="text-align:center">Contains(Object obj)</td><td style="text-align:center">查找obj</td></tr></tbody></table><h1 id="哈希表">哈希表</h1><ul><li>构造方法： <code>Hashtable name = new Hashtable();</code></li><li>和java一样的方法</li></ul><table><thead><tr><th style="text-align:center">函数名</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">add(key,value)</td><td style="text-align:center">添加键值对</td></tr><tr><td style="text-align:center">Clear()</td><td style="text-align:center">删除所有元素</td></tr><tr><td style="text-align:center">Remove(key)</td><td style="text-align:center">移除键值</td></tr><tr><td style="text-align:center">Contains(Object key)</td><td style="text-align:center">查找键值</td></tr><tr><td style="text-align:center">ContainsValue(value)</td><td style="text-align:center">查找特定值</td></tr></tbody></table><h2 id="遍历数组-v2">遍历数组</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">foreach</span>(DictionaryEntry a in HashtableName)&#123;</span><br><span class="line">  Console<span class="selector-class">.WriteLine</span>(a);</span><br><span class="line">&#125;</span><br><span class="line">哈希表的特殊遍历</span><br></pre></td></tr></table></figure><h1 id="类与对象">类与对象</h1><ul><li>类的修饰符</li></ul><table><thead><tr><th style="text-align:center">修饰符</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">new</td><td style="text-align:center">仅在嵌套类声明时使用，表明类中隐藏了由基类继承而来、与基类成员同名的成员</td></tr><tr><td style="text-align:center">public</td><td style="text-align:center">不限制对该类的访问</td></tr><tr><td style="text-align:center">protected</td><td style="text-align:center">只能从其所在类和所在类的子类(派生类)进行访问</td></tr><tr><td style="text-align:center">internal</td><td style="text-align:center">同一程序集的任何代码都可以访问</td></tr><tr><td style="text-align:center">private</td><td style="text-align:center">只有其所在类才能访问</td></tr><tr><td style="text-align:center">abstract</td><td style="text-align:center">抽象类，不允许建立类的实例</td></tr><tr><td style="text-align:center"><span class='p red'>sealed</span></td><td style="text-align:center"><span class='p red'>密封类，不允许被继承</span></td></tr></tbody></table><ul><li>类的基本操作和c++大同小异，其实和java也差不多，但是java一般不写析构函数。</li></ul><h2 id="访问器">访问器</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">hello</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            student a = <span class="keyword">new</span> student(<span class="string">&quot;小米&quot;</span>, <span class="number">1024</span>);</span><br><span class="line">            Console.WriteLine(a.Id);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">student</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String Id</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; name = <span class="keyword">value</span>; &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的get和set就是访问器，<mark class="hl-label red">一旦出现，必须成对出现</mark> </p><h2 id="方法的参数类型">方法的参数类型</h2><ol><li>params: 用来指定在参数数目可变时采取的方法参数，必须是一维数组。</li><li>ref: 按引用方式传递参数。参数必须初始化。</li><li>out: 关键字来定义输出参数，也是引用传递。但是不要求参数初始化。<br>代码展示：</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">hello</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span>[] lists = <span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span> &#125;;</span><br><span class="line">            print(lists);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">string</span>[] lists</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">string</span> a <span class="keyword">in</span> lists)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(a);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">hello</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> val = <span class="number">0</span>;</span><br><span class="line">            print(<span class="keyword">ref</span> val);</span><br><span class="line">            Console.WriteLine(val);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">int</span> i</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            i = <span class="number">44</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：<span class="number">44</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">hello</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> val;</span><br><span class="line">            print(<span class="keyword">out</span> val);</span><br><span class="line">            Console.WriteLine(val);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span>(<span class="params"><span class="keyword">out</span> <span class="built_in">int</span> i</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            i = <span class="number">44</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出：<span class="number">44</span></span><br></pre></td></tr></table></figure><h2 id="类的继承">类的继承</h2><div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">继承类时，需要使用冒号加类名。当对一个类应用sealed修饰符时，此修饰符会阻止其他类从该类继承</p></div><h2 id="base-关键字">base 关键字</h2><ul><li>当子类重写了父类的方法时，可以通过base调用原有父类方法。使用方法和this类似。</li></ul><div class="note warning simple"><p>访问父类成员只能在构造函数、实例方法或者实例属性中进行，因此，从静态方法中使用base是错误的。</p></div><h2 id="重写虚方法">重写虚方法</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">people</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Say</span><span class="params">(<span class="type">String</span> name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chinese</span> : people</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="type">void</span> <span class="title">Say</span><span class="params">(<span class="type">String</span> name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        base.<span class="built_in">Say</span>(name + <span class="string">&quot;讲中文捏&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">English</span> : people</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="type">void</span> <span class="title">Say</span><span class="params">(<span class="type">String</span> name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        base.<span class="built_in">Say</span>(name + <span class="string">&quot;讲英文~(￣▽￣)~*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">Main</span><span class="params">(string[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Console</span>.<span class="built_in">WriteLine</span>(<span class="string">&quot;输入名字name:&quot;</span>);</span><br><span class="line">    <span class="type">String</span> name = <span class="built_in">Console</span>.<span class="built_in">ReadLine</span>();</span><br><span class="line">    people[] peoples = <span class="keyword">new</span> people[<span class="number">2</span>];</span><br><span class="line">    peoples[<span class="number">0</span>] = <span class="keyword">new</span> <span class="built_in">Chinese</span>();</span><br><span class="line">    peoples[<span class="number">1</span>] = <span class="keyword">new</span> <span class="built_in">English</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; peoples.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        peoples[i].<span class="built_in">Say</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果如下</span><br><span class="line">输入名字name:</span><br><span class="line">梨花</span><br><span class="line">梨花讲中文捏</span><br><span class="line">梨花讲英文~(￣▽￣)~*</span><br></pre></td></tr></table></figure><h1 id="结构struct">结构struct</h1><ul><li>和c艹一模一样</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫模板</title>
      <link href="/posts/8ad0bdc0/"/>
      <url>/posts/8ad0bdc0/</url>
      
        <content type="html"><![CDATA[<h1 id="爬虫链接含有中文导致无法访问">爬虫链接含有中文导致无法访问</h1><p>解决代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import urllib </span><br><span class="line">from urllib.request import urlopen</span><br><span class="line"></span><br><span class="line"><span class="built_in">link</span> = <span class="string">&quot;含有中文的超链接&quot;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要用 urllib.parse.quote 转换</span></span><br><span class="line"><span class="built_in">link</span> = urllib.parse.quote(<span class="built_in">link</span>)</span><br><span class="line">html = urlopen(<span class="built_in">link</span>).<span class="built_in">read</span>() <span class="comment">#就可以访问了，不会报异常</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="当爬取到的页面源代码出现乱码时">当爬取到的页面源代码出现乱码时</h1><blockquote><p>通常这种情况要确定你的编码格式是否和网站的一致</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当网站编码格式为utf-8时，这个在页面源代码中可以查到charset=</span></span><br><span class="line"><span class="attr">strs</span> = requests.get(Url)</span><br><span class="line"><span class="attr">strs.encoding</span> = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line"><span class="attr">strs</span> = strs.text</span><br></pre></td></tr></table></figure><h1 id="xpath-基本套路">xpath 基本套路</h1><p>代码如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;我是要被处理的网址&#x27;</span></span><br><span class="line">resp = requests.<span class="keyword">get</span>(url)</span><br><span class="line"></span><br><span class="line">tree = etree.HTML(resp.text)</span><br><span class="line"></span><br><span class="line">tmp = tree.xpath(<span class="string">&#x27;直接去F12里面复制它不香吗&#x27;</span>)</span><br><span class="line"></span><br><span class="line"># 我个人特别喜欢用这个，比re和beautiful更方便。但是对于指定元素还是be好用</span><br></pre></td></tr></table></figure><h1 id="selenium-相关问题">selenium 相关问题</h1><h2 id="selenium-不自动关闭浏览器">selenium 不自动关闭浏览器</h2><p>代码如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.<span class="keyword">by</span> <span class="keyword">import</span> <span class="keyword">By</span> #当你要使用xpath时</span><br><span class="line"></span><br><span class="line"># 不自动关闭浏览器</span><br><span class="line"><span class="keyword">option</span> = webdriver.EdgeOptions()</span><br><span class="line"><span class="keyword">option</span>.add_experimental_option(&quot;detach&quot;, <span class="keyword">True</span>)</span><br><span class="line"><span class="keyword">option</span>.add_argument(&quot;--disable-blink-features=AutomationControlled&quot;)#解决自动化检测</span><br><span class="line"># 将<span class="keyword">option</span>作为参数添加到edge中</span><br><span class="line">driver = webdriver.Edge(<span class="keyword">options</span>=<span class="keyword">option</span>)</span><br><span class="line">driver.<span class="keyword">get</span>(<span class="string">&#x27;http:\\www.baidu.com&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="selenium-禁止加载图片相关设置">selenium 禁止加载图片相关设置</h2><p>代码如下：</p><figure class="highlight rsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 设置禁用图片的相关设置</span></span><br><span class="line">    prefs = &#123;</span><br><span class="line">        <span class="string">&#x27;profile.default_content_setting_values&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;images&#x27;</span>: <span class="number">2</span>,  <span class="meta"># 屏蔽图片</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">option</span>.add_experimental_option(<span class="string">&quot;prefs&quot;</span>, prefs)</span><br></pre></td></tr></table></figure><h1 id="对于简单的ts文件的合成方法">对于简单的ts文件的合成方法</h1><p>代码如下：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(名字 +<span class="string">&#x27;.ts&#x27;</span>,mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(最后视频合成的名字+ <span class="string">&#x27;.mp4&#x27;</span>,mode=<span class="string">&#x27;ab&#x27;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">        f2.<span class="built_in">write</span>(f1.<span class="built_in">read</span>())</span><br></pre></td></tr></table></figure><h1 id="处理简单的登录情况">处理简单的登录情况</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line">data =&#123;</span><br><span class="line">    <span class="string">&#x27;loginName&#x27;</span> : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span> : <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#登录</span></span><br><span class="line">url = <span class="string">&#x27;&#x27;</span></span><br><span class="line">resp = session.<span class="built_in">get</span>(url,<span class="attribute">data</span>=data)</span><br><span class="line"><span class="comment">#另一种方法</span></span><br><span class="line">resp = requests.<span class="built_in">get</span>(url,headers=&#123;<span class="string">&#x27;cookie&#x27;</span>:<span class="string">&#x27;.......&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><h1 id="音视频文件合成">音视频文件合成</h1><blockquote><p>典型例子b站<br>代码如下：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">merge_command = <span class="string">f&#x27;ffmpeg -loglevel quiet -i .\\<span class="subst">&#123;name&#125;</span>\\<span class="subst">&#123;title&#125;</span>.mp4 -i .\\<span class="subst">&#123;name&#125;</span>\\<span class="subst">&#123;title&#125;</span>.mp3 -c:v copy -c:a aac -strict experimental .\\<span class="subst">&#123;name&#125;</span>\\<span class="subst">&#123;title&#125;</span>output.mp4&#x27;</span></span><br><span class="line">subprocess.run(merge_command, shell=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;音视频合并完成&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当你发现合成出现问题的时候使用下面这个代码去检测问题所在</span></span><br><span class="line">merge_command = <span class="string">f&#x27;ffmpeg -i .\\<span class="subst">&#123;name&#125;</span>\\<span class="subst">&#123;title&#125;</span>.mp4 -i .\\<span class="subst">&#123;name&#125;</span>\\<span class="subst">&#123;title&#125;</span>.mp3 -c:v copy -c:a aac -strict experimental .\\<span class="subst">&#123;name&#125;</span>\\<span class="subst">&#123;title&#125;</span>output.mp4&#x27;</span></span><br><span class="line">subprocess.run(merge_command, shell=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;音视频合并完成&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="多线程模板">多线程模板</h1><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Spider</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.qurl = Queue()</span><br><span class="line">        self.thread_num = <span class="number">10</span>  <span class="comment"># 多线程处理数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">produce_url</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> 你要多线程处理的url列表:</span><br><span class="line">            self.qurl.put(url) <span class="comment"># 生成URL存入队列，等待其他线程提取</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.qurl.empty(): <span class="comment"># 保证url遍历结束后能退出线程</span></span><br><span class="line">            url = self.qurl.get() <span class="comment"># 从队列中获取URL</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;url&#125;</span> ing&#x27;</span>)</span><br><span class="line">            具体多线程处理函数(url)  <span class="comment">#这个就是你要多线程处理的主体了</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        self.produce_url()</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(self.thread_num):</span><br><span class="line">            th = Thread(target=self.get_info)</span><br><span class="line">            th.start()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;finished.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Spider().run() <span class="comment">#多线程！启动！</span></span><br></pre></td></tr></table></figure><h1 id="re表达式">re表达式</h1><h2 id="findall">findall</h2><p>举一个栗子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#finditer: 匹配字符串的所有内容|返回的是迭代器|要从迭代器拿到内容要用.group()</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = re.findall(<span class="string">r&#x27;\d+&#x27;</span>, <span class="string">&#x27;我的电话号10086，其他人的为10010&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line">it = re.finditer(<span class="string">r&#x27;\d+&#x27;</span>,<span class="string">&#x27;我的电话号10086，其他人的为10010&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it:</span><br><span class="line">    <span class="built_in">print</span>(i.group())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="search-match">search ,match</h2><p>举一个栗子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#search返回的是match对象，也要.group()|只会返回的一个数据</span></span><br><span class="line">s = re.search(<span class="string">r&#x27;\d+&#x27;</span>,<span class="string">&#x27;我的电话号10086，其他人的为10010&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(s.group())</span><br><span class="line"></span><br><span class="line"><span class="comment">#match是从头开始匹配，这个很重要,也要用到.group()</span></span><br></pre></td></tr></table></figure><h2 id="预加载正则表达式">预加载正则表达式</h2><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj = re.<span class="built_in">compile</span>(<span class="string">r&#x27;\d+&#x27;</span>)</span><br><span class="line">ret = obj.finditer(<span class="string">&#x27;我的电话号10086，其他人的为10010&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ret:</span><br><span class="line">    <span class="built_in">print</span>(i.group())</span><br></pre></td></tr></table></figure><h2 id="给每一个匹配命名分组">给每一个匹配命名分组</h2><p>代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">s = &#x27;&#x27;&#x27;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;jay&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&#x27;1&#x27;</span>&gt;</span>中国移动<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;jfsd&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&#x27;2&#x27;</span>&gt;</span>中国联通<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;asds&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&#x27;3&#x27;</span>&gt;</span>中国电信<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"></span><br><span class="line">obj2 = re.compile(r&quot;<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;.*?&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&#x27;\d+&#x27;</span>&gt;</span>(?P<span class="tag">&lt;<span class="name">yyy</span>&gt;</span>.*?)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&quot;,re.S)</span><br><span class="line">result = obj2.finditer(s)</span><br><span class="line">for i in result:</span><br><span class="line">    print(i.group(&#x27;yyy&#x27;))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="pandas-之-to-csv-保存数据出现中文乱码问题及解决办法">pandas 之 to_csv 保存数据出现中文乱码问题及解决办法</h1><p>代码如下:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.to_csv(<span class="string">&#x27;data.csv&#x27;</span>,<span class="attribute">encoding</span>=<span class="string">&#x27;utf_8_sig&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见反爬虫手段</title>
      <link href="/posts/7ade1d5c/"/>
      <url>/posts/7ade1d5c/</url>
      
        <content type="html"><![CDATA[<span class='p red center large'>爬虫最重要的就是多练多实践</span><h1 id="反爬手段">反爬手段</h1><h2 id="常见的基础反爬手段有">常见的基础反爬手段有</h2><ul><li>User-Agent <mark class="hl-label red">最常见也最简单</mark> </li><li>referer</li><li>cookie</li><li>origin</li></ul><p>这些是<mark class="hl-label blue">最常见也是最简单</mark> 的反爬手段</p><span class='p red'>当这些拦不住的你的时候，爬虫应付简单的网站就没有什么问题了</span><p>推荐我常用的工具：</p><blockquote><p><a href="https://curlconverter.com/">https://curlconverter.com/</a></p></blockquote><h2 id="被禁止右键查看源码">被禁止右键查看源码</h2><h3 id="常用应对手段">常用应对手段</h3><ul><li>你可以通过f12直接查看文档来查看当前页面的页面源代码。</li><li>在输入窗口前加上 <span class='p red'>view-source:</span> 可以直接查看当前页面的页面源代码(通常都是用来快速查看想要爬取的信息是否是动态加载的)</li></ul><span class='p red center large'>以下涉及到js，不懂js的可以溜了<s>不是</s></span><h2 id="F12-debugger">F12 debugger</h2><p>这里面涉及的地方就很多了，具体情况要具体分析，不同网站的反调试策略也不一样。当然最重要的就是搞清楚它是什么类型的debugger，也就是如何产生的。<br>我来讲述几个我常遇到的debugger</p><ul><li>直接标出</li><li>检测DevTools是否打开</li><li>定时检测</li><li>异常抛出</li><li>通过js的构造器讲字符构造成debugger达到效果</li><li>临时产生匿名函数像什么VM123,函数主题就一个debugger</li></ul><p>一般遇到反调试的网站，那么这个爬虫将会变得很困难。没有办法调试网站，分析就无从下手了。当然，如果你只是想定位某些元素，你可以设置你的开发者模式跳过一切断点就行。如果你是要就行js逆向的话，这是必须要过的一步。</p><h3 id="常用应对手段-v2">常用应对手段</h3><ul><li>一般遇到简单的debugger<s>吓唬新手的</s>，你只需要在这个debugger下设置逻辑跳过就行。当然也可以直接删除保存并替换调该页面，但是我不推荐删代码的形式，除非你知道这段代码只有产生debugger的作用。</li><li>查询法，这种方法适用于你找不到debugger这个字符串时使用。你可以去寻找字符数组是否有类似于<code>['d','e','b','u','g','g','e','r']</code>这样的数组。你可以将里面的字符全部替换为空</li><li>js注入，开发者模式是支持你自己写js代码并执行的。当然这种方法适用于对前端十分了解的大佬<s>身为菜鸡我会抄啊</s>，常见的注入网上都有代码,可以去看看Hook注入。</li><li>分析法，通过堆栈的追踪去查询这个debugger是如何产生的，是由谁产生的。这种方法我是很推荐的，如果你有前端的知识不妨一步步看看，很锻炼个人水平的，你学会了还可以用在自己的网站。但是这个是很耗费时间的<s>爬虫本来就是费力活</s>。学会跟堆栈这个很重要，在b站的w_rid有很大的体现<s>虽然那个是解参数</s>。</li></ul><h2 id="混淆加密-s-傻孩子们，快跑啊-s">混淆加密 <s>傻孩子们，快跑啊</s></h2><p>常见的代码混淆加密有：</p><ul><li>变量定义（base64加密）</li><li>eval混淆，这个我见过好几次了<s>貌似很常用</s></li><li>AAEncode混淆（表情包加密）</li><li>JJEncode混淆</li><li>jsfuck混淆</li><li>ob混淆 这个是真的难</li><li>代码压缩</li></ul><p>无论是哪种方法，它的出发点都是为了最大程度的降低你的阅读代码的体验，看不懂或者没耐心，就达到它所要的结果。不过当你知道并清楚这些代码是什么混淆的时候，你就可以通过工具来还原阅读。当然还原之后的代码也仍然是一坨，别问我怎么知道的。<br>这里分析一下我常用的工具</p><blockquote><p><a href="https://lelinhtinh.github.io/de4js/">https://lelinhtinh.github.io/de4js/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>b站w_rid逆向</title>
      <link href="/posts/3b8ba7c7/"/>
      <url>/posts/3b8ba7c7/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的">  <script id="hbeData" type="hbeData" data-hmacdigest="868940ffa568156b35e804bf907c897f07aceab5510f0fbe76923d7c5409dce6"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">密码很简单。</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
          <category> 非教程 </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown 高玩</title>
      <link href="/posts/undefined/"/>
      <url>/posts/undefined/</url>
      
        <content type="html"><![CDATA[<span class='p red center logo large'>写在前面</span><span class='p red center logo large'>本文大部分代码都是和<strong>标签外挂</strong>有关</span><span class='p red center logo large'>如果没有添加可能无法运行以下代码</span><h1 id="行内文本样式-swig￼21">行内文本样式 <code>&#123;% %&#125;</code></h1><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>被看见了</psw></li><li><mark class="hl-label red">红色</mark>  <span class='p code yellow center logo large'>居中大大大</span></li></ol><p>代码如下：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">带 </span><span class="template-tag">&#123;% <span class="name">u</span> 下划线 %&#125;</span><span class="language-xml"> 的文本</span></span><br><span class="line"><span class="language-xml">带 </span><span class="template-tag">&#123;% <span class="name">emp</span> 着重号 %&#125;</span><span class="language-xml"> 的文本</span></span><br><span class="line"><span class="language-xml">带 </span><span class="template-tag">&#123;% <span class="name">wavy</span> 波浪线 %&#125;</span><span class="language-xml"> 的文本</span></span><br><span class="line"><span class="language-xml">带 </span><span class="template-tag">&#123;% <span class="name">del</span> 删除线 %&#125;</span><span class="language-xml"> 的文本</span></span><br><span class="line"><span class="language-xml">键盘样式的文本 </span><span class="template-tag">&#123;% <span class="name">kbd</span> command %&#125;</span><span class="language-xml"> + </span><span class="template-tag">&#123;% <span class="name">kbd</span> D %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">密码样式的文本：</span><span class="template-tag">&#123;% <span class="name">psw</span> 被看见了 %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">span</span> red, 红色 %&#125;</span><span class="language-xml"> or </span><span class="template-tag">&#123;% <span class="name">label</span> 红色 red %&#125;</span><span class="language-xml"> </span><span class="template-tag">&#123;% <span class="name">span</span> center logo large , 居中大大大 %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">ps:</span></span><br><span class="line"><span class="language-xml">1.字体: logo, code</span></span><br><span class="line"><span class="language-xml">2.颜色: red,yellow,green,cyan,blue,gray</span></span><br><span class="line"><span class="language-xml">3.大小: small, h4, h3, h2, h1, large, huge, ultra</span></span><br><span class="line"><span class="language-xml">4.对齐方向: left, center, right</span></span><br><span class="line"><span class="language-xml">5.span 不能少，当你要设置这些参数的时候</span></span><br><span class="line"><span class="language-xml">6.label 可以将你的文字用代码的形式展现，如7 1 语法为</span><span class="template-tag">&#123;% <span class="name">label</span> 红色 red %&#125;</span></span><br></pre></td></tr></table></figure><h1 id="时间轴">时间轴</h1><div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2024</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-10</p></div></div><div class='timeline-item-content'><p>01-10</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-10</p></div></div><div class='timeline-item-content'><p>01-11</p></div></div></div><p>代码如下:</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">timeline</span> 2024 %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- timeline 01-10 --&gt;</span></span></span><br><span class="line"><span class="language-xml">01-10</span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- endtimeline --&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- timeline 01-10 --&gt;</span></span></span><br><span class="line"><span class="language-xml">01-11</span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- endtimeline --&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">endtimeline</span> %&#125;</span></span><br></pre></td></tr></table></figure><h1 id="一些插入语法">一些插入语法</h1><p>下面语法如果使用报错可能是加了标签外挂的原因</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">video</span> 视频链接 %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">audio</span> 音频链接 %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">image</span> 图片链接,width=400px ,alt=下方文字 %&#125;</span><span class="language-xml">当然你也可以设置占位背景色bg=等等，当然html也是可以的。</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">图片链接</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;50%&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">inlineimage</span> 图片链接 %&#125;</span><span class="language-xml">这个是行内的图片语法</span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">folding</span> 折叠框 %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">建议 不要 在段落开头使用 label 标签外挂</span></span><br></pre></td></tr></table></figure><h1 id="隐藏标签">隐藏标签</h1><span class="hide-inline"><button type="button" class="hide-button" style="background-color:  bg ;color:  red">你好呀  </button><span class="hide-content">我很好</span></span><p>代码如下：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="symbol">%</span> hideInline <span class="built_in">content</span>,<span class="built_in">display</span>,bg,<span class="built_in">color</span> <span class="symbol">%</span>&#125;</span><br><span class="line"><span class="built_in">content</span>: 文本内容</span><br><span class="line"><span class="built_in">display</span>: 按钮显示的文字(可选)</span><br><span class="line">bg: 按钮的背景颜色(可选)</span><br><span class="line"><span class="built_in">color</span>: 按钮文字的颜色(可选)</span><br></pre></td></tr></table></figure><h1 id="按钮">按钮</h1><p>代码如下:</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn <span class="comment">[url]</span>,<span class="comment">[text]</span>,<span class="comment">[icon]</span>,<span class="comment">[color]</span> <span class="comment">[style]</span> <span class="comment">[layout]</span> <span class="comment">[position]</span> <span class="comment">[size]</span> %&#125;</span><br><span class="line"><span class="comment">[url]</span>         : 链接</span><br><span class="line"><span class="comment">[text]</span>        : 按钮文字</span><br><span class="line"><span class="comment">[icon]</span>        : <span class="comment">[可选]</span> 图标</span><br><span class="line"><span class="comment">[color]</span>       : <span class="comment">[可选]</span> 按钮背景顔色(默认style时）</span><br><span class="line">                      按钮字体和边框顔色(outline时)</span><br><span class="line">                      default/blue/pink/red/purple/orange/green</span><br><span class="line"><span class="comment">[style]</span>       : <span class="comment">[可选]</span> 按钮样式 默认实心</span><br><span class="line">                      outline/留空</span><br><span class="line"><span class="comment">[layout]</span>      : <span class="comment">[可选]</span> 按钮佈局 默认为line</span><br><span class="line">                      block/留空</span><br><span class="line"><span class="comment">[position]</span>    : <span class="comment">[可选]</span> 按钮位置 前提是设置了layout为block 默认为左边</span><br><span class="line">                      center/right/留空</span><br><span class="line"><span class="comment">[size]</span>        : <span class="comment">[可选]</span> 按钮大小</span><br><span class="line">                      larger/留空</span><br></pre></td></tr></table></figure><h1 id="分栏展示">分栏展示</h1><blockquote><p>他的写法和时间线很像</p></blockquote><div class="tabs" id="第一栏的标题"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="第一栏的标题-1">第一栏的标题 1</button><button type="button" class="tab " data-href="第一栏的标题-2">第一栏的标题 2</button><button type="button" class="tab " data-href="第一栏的标题-3">第一栏的标题 3</button></ul><div class="tab-contents"><div class="tab-item-content active" id="第一栏的标题-1"><p><strong>我是内容1</strong></p></div><div class="tab-item-content" id="第一栏的标题-2"><p><strong>我是内容2</strong></p></div><div class="tab-item-content" id="第一栏的标题-3"><p><strong>我是内容3</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>代码如下：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">tabs</span> 第一栏的标题 %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- tab --&gt;</span></span></span><br><span class="line"><span class="language-xml">**我是内容1**</span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- tab --&gt;</span></span></span><br><span class="line"><span class="language-xml">**我是内容2**</span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- tab --&gt;</span></span></span><br><span class="line"><span class="language-xml">**我是内容3**</span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">endtabs</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">tabs</span> 自定义分栏名字 %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- tab 第一个Tab --&gt;</span></span></span><br><span class="line"><span class="language-xml">**tab名字为第一个Tab**</span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- tab @fab fa-apple-pay --&gt;</span></span></span><br><span class="line"><span class="language-xml">**只有图标 没有Tab名字**</span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span></span></span><br><span class="line"><span class="language-xml">**名字+icon**</span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!-- endtab --&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">endtabs</span> %&#125;</span></span><br></pre></td></tr></table></figure><h1 id="诗词标签">诗词标签</h1><ul><li><s>看着就是优雅</s></li></ul><div class='poem'><div class='poem-title'>面朝大海，春暖花开</div><div class='poem-author'>海子</div><p>从明天起，做一个幸福的人<br>喂马、劈柴，周游世界<br>从明天起，关心粮食和蔬菜<br>我有一所房子，面朝大海，春暖花开<br>从明天起，和每一个亲人通信<br>告诉他们我的幸福<br>那幸福的闪电告诉我的<br>我将告诉每一个人<br>给每一条河每一座山取一个温暖的名字<br>陌生人，我也为你祝福<br>愿你有一个灿烂的前程<br>愿你有情人终成眷属<br>愿你在尘世获得幸福<br>我只愿面朝大海，春暖花开</p></div><p>代码如下：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">poem</span> 标题,作者 %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">内容在这哦</span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">endpoem</span> %&#125;</span></span><br></pre></td></tr></table></figure><span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">当然这个用法可不仅限于展示诗句，你懂的</span></span><h1 id="阿里图片-icon">阿里图片 icon</h1><blockquote><p><a href="https://www.iconfont.cn/">这个最好去看看文档</a></p></blockquote><p>代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="attribute">icon</span> <span class="selector-attr">[icon-xxxx]</span>,<span class="selector-attr">[font-size]</span> %&#125;</span><br></pre></td></tr></table></figure><h1 id="note-标签">note 标签</h1><p>代码如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [<span class="keyword">class</span>] [<span class="keyword">no</span>-icon] [style] %&#125;</span><br><span class="line"><span class="keyword">Any</span> content (support <span class="keyword">inline</span> tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">ps: <span class="keyword">class</span>标识，不同的标识有不同的配色 （ <span class="keyword">default</span> / <span class="keyword">primary</span> / success / <span class="keyword">info</span> / <span class="built_in">warning</span> / danger ）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line"><span class="keyword">Any</span> content (support <span class="keyword">inline</span> tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">ps: color标识，不同的标识有不同的配色 （ <span class="keyword">default</span> / blue / pink / red / purple / orange / green ）</span><br><span class="line">不同方法，效果一样</span><br></pre></td></tr></table></figure><p>部分展示</p><div class="tabs" id="1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="1-1">展示效果</button><button type="button" class="tab " data-href="1-2">对应代码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><ol><li>simple 样式</li></ol><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><ol start="2"><li>modern 样式</li></ol><div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><ol start="3"><li>flat 样式</li></ol><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><ol start="4"><li>disabled 样式</li></ol><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><ol start="5"><li>no-icon 样式</li></ol><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了…</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div></div><div class="tab-item-content" id="1-2"><ol><li>simple 样式</li></ol><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">note</span> simple %&#125;</span><span class="language-xml">默认 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> default simple %&#125;</span><span class="language-xml">default 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> primary simple %&#125;</span><span class="language-xml">primary 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> success simple %&#125;</span><span class="language-xml">success 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> info simple %&#125;</span><span class="language-xml">info 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> warning simple %&#125;</span><span class="language-xml">warning 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> danger simple %&#125;</span><span class="language-xml">danger 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> &#x27;fab fa-cc-visa&#x27; simple %&#125;</span><span class="language-xml">你是刷 Visa 还是 UnionPay</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> blue &#x27;fas fa-bullhorn&#x27; simple %&#125;</span><span class="language-xml">2021年快到了....</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> pink &#x27;fas fa-car-crash&#x27; simple %&#125;</span><span class="language-xml">小心开车 安全至上</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> red &#x27;fas fa-fan&#x27; simple%&#125;</span><span class="language-xml">这是三片呢？还是四片？</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> orange &#x27;fas fa-battery-half&#x27; simple %&#125;</span><span class="language-xml">你是刷 Visa 还是 UnionPay</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> purple &#x27;far fa-hand-scissors&#x27; simple %&#125;</span><span class="language-xml">剪刀石头布</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> green &#x27;fab fa-internet-explorer&#x27; simple %&#125;</span><span class="language-xml">前端最讨厌的浏览器</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>modern 样式</li></ol><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">note</span> modern %&#125;</span><span class="language-xml">默认 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> default modern %&#125;</span><span class="language-xml">default 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> primary modern %&#125;</span><span class="language-xml">primary 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> success modern %&#125;</span><span class="language-xml">success 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> info modern %&#125;</span><span class="language-xml">info 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> warning modern %&#125;</span><span class="language-xml">warning 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> danger modern %&#125;</span><span class="language-xml">danger 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> &#x27;fab fa-cc-visa&#x27; modern %&#125;</span><span class="language-xml">你是刷 Visa 还是 UnionPay</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> blue &#x27;fas fa-bullhorn&#x27; modern %&#125;</span><span class="language-xml">2021年快到了....</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> pink &#x27;fas fa-car-crash&#x27; modern %&#125;</span><span class="language-xml">小心开车 安全至上</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> red &#x27;fas fa-fan&#x27; modern%&#125;</span><span class="language-xml">这是三片呢？还是四片？</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> orange &#x27;fas fa-battery-half&#x27; modern %&#125;</span><span class="language-xml">你是刷 Visa 还是 UnionPay</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> purple &#x27;far fa-hand-scissors&#x27; modern %&#125;</span><span class="language-xml">剪刀石头布</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> green &#x27;fab fa-internet-explorer&#x27; modern %&#125;</span><span class="language-xml">前端最讨厌的浏览器</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>flat 样式</li></ol><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">note</span> flat %&#125;</span><span class="language-xml">默认 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> default flat %&#125;</span><span class="language-xml">default 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> primary flat %&#125;</span><span class="language-xml">primary 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> success flat %&#125;</span><span class="language-xml">success 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> info flat %&#125;</span><span class="language-xml">info 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> warning flat %&#125;</span><span class="language-xml">warning 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> danger flat %&#125;</span><span class="language-xml">danger 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> &#x27;fab fa-cc-visa&#x27; flat %&#125;</span><span class="language-xml">你是刷 Visa 还是 UnionPay</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> blue &#x27;fas fa-bullhorn&#x27; flat %&#125;</span><span class="language-xml">2021年快到了....</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> pink &#x27;fas fa-car-crash&#x27; flat %&#125;</span><span class="language-xml">小心开车 安全至上</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> red &#x27;fas fa-fan&#x27; flat%&#125;</span><span class="language-xml">这是三片呢？还是四片？</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> orange &#x27;fas fa-battery-half&#x27; flat %&#125;</span><span class="language-xml">你是刷 Visa 还是 UnionPay</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> purple &#x27;far fa-hand-scissors&#x27; flat %&#125;</span><span class="language-xml">剪刀石头布</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> green &#x27;fab fa-internet-explorer&#x27; flat %&#125;</span><span class="language-xml">前端最讨厌的浏览器</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>disabled 样式</li></ol><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">note</span> disabled %&#125;</span><span class="language-xml">默认 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> default disabled %&#125;</span><span class="language-xml">default 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> primary disabled %&#125;</span><span class="language-xml">primary 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> success disabled %&#125;</span><span class="language-xml">success 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> info disabled %&#125;</span><span class="language-xml">info 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> warning disabled %&#125;</span><span class="language-xml">warning 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> danger disabled %&#125;</span><span class="language-xml">danger 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> &#x27;fab fa-cc-visa&#x27; disabled %&#125;</span><span class="language-xml">你是刷 Visa 还是 UnionPay</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;</span><span class="language-xml">2021年快到了....</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> pink &#x27;fas fa-car-crash&#x27; disabled %&#125;</span><span class="language-xml">小心开车 安全至上</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> red &#x27;fas fa-fan&#x27; disabled %&#125;</span><span class="language-xml">这是三片呢？还是四片？</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> orange &#x27;fas fa-battery-half&#x27; disabled %&#125;</span><span class="language-xml">你是刷 Visa 还是 UnionPay</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;</span><span class="language-xml">剪刀石头布</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;</span><span class="language-xml">前端最讨厌的浏览器</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>no-icon 样式</li></ol><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">note</span> no-icon %&#125;</span><span class="language-xml">默认 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> default no-icon %&#125;</span><span class="language-xml">default 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> primary no-icon %&#125;</span><span class="language-xml">primary 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> success no-icon %&#125;</span><span class="language-xml">success 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> info no-icon %&#125;</span><span class="language-xml">info 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> warning no-icon %&#125;</span><span class="language-xml">warning 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> danger no-icon %&#125;</span><span class="language-xml">danger 提示块标签</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> no-icon %&#125;</span><span class="language-xml">你是刷 Visa 还是 UnionPay</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> blue no-icon %&#125;</span><span class="language-xml">2021年快到了....</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> pink no-icon %&#125;</span><span class="language-xml">小心开车 安全至上</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> red no-icon %&#125;</span><span class="language-xml">这是三片呢？还是四片？</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> orange no-icon %&#125;</span><span class="language-xml">你是刷 Visa 还是 UnionPay</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> purple no-icon %&#125;</span><span class="language-xml">剪刀石头布</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">note</span> green no-icon %&#125;</span><span class="language-xml">前端最讨厌的浏览器</span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h1 id="加点特效-wow">加点特效 wow</h1><span class='p red center large'>请确保你下载了wowjs</span><div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' ><div class="note red icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p><code>心动</code>动画效果，延时<code>5s</code>，重复<code>5</code>次。</p></div></div><p>代码如下：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">wow</span> 动画样式，持续时间（选填），动画开始的延迟时间（选填），动画开始的距离（相对浏览器底部），动画重复次数（选填） %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">内容</span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">endwow</span> %&#125;</span></span><br></pre></td></tr></table></figure><div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">这里要注意，虽然部分参数是选填。但是当你不填的时候也要严格按照上述的顺序</p></div><p>动画样式官方文档👉<a href="https://animate.style/">https://animate.style/</a></p><h1 id="来点进度条-progress">来点进度条 progress</h1><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 99%" aria-valuenow="99" aria-valuemin="0" aria-valuemax="100"><p>进不去，怎么想都进不去吧！</p></div></div><p>像不像你卡半岩的时候 <psw>没玩过原，不知道是什么游戏[doge]</psw><br>代码如下：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">progress</span> 进度 颜色 内容 %&#125;</span></span><br></pre></td></tr></table></figure><h1 id="注释-notation">注释 notation</h1><span class='nota' data-nota='你还真的移啊'>把鼠标移动到我上面试试</span><p>代码如下：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">nota</span> 把鼠标移动到我上面试试 ,你还真的移啊 %&#125;</span></span><br></pre></td></tr></table></figure><h1 id="动态标签-anima">动态标签 anima</h1><blockquote><p><a href="https://l-lin.github.io/font-awesome-animation/">建议看官方文档去</a></p></blockquote><div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">警告</p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash">禁止</p></div><p>代码如下：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">tip</span> [参数，可选] %&#125;</span><span class="language-xml">文本内容</span><span class="template-tag">&#123;% <span class="name">endtip</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">当页面加载时显示动画</span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">tip</span> warning faa-horizontal animated %&#125;</span><span class="language-xml">warning</span><span class="template-tag">&#123;% <span class="name">endtip</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">tip</span> ban faa-flash animated %&#125;</span><span class="language-xml">ban</span><span class="template-tag">&#123;% <span class="name">endtip</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">调整动画速度</span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">tip</span> warning faa-horizontal animated faa-fast %&#125;</span><span class="language-xml">warning</span><span class="template-tag">&#123;% <span class="name">endtip</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">tip</span> ban faa-flash animated faa-slow %&#125;</span><span class="language-xml">ban</span><span class="template-tag">&#123;% <span class="name">endtip</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">当鼠标悬停时显示动画</span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">tip</span> warning faa-horizontal animated-hover %&#125;</span><span class="language-xml">warning</span><span class="template-tag">&#123;% <span class="name">endtip</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">tip</span> ban faa-flash animated-hover %&#125;</span><span class="language-xml">ban</span><span class="template-tag">&#123;% <span class="name">endtip</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">当鼠标悬停在父级元素时显示动画</span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">tip</span> warning faa-parent animated-hover %&#125;</span><span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-horizontal&quot;</span>&gt;</span>warning<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="template-tag">&#123;% <span class="name">endtip</span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">tip</span> ban faa-parent animated-hover %&#125;</span><span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-flash&quot;</span>&gt;</span>ban<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="template-tag">&#123;% <span class="name">endtip</span> %&#125;</span></span><br></pre></td></tr></table></figure><h1 id="尾声">尾声</h1><p>markdown的大部分语法都是<code>&#123;% %&#125;</code><br>所以我们只需要记住每个标签是干什么用的就行</p><table><thead><tr><th style="text-align:center">标签</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center">u</td><td style="text-align:center">下划线</td></tr><tr><td style="text-align:center">emp</td><td style="text-align:center">着重号</td></tr><tr><td style="text-align:center">wavy</td><td style="text-align:center">波浪线</td></tr><tr><td style="text-align:center">del</td><td style="text-align:center">删除线</td></tr><tr><td style="text-align:center">kdd</td><td style="text-align:center">键盘样式</td></tr><tr><td style="text-align:center">psw</td><td style="text-align:center">密码样式</td></tr><tr><td style="text-align:center">label</td><td style="text-align:center">代码框</td></tr><tr><td style="text-align:center">span</td><td style="text-align:center">样式设计</td></tr><tr><td style="text-align:center">timeline</td><td style="text-align:center">时间线</td></tr><tr><td style="text-align:center">video</td><td style="text-align:center">视频链接</td></tr><tr><td style="text-align:center">audio</td><td style="text-align:center">音频链接</td></tr><tr><td style="text-align:center">image</td><td style="text-align:center">图片链接</td></tr><tr><td style="text-align:center">folding</td><td style="text-align:center">折叠框</td></tr><tr><td style="text-align:center">hideInline</td><td style="text-align:center">隐藏内容</td></tr><tr><td style="text-align:center">btn</td><td style="text-align:center">按钮</td></tr><tr><td style="text-align:center">tabs</td><td style="text-align:center">分栏展示</td></tr><tr><td style="text-align:center">poem</td><td style="text-align:center">诗词展示</td></tr><tr><td style="text-align:center">icon</td><td style="text-align:center">阿里图片</td></tr><tr><td style="text-align:center">wow</td><td style="text-align:center">来点特效</td></tr><tr><td style="text-align:center">progress</td><td style="text-align:center">进度条</td></tr><tr><td style="text-align:center">notation</td><td style="text-align:center">弹窗注释</td></tr><tr><td style="text-align:center">anima</td><td style="text-align:center">动态标签</td></tr></tbody></table><span class="hide-inline"><button type="button" class="hide-button" style="">不会就搜，多看看官方文档和大佬的文章。  </button><span class="hide-content">但还是要多敲才行</span></span>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> makrdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>b站拜年祭爬取</title>
      <link href="/posts/24459/"/>
      <url>/posts/24459/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面">写在前面</h1><p>在使用和分享此爬虫代码时，请务必遵守以下限制和建议，并减少对目标服务器的负担：</p><ol><li><p><strong>遵循网站规定：</strong> 请始终遵循被爬取网站的使用条款、隐私政策以及<code>robots.txt</code>文件中的规定。不得违反网站规定的任何规则。</p></li><li><p><strong>合法用途：</strong> 此爬虫代码仅用于合法、合理的用途，如数据收集、分析或学术研究等。不得将其用于非法用途，包括但不限于侵犯隐私、版权或其他法律权益。</p></li><li><p><strong>适度请求频率：</strong> 设置合理的请求频率，避免对目标服务器造成过度负担。频繁的请求可能导致被封禁或其他限制。</p></li><li><p><strong>尊重隐私：</strong> 不得通过爬虫获取或传播任何用户敏感信息。请尊重被爬取网站和用户的隐私权。</p></li><li><p><strong>不要滥用资源：</strong> 避免滥用带宽和其他资源。在下载大量数据时，谨慎使用服务器资源，以确保公平共享和减少不必要的开销。</p></li><li><p><strong>不要绕过登录限制：</strong> 不得通过绕过网站的登录限制或其他访问控制机制，以确保不违反网站的安全策略。</p></li></ol><p>请注意，违反这些限制可能会导致法律责任，打击作者的热情，对爬虫作者和使用者都会产生负面影响。在使用和分享爬虫代码时，请谨慎考虑其合法性和合规性，以维护互联网的健康和稳定。</p><h1 id="使用说明">使用说明</h1><ol><li>有一定的<code>python</code>基础。</li><li>知道如何获取自己的<code>Cookie</code></li><li>已经安装了相关库，配置好了相关环境</li></ol><h1 id="拜年祭api">拜年祭api</h1><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> RequestUrl <span class="keyword">import</span> get_url</span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_information</span>(<span class="params">url</span>):</span><br><span class="line">    respon = get_url(url)</span><br><span class="line">    information = re.findall(<span class="string">r&#x27;&lt;script&gt;window.__INITIAL_STATE__=(.*?)&lt;/script&gt;&#x27;</span>, respon.text, re.S)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> information == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;拜年祭网址解析失败&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    information = re.sub(<span class="string">r&#x27;;\(.*\);&#x27;</span>, <span class="string">&#x27;&#x27;</span>, information)</span><br><span class="line">    information = json.loads(information)</span><br><span class="line"></span><br><span class="line">    avid = information[<span class="string">&#x27;videoInfo&#x27;</span>][<span class="string">&#x27;aid&#x27;</span>]</span><br><span class="line">    bvid = information[<span class="string">&#x27;videoInfo&#x27;</span>][<span class="string">&#x27;bvid&#x27;</span>]</span><br><span class="line">    cid = information[<span class="string">&#x27;videoInfo&#x27;</span>][<span class="string">&#x27;cid&#x27;</span>]</span><br><span class="line">    compile_code = execjs.<span class="built_in">compile</span>(<span class="built_in">open</span>(<span class="string">&#x27;w_rid.js&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>).read())</span><br><span class="line">    wts = compile_code.call(<span class="string">&#x27;wts&#x27;</span>)</span><br><span class="line">    key = <span class="string">f&#x27;avid=<span class="subst">&#123;avid&#125;</span>&amp;bvid=<span class="subst">&#123;bvid&#125;</span>&amp;cid=<span class="subst">&#123;cid&#125;</span>&amp;fnval=4048&amp;fnver=0&amp;fourk=1&amp;from_client=BROWSER&amp;gaia_source=&amp;qn=80&amp;session=&amp;voice_balance=1&amp;web_location=1315873&amp;wts=&#x27;</span> + wts</span><br><span class="line">    w_rid = compile_code.call(<span class="string">&#x27;w_rid&#x27;</span>,key)</span><br><span class="line"></span><br><span class="line">    api = <span class="string">f&#x27;https://api.bilibili.com/x/player/wbi/playurl?avid=<span class="subst">&#123;avid&#125;</span>&amp;bvid=<span class="subst">&#123;bvid&#125;</span>&amp;cid=<span class="subst">&#123;cid&#125;</span>&amp;qn=80&amp;fnver=0&amp;fnval=4048&amp;fourk=1&amp;gaia_source=&amp;from_client=BROWSER&amp;session=&amp;voice_balance=1&amp;web_location=1315873&amp;w_rid=<span class="subst">&#123;w_rid&#125;</span>&amp;wts=<span class="subst">&#123;wts&#125;</span>&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> api</span><br></pre></td></tr></table></figure><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>其实这个<code>api</code>中<code>w_rid</code>的加密是和<code>session</code>有关的，但是这个参数在我多次实验中发现，可有可无。b站动漫的下载也是这个逻辑，就是加密的key值不一样<code>session</code>这个参数的获取还是有点难度的</p></div>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
          <category> 非教程 </category>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown 基础语法</title>
      <link href="/posts/3352/"/>
      <url>/posts/3352/</url>
      
        <content type="html"><![CDATA[<style>  .hover-text {    opacity: 0;    transition: opacity 0.3s ease;  }  .hover-text.active {    opacity: 1;  }</style><script>  document.addEventListener('DOMContentLoaded', function() {    const hoverTextElements = document.querySelectorAll('.hover-text');    hoverTextElements.forEach(function(element) {      element.addEventListener('mouseenter', function() {        element.classList.add('active');      });      element.addEventListener('mouseleave', function() {        element.classList.remove('active');      });    });  });</script><h1 id="Front-matter">Front-matter</h1><p><em><strong>！！！这个重要！！！</strong></em><br>带有着重号的表示必填，请务必留意</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">详细解释</th></tr></thead><tbody><tr><td style="text-align:center"><emp>title</emp></td><td style="text-align:center">页面标题</td></tr><tr><td style="text-align:center"><emp>date</emp></td><td style="text-align:center">页面创建日期，一般会自动生成</td></tr><tr><td style="text-align:center"><emp>type</emp></td><td style="text-align:center">页面链接，很重要哦</td></tr><tr><td style="text-align:center">updated</td><td style="text-align:center">页面更新日期</td></tr><tr><td style="text-align:center">description</td><td style="text-align:center">页面描述</td></tr><tr><td style="text-align:center">keywords</td><td style="text-align:center">页面关键字</td></tr><tr><td style="text-align:center">comments</td><td style="text-align:center">页面页面评论模块</td></tr><tr><td style="text-align:center">top_img</td><td style="text-align:center">页面顶部图片</td></tr><tr><td style="text-align:center">aside</td><td style="text-align:center">显示侧边栏 (默认 true)</td></tr><tr><td style="text-align:center">highlight_shrink</td><td style="text-align:center">配置代码框是否展开 (true/false)</td></tr><tr><td style="text-align:center">sticky</td><td style="text-align:center">文章置顶优先级</td></tr><tr><td style="text-align:center">categories</td><td style="text-align:center">分类</td></tr><tr><td style="text-align:center">swiper_index(安装插件才有)</td><td style="text-align:center">顶轮播图顺序，非负整数，数字越大越靠前</td></tr></tbody></table><p><a href="https://markdown.com.cn/extended-syntax/tables.html">既然看到这个表格了，那我就随便讲讲这个是怎么画的吧</a><br>代码如下：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string"> 参数 </span>|<span class="string"> 详细解释 </span>|</span><br><span class="line">|<span class="string"> :---: </span>|<span class="string"> :----: </span>|</span><br><span class="line">|<span class="string"> &#123;% emp title %&#125; </span>|<span class="string"> 页面标题 </span>|</span><br><span class="line">|<span class="string"> &#123;% emp date %&#125; </span>|<span class="string"> 页面创建日期，一般会自动生成 </span>|</span><br><span class="line">|<span class="string"> &#123;% emp type %&#125; </span>|<span class="string"> 页面链接，很重要哦 </span>|</span><br><span class="line">|<span class="string"> updated </span>|<span class="string"> 页面更新日期 </span>|</span><br><span class="line">|<span class="string"> description </span>|<span class="string"> 页面描述 </span>|</span><br><span class="line">|<span class="string"> keywords </span>|<span class="string"> 页面关键字 </span>|</span><br><span class="line">|<span class="string"> comments </span>|<span class="string"> 页面页面评论模块 </span>|</span><br><span class="line">|<span class="string"> top_img </span>|<span class="string"> 页面顶部图片 </span>|</span><br><span class="line">|<span class="string"> aside </span>|<span class="string"> 显示侧边栏 (默认 true) </span>|</span><br><span class="line">|<span class="string"> highlight_shrink </span>|<span class="string"> 配置代码框是否展开 (true/false)</span>|</span><br><span class="line">其中要注意|<span class="string"> :---: </span>|<span class="string"> :----: </span>|<span class="string">很重要哦,我们一般使用三个以上的---表示表格</span></span><br><span class="line"><span class="string">当你不需要对文字位置设置时不需要加 : </span></span><br><span class="line"><span class="string">居中就 :---: 向左对其 :--- 向右对齐---:</span></span><br><span class="line"><span class="string">里面的文字样式就可以按照自己的心情去改写</span></span><br><span class="line"><span class="string">不一定都有用，具体情况要具体分析</span></span><br></pre></td></tr></table></figure><h1 id="a-href-https-markdown-com-cn-basic-syntax-links-html-title-标题语法-Markdown-标题语法-a"><a href="https://markdown.com.cn/basic-syntax/links.html" title="标题语法">Markdown 标题语法</a></h1><p>要创建标题，请在单词或短语前面添加井号 (#) 。# 的数量代表了标题的级别,一共有6级。</p><h1 id="Markdown-段落语法"><a href="https://markdown.com.cn">Markdown 段落语法</a></h1><p>在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行(<br>)。<br>当然你也可以直接按回车键(这个表示你已经完成这段的编辑要开始下一段了)。<br>但是你可不要小瞧这个换行，有的时候你的<em><strong>bug</strong></em>就很可能是一共小小的<em><strong>换行</strong></em> 导致的</p><h1 id="Markdown-强调语句"><a href="https://markdown.com.cn/basic-syntax/emphasis.html">Markdown 强调语句</a></h1><p>用左右两个星号或下划线包裹着你要强调的对象（加粗方法）</p><blockquote><p><strong>tmd</strong> 累死我了</p></blockquote><p>用左右一个星号或下划线包裹着你要强调的对象（斜体）</p><blockquote><p><em>tmd</em> 累死我了</p></blockquote><p>用左右三个星号或下划线包裹着你要强调的对象（斜体加粗）</p><blockquote><p><em><strong>tmd</strong></em> 累死我了</p></blockquote><h1 id="Markdown-引用语法"><a href="https://markdown.com.cn/basic-syntax/blockquotes.html">Markdown 引用语法</a></h1><p>要创建块引用，请在段落前添加一个 &gt; 符号。<br>效果如下：</p><blockquote><p>hello! welcome!</p></blockquote><p>块引用可以包含多个段落。为段落之间的空白行添加一个 &gt; 符号。<br>效果如下：</p><blockquote><p>他好</p><p>我也好</p></blockquote><p>当然了，肯定少不了套娃（嵌套）<br>效果如下：</p><blockquote><p>他好</p><blockquote><ul><li>我也好(-表示点)</li></ul></blockquote></blockquote><h1 id="Markdown-列表语法"><a href="https://markdown.com.cn/basic-syntax/lists.html">Markdown 列表语法</a></h1><ul><li>当我们需要创建有序列表时可以在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始</li><li>要创建无序列表，请在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) 。缩进一个或多个列表项可创建嵌套列表。</li><li>代码块通常采用四个空格或一个制表符缩进。当它们被放在列表中时，请将它们缩进八个空格或两个制表符。<br>代码如下：</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> First <span class="built_in">item</span></span><br><span class="line"><span class="number">2.</span> Second <span class="built_in">item</span></span><br><span class="line"><span class="number">3.</span> Third <span class="built_in">item</span></span><br><span class="line"><span class="number">4.</span> Fourth <span class="built_in">item</span></span><br></pre></td></tr></table></figure><h1 id="Markdown-代码语法"><a href="https://markdown.com.cn/basic-syntax/code.html">Markdown 代码语法</a></h1><p>当你要将单词或者短语表示为代码的时候可以用(``)也可以用html<code></code><br>效果如下：</p><blockquote><p><code>i love you </code></p></blockquote><blockquote><p><code>&lt;code&gt;i love you &lt;/code&gt;</code><br>so easy</p></blockquote><h1 id="Markdown-分隔线语法"><a href="https://markdown.com.cn/basic-syntax/horizontal-rules.html">Markdown 分隔线语法</a></h1><ul><li>要创建分隔线，请在单独一行上使用三个或多个星号 (***)、破折号 (—) 或下划线 (___) ， <em><strong>并且不能包含其他内容</strong></em>。</li></ul><blockquote><p><strong>为了兼容性，请在分隔线的前后均添加空白行。</strong></p></blockquote><hr><p>你</p><hr><p>好</p><hr><h1 id="Markdown-链接语法"><a href="https://markdown.com.cn/basic-syntax/links.html">Markdown 链接语法</a></h1><blockquote><p><code>超链接Markdown语法代码：[超链接显示名](超链接地址 &quot;超链接title&quot;)</code><br><code>对应的HTML代码：&lt;a href=&quot;超链接地址&quot; title=&quot;超链接title&quot;&gt;超链接显示名&lt;/a&gt;</code><br>使用尖括号可以很方便地把URL或者email地址变成可点击的链接。如下：<br><a href="https://2021dt.github.io/">https://2021dt.github.io/</a><span class="hover-text"><s>欢迎来玩</s></span><br>强调链接, 在链接语法前后增加星号。 要将链接表示为代码，请在方括号中添加反引号。</p></blockquote><h1 id="Markdown-图片语法"><a href="https://markdown.com.cn/basic-syntax/images.html">Markdown 图片语法</a></h1><blockquote><p>这个和超链接的写法大同小异</p><ul><li><code>插入图片Markdown语法代码：![图片alt](图片链接 &quot;图片title&quot;)。</code></li><li><code>对应的HTML代码：&lt;img src=&quot;图片链接&quot; alt=&quot;图片alt&quot; title=&quot;图片title&quot;&gt;</code></li></ul><div title="啊对对对">是不是很简单！</div> </blockquote><h1 id="Markdown-内嵌-HTML-标签"><a href="https://markdown.com.cn/basic-syntax/htmls.html">Markdown 内嵌 HTML 标签</a></h1><blockquote><p>这个没什么好讲的，看看官方文档怎么说：</p><ul><li><code>HTML 的行级內联标签如 &lt;span&gt;、&lt;cite&gt;、&lt;del&gt; 不受限制，可以在 Markdown 的段落、列表或是标题里任意使用。依照个人习惯，甚至可以不用 Markdown 格式，而采用 HTML 标签来格式化。例如：如果比较喜欢 HTML 的 &lt;a&gt; 或 &lt;img&gt; 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图片语法。当你需要更改元素的属性时（例如为文本指定颜色或更改图像的宽度），使用 HTML 标签更方便些。</code></li></ul></blockquote><ul><li>Markdown设置字体大小、颜色、类型、加粗</li></ul><blockquote><p><code>&lt;font size=1 color=red face=&quot;华文彩云&quot;&gt;字体大小size=1&lt;/font&gt;</code><br>size 范围在1-7</p></blockquote><h2 id="既然都支持-span-class-hover-text-html-span-那我整点花活也可以吧">既然都支持<span class="hover-text">html</span>那我整点花活也可以吧</h2><ul><li>想要达到这种和鼠标联动的字体显示，你只需要用以下代码就可以实现</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.hover-text</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition</span>: opacity <span class="number">0.3s</span> ease;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.hover-text</span><span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> hoverTextElements = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.hover-text&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    hoverTextElements.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">element</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      element.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        element.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      element.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        element.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;active&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一段正常的文本，<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;hover-text&quot;</span>&gt;</span>将你要联动的文字填写在这里<span class="tag">&lt;/<span class="name">span</span>&gt;</span>。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>当你需要<em><strong>口是心非</strong></em>的时候你可以试试 <s>我，我，我才没有这样想呢</s><br>代码如下：</li></ul><blockquote><p><code>&lt;s&gt;我，我，我才不想教你呢！&lt;/s&gt; 或者 ~~那，那你就拿去吧！~~</code></p></blockquote><ul><li><div title="这样就不会被人发现了">当然你也可以发个小牢骚，试试将鼠标移到这里看看?😏</div>代码如下：</li></ul><blockquote><p><code>&lt;div title=&quot;鼠标显示文本&quot;&gt;直接显示文本&lt;/div&gt;</code></p></blockquote><p>当然Markdown的<s>玩法</s>语法肯定不止这些，但是只要掌握基础的语法一样可以写的很好看。不过看完这篇文章我还是推荐你去看看官方文档，这个真的很重要。<br>👉<a href="https://markdown.com.cn/intro.html">https://markdown.com.cn/intro.html</a>👈<br>对了扔个表情包链接👉<a href="https://gist.github.com/rxaviers/7360908">https://gist.github.com/rxaviers/7360908</a>👈</p><!-- div{height:100px;width:100px;background-color: aqua;} -->]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> makrdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
